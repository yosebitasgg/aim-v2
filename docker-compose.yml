version: '3.8'

# Configuración de servicios
services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: aim-database
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      # Persistencia de datos
      - postgres_data:/var/lib/postgresql/data
      # Script de inicialización (opcional)
      - ./aim-website/database-setup.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - aim-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Servicio Backend
  backend:
    build:
      context: ./aim-backend
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: aim-backend
    restart: unless-stopped
    environment:
      # Configuración de Node.js
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${BACKEND_PORT:-3001}
      
      # Configuración de base de datos
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=aim_schema
      
      # Configuración de JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      
      # Configuración de bcrypt
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      
      # Configuración de rate limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-10000}
      
      # Configuración de CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:4321}
      
      # Configuración de logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      # Solo en desarrollo: bind mount para hot-reloading
      - ${PWD}/aim-backend:/app:${MOUNT_TYPE:-delegated}
      - /app/node_modules
      - /app/dist
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - aim-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Configuración de recursos (opcional)
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Servicio Frontend
  frontend:
    build:
      context: ./aim-website
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    container_name: aim-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      # Variables para el build de Astro
      PUBLIC_API_URL: ${PUBLIC_API_URL:-http://localhost:3001}
      BACKEND_URL: ${BACKEND_URL:-http://backend:3001}
    volumes:
      # Solo en desarrollo: bind mount para hot-reloading
      - ${PWD}/aim-website:/app:${MOUNT_TYPE:-delegated}
      - /app/node_modules
      - /app/dist
      - /app/.astro
    ports:
      - "${FRONTEND_PORT:-4321}:${FRONTEND_INTERNAL_PORT:-4321}"
    networks:
      - aim-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${FRONTEND_INTERNAL_PORT:-4321}/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Configuración de recursos (opcional)
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

# Configuración de redes
networks:
  aim-network:
    driver: bridge
    name: aim-network

# Configuración de volúmenes
volumes:
  postgres_data:
    driver: local
    name: aim-postgres-data

# Configuración adicional para desarrollo vs producción
profiles:
  # Perfil de desarrollo (por defecto)
  - development
  
  # Perfil de producción
  - production 