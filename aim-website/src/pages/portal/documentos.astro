---
import PortalLayoutSidebar from '../../layouts/PortalLayoutSidebar.astro';
import PortalAuthGuard from '../../components/PortalAuthGuard.jsx';
import { Icon } from 'astro-icon/components';

// Los datos se cargarán dinámicamente desde el cliente
// para evitar problemas con la API en tiempo de build
---

<PortalLayoutSidebar title="Documentos - Portal AIM">
  <PortalAuthGuard client:load>
    <!-- Header Principal -->
    <div class="mb-8">
      <div class="bg-gradient-to-r from-teal-600 to-emerald-600 rounded-xl p-6 text-white">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-2xl font-bold mb-2">Gestión de Documentos</h1>
            <p class="text-teal-100">Control y generación de documentos del flujo de trabajo</p>
          </div>
          <div class="text-right">
            <div class="text-teal-100 text-sm">Tipos de Documentos</div>
            <div class="text-xl font-bold" id="documentTypes">0</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Estadísticas -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
      <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
        <div class="flex items-center justify-between">
                        <div>
                <p class="text-sm text-gray-500 mb-1">Documentos Totales</p>
                <p class="text-2xl font-bold text-gray-900" id="totalDocuments">0</p>
                <p class="text-sm text-teal-600 flex items-center mt-2">
                  <Icon name="tabler:file-text" class="w-4 h-4 mr-1" />
                  Generados
                </p>
              </div>
          <div class="p-3 bg-teal-50 rounded-lg">
            <Icon name="tabler:files" class="w-6 h-6 text-teal-600" />
          </div>
        </div>
      </div>

      <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
        <div class="flex items-center justify-between">
                        <div>
                <p class="text-sm text-gray-500 mb-1">Este Mes</p>
                <p class="text-2xl font-bold text-gray-900" id="documentsThisMonth">0</p>
                <p class="text-sm text-orange-600 flex items-center mt-2">
                  <Icon name="tabler:calendar" class="w-4 h-4 mr-1" />
                  Nuevos
                </p>
              </div>
          <div class="p-3 bg-orange-50 rounded-lg">
            <Icon name="tabler:calendar" class="w-6 h-6 text-orange-600" />
          </div>
        </div>
      </div>

      <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
        <div class="flex items-center justify-between">
                        <div>
                <p class="text-sm text-gray-500 mb-1">Tiempo Promedio</p>
                <p class="text-2xl font-bold text-gray-900" id="averageTime">0 hrs</p>
                <p class="text-sm text-emerald-600 flex items-center mt-2">
                  <Icon name="tabler:clock" class="w-4 h-4 mr-1" />
                  Finalización
                </p>
              </div>
          <div class="p-3 bg-emerald-50 rounded-lg">
            <Icon name="tabler:clock" class="w-6 h-6 text-emerald-600" />
          </div>
        </div>
      </div>

      <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
        <div class="flex items-center justify-between">
                        <div>
                <p class="text-sm text-gray-500 mb-1">Tipos de Documentos</p>
                <p class="text-2xl font-bold text-gray-900" id="documentTypesCount">0</p>
                <p class="text-sm text-teal-600 flex items-center mt-2">
                  <Icon name="tabler:list" class="w-4 h-4 mr-1" />
                  Disponibles
                </p>
              </div>
          <div class="p-3 bg-teal-50 rounded-lg">
            <Icon name="tabler:list" class="w-6 h-6 text-teal-600" />
          </div>
        </div>
      </div>
    </div>

    <!-- Carrusel de Tipos de Documentos -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden mb-8">
      <div class="bg-gradient-to-r from-emerald-500 to-teal-500 p-6 text-white">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-xl font-semibold">Tipos de Documentos</h3>
            <p class="text-emerald-100 mt-1">Documentos estándar generados en cada fase del flujo</p>
          </div>
          <div class="flex items-center space-x-3">
            <button 
              onclick="toggleAllPhases(true)"
              class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg font-medium transition-all duration-200 flex items-center space-x-2"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-5V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 0h-4m4 0l-5-5"></path>
              </svg>
              <span>Expandir Todo</span>
            </button>
            <button 
              onclick="toggleAllPhases(false)"
              class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg font-medium transition-all duration-200 flex items-center space-x-2"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 9l6 6m0 0l6-6m-6 6L9 9m6 6V3"></path>
              </svg>
              <span>Contraer Todo</span>
            </button>
          </div>
        </div>
      </div>
      
      <div class="p-6">
        <div id="documentTypesContainer" class="space-y-8">
          <!-- Loading placeholders para estructura por fases -->
          <div class="animate-pulse">
            <!-- Header de fase placeholder -->
            <div class="mb-6">
              <div class="h-6 bg-gray-200 rounded w-32 mb-2"></div>
              <div class="h-4 bg-gray-200 rounded w-80"></div>
            </div>
            
            <!-- Cards placeholder -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
              <div class="border-2 border-gray-200 bg-gray-50 rounded-lg p-4">
                <div class="flex items-center space-x-3 mb-3">
                  <div class="p-2 bg-gray-100 rounded-lg">
                    <div class="w-6 h-6 bg-gray-200 rounded"></div>
                  </div>
                  <div>
                    <div class="h-4 bg-gray-200 rounded w-24 mb-1"></div>
                    <div class="h-3 bg-gray-200 rounded w-16"></div>
                  </div>
                </div>
                <div class="h-3 bg-gray-200 rounded mb-2"></div>
                <div class="h-3 bg-gray-200 rounded mb-3 w-3/4"></div>
                <div class="h-3 bg-gray-200 rounded w-20"></div>
              </div>
              
              <div class="border-2 border-gray-200 bg-gray-50 rounded-lg p-4">
                <div class="flex items-center space-x-3 mb-3">
                  <div class="p-2 bg-gray-100 rounded-lg">
                    <div class="w-6 h-6 bg-gray-200 rounded"></div>
                  </div>
                  <div>
                    <div class="h-4 bg-gray-200 rounded w-24 mb-1"></div>
                    <div class="h-3 bg-gray-200 rounded w-16"></div>
                  </div>
                </div>
                <div class="h-3 bg-gray-200 rounded mb-2"></div>
                <div class="h-3 bg-gray-200 rounded mb-3 w-3/4"></div>
                <div class="h-3 bg-gray-200 rounded w-20"></div>
              </div>
            </div>
          </div>
          
          <div class="animate-pulse border-t border-gray-200 pt-8">
            <!-- Header de fase placeholder -->
            <div class="mb-6">
              <div class="h-6 bg-gray-200 rounded w-32 mb-2"></div>
              <div class="h-4 bg-gray-200 rounded w-80"></div>
            </div>
            
            <!-- Cards placeholder -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
              <div class="border-2 border-gray-200 bg-gray-50 rounded-lg p-4">
                <div class="flex items-center space-x-3 mb-3">
                  <div class="p-2 bg-gray-100 rounded-lg">
                    <div class="w-6 h-6 bg-gray-200 rounded"></div>
                  </div>
                  <div>
                    <div class="h-4 bg-gray-200 rounded w-24 mb-1"></div>
                    <div class="h-3 bg-gray-200 rounded w-16"></div>
                  </div>
                </div>
                <div class="h-3 bg-gray-200 rounded mb-2"></div>
                <div class="h-3 bg-gray-200 rounded mb-3 w-3/4"></div>
                <div class="h-3 bg-gray-200 rounded w-20"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Tabla de Órdenes y Documentos -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
      <div class="bg-gradient-to-r from-teal-500 to-emerald-500 p-6 text-white">
        <div class="flex items-center justify-between">
          <div>
            <h3 class="text-xl font-semibold">Órdenes y Documentos</h3>
            <p class="text-teal-100 mt-1">Estado de documentación por orden de trabajo</p>
          </div>
          <button id="btnCrearDocumento" class="bg-white bg-opacity-20 hover:bg-opacity-30 text-white px-4 py-2 rounded-lg font-medium transition-all duration-200">
            <Icon name="tabler:plus" class="w-4 h-4 inline mr-2" />
            Crear Documento
          </button>
        </div>
      </div>
      
      <div class="overflow-x-auto">
        <table class="w-full">
          <thead class="bg-gray-50">
            <tr>
              <th class="text-left py-3 px-6 font-medium text-gray-900">Orden</th>
              <th class="text-left py-3 px-6 font-medium text-gray-900">Cliente/Proyecto</th>
              <th class="text-left py-3 px-6 font-medium text-gray-900">Fase Actual</th>
              <th class="text-left py-3 px-6 font-medium text-gray-900">Avance</th>
              <th class="text-left py-3 px-6 font-medium text-gray-900">Documentos</th>
              <th class="text-left py-3 px-6 font-medium text-gray-900">Acciones</th>
            </tr>
          </thead>
          <tbody id="ordersTableBody" class="divide-y divide-gray-200">
            <!-- Loading placeholders -->
            <tr class="hover:bg-gray-50 animate-pulse">
              <td class="py-4 px-6">
                <div>
                  <div class="h-4 bg-gray-200 rounded w-24 mb-1"></div>
                  <div class="h-3 bg-gray-200 rounded w-20"></div>
                </div>
              </td>
              <td class="py-4 px-6">
                <div>
                  <div class="h-4 bg-gray-200 rounded w-32 mb-1"></div>
                  <div class="h-3 bg-gray-200 rounded w-28"></div>
                </div>
              </td>
              <td class="py-4 px-6">
                <div class="h-6 bg-gray-200 rounded-full w-20"></div>
              </td>
              <td class="py-4 px-6">
                <div class="flex items-center space-x-3">
                  <div class="flex-1 bg-gray-200 rounded-full h-2"></div>
                  <div class="h-4 bg-gray-200 rounded w-8"></div>
                </div>
              </td>
              <td class="py-4 px-6">
                <div class="flex space-x-2">
                  <div class="h-6 bg-gray-200 rounded w-20"></div>
                  <div class="h-6 bg-gray-200 rounded w-24"></div>
                </div>
              </td>
              <td class="py-4 px-6">
                <div class="flex space-x-2">
                  <div class="h-8 bg-gray-200 rounded w-16"></div>
                  <div class="h-8 bg-gray-200 rounded w-16"></div>
                </div>
              </td>
            </tr>
            <tr class="hover:bg-gray-50 animate-pulse">
              <td class="py-4 px-6">
                <div>
                  <div class="h-4 bg-gray-200 rounded w-24 mb-1"></div>
                  <div class="h-3 bg-gray-200 rounded w-20"></div>
                </div>
              </td>
              <td class="py-4 px-6">
                <div>
                  <div class="h-4 bg-gray-200 rounded w-32 mb-1"></div>
                  <div class="h-3 bg-gray-200 rounded w-28"></div>
                </div>
              </td>
              <td class="py-4 px-6">
                <div class="h-6 bg-gray-200 rounded-full w-20"></div>
              </td>
              <td class="py-4 px-6">
                <div class="flex items-center space-x-3">
                  <div class="flex-1 bg-gray-200 rounded-full h-2"></div>
                  <div class="h-4 bg-gray-200 rounded w-8"></div>
                </div>
              </td>
              <td class="py-4 px-6">
                <div class="flex space-x-2">
                  <div class="h-6 bg-gray-200 rounded w-20"></div>
                </div>
              </td>
              <td class="py-4 px-6">
                <div class="flex space-x-2">
                  <div class="h-8 bg-gray-200 rounded w-16"></div>
                </div>
              </td>
            </tr>
            <tr class="hover:bg-gray-50 animate-pulse">
              <td class="py-4 px-6">
                <div>
                  <div class="h-4 bg-gray-200 rounded w-24 mb-1"></div>
                  <div class="h-3 bg-gray-200 rounded w-20"></div>
                </div>
              </td>
              <td class="py-4 px-6">
                <div>
                  <div class="h-4 bg-gray-200 rounded w-32 mb-1"></div>
                  <div class="h-3 bg-gray-200 rounded w-28"></div>
                </div>
              </td>
              <td class="py-4 px-6">
                <div class="h-6 bg-gray-200 rounded-full w-20"></div>
              </td>
              <td class="py-4 px-6">
                <div class="flex items-center space-x-3">
                  <div class="flex-1 bg-gray-200 rounded-full h-2"></div>
                  <div class="h-4 bg-gray-200 rounded w-8"></div>
                </div>
              </td>
              <td class="py-4 px-6">
                <div class="flex space-x-2">
                  <div class="h-6 bg-gray-200 rounded w-20"></div>
                  <div class="h-6 bg-gray-200 rounded w-24"></div>
                </div>
              </td>
              <td class="py-4 px-6">
                <div class="flex space-x-2">
                  <div class="h-8 bg-gray-200 rounded w-16"></div>
                  <div class="h-8 bg-gray-200 rounded w-16"></div>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Modal Ver Documentos -->
    <div id="modalVerDocumentos" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
      <div class="bg-white rounded-xl max-w-6xl w-full max-h-screen overflow-y-auto">
        <div class="p-6">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-semibold text-gray-900">Documentos de la Orden</h3>
            <button id="cerrarModalVer" class="text-gray-400 hover:text-gray-600">
              <Icon name="tabler:x" class="w-6 h-6" />
            </button>
          </div>
          <div id="contenidoModalVer"></div>
        </div>
      </div>
    </div>

    <!-- Modal Crear Documentos -->
    <div id="modalCrearDocumentos" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
      <div class="bg-white rounded-xl max-w-6xl w-full max-h-screen overflow-y-auto">
        <div class="p-6">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-semibold text-gray-900">Crear Documento</h3>
            <button id="cerrarModalCrear" class="text-gray-400 hover:text-gray-600">
              <Icon name="tabler:x" class="w-6 h-6" />
            </button>
          </div>
          <div id="contenidoModalCrear">
            <!-- Contenido dinámico aquí -->
          </div>
        </div>
      </div>
    </div>
    
    <!-- Modal Selector de Orden -->
    <div id="modalSelectorOrden" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
      <div class="bg-white rounded-xl max-w-2xl w-full">
        <div class="p-6">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-semibold text-gray-900">Seleccionar Orden</h3>
            <button id="cerrarModalSelector" class="text-gray-400 hover:text-gray-600">
              <Icon name="tabler:x" class="w-6 h-6" />
            </button>
          </div>
          <div id="contenidoModalSelector">
            <!-- Contenido dinámico aquí -->
          </div>
        </div>
      </div>
    </div>

    <!-- Modal Vista Previa de Documento -->
    <div id="modalVistaPrevia" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-2">
      <div class="bg-white rounded-xl max-w-[98vw] w-full max-h-[98vh] overflow-y-auto shadow-2xl">
        <div class="p-4 sm:p-6">
          <div class="flex items-center justify-between mb-4 sm:mb-6">
            <h3 class="text-xl font-semibold text-gray-900">Vista Previa del Documento</h3>
            <button id="cerrarModalPrevia" class="text-gray-400 hover:text-gray-600 p-2 rounded-lg hover:bg-gray-100 transition-colors">
              <Icon name="tabler:x" class="w-6 h-6" />
            </button>
          </div>
          <div id="contenidoModalPrevia" class="min-h-[400px]">
            <!-- Contenido dinámico aquí -->
          </div>
        </div>
      </div>
    </div>
  </PortalAuthGuard>

  <!-- Estilos para el sistema desplegable -->
  <style>
    /* Animaciones suaves para el contenido desplegable */
    .phase-content {
      max-height: 0;
      opacity: 0;
      transition: max-height 0.5s ease-in-out, opacity 0.3s ease-in-out;
    }
    
    .modal-phase-content {
      max-height: 0;
      opacity: 0;
      transition: max-height 0.5s ease-in-out, opacity 0.3s ease-in-out;
    }
    
    /* Efectos hover mejorados para las cards */
    .document-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    }
    
    /* Efectos hover para los headers de fase */
    .collapsible-header:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    .modal-collapsible-header:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    /* Animación para las flechas */
    .phase-arrow {
      transition: transform 0.3s ease-in-out;
    }
    
    .modal-phase-arrow {
      transition: transform 0.3s ease-in-out;
    }
    
    /* Efectos de pulsación en botones */
    .collapsible-header:active,
    .modal-collapsible-header:active {
      transform: translateY(0);
    }
    
    /* Mejoras visuales para los indicadores */
    .phase-content .document-card {
      animation: slideUp 0.3s ease-out;
    }
    
    .modal-phase-content .document-card {
      animation: slideUp 0.3s ease-out;
    }
    
    @keyframes slideUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    /* Hover effects para badges */
    .phase-content .document-card:hover .rounded-full {
      transform: scale(1.1);
    }
    
          .modal-phase-content .document-card:hover .rounded-full {
        transform: scale(1.1);
      }
      
      /* Estilos para componentes de formulario */
      .file-upload-component {
        transition: all 0.3s ease;
      }
      
      .file-upload-component:hover {
        border-color: #14b8a6;
        background-color: #f0fdfa;
      }
      
      .roi-calculator-simple {
        border: 1px solid #e5e7eb;
        transition: all 0.3s ease;
      }
      
      .roi-calculator-simple:hover {
        border-color: #14b8a6;
        box-shadow: 0 4px 12px rgba(20, 184, 166, 0.1);
      }
      
      .attachment-field .file-list {
        animation: fadeIn 0.3s ease-in-out;
      }
      
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
    </style>

  <!-- Cargar API Client primero -->
  <script is:inline src="/scripts/documentsApiClient.js"></script>
  <script is:inline src="/scripts/ordersApiClient.js"></script>
  
  <!-- Importar React para componentes dinámicos -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  
  <!-- Luego cargar la lógica de documentos -->
  <script is:inline>
    // Variables globales para almacenar datos
    let documentTypes = [];
    let documents = [];
    let orders = [];
    let stats = {};
    let selectedOrder = null;
    let selectedDocumentType = null;
    let createdDocument = null;

    // Crear instancias globales de los API clients
    window.documentsApi = new DocumentsApiClient();
    window.ordersApi = new OrdersApiClient();

    // Función para probar conectividad del backend
    async function testBackendConnection() {
      try {
        console.log('🔌 Probando conectividad con el backend...');
        
        // Intentar una llamada simple a la API
        const response = await fetch('http://localhost:3001/api/documents/types', {
          method: 'GET',
          headers: window.documentsApi.getHeaders(),
          credentials: 'include'
        });
        
        console.log('📡 Estado de la respuesta:', response.status);
        
        if (response.ok) {
          console.log('✅ Backend conectado correctamente');
          return true;
        } else if (response.status === 401) {
          console.warn('⚠️ Backend conectado pero token de autenticación inválido');
          return false;
        } else {
          console.warn('⚠️ Backend respondió con error:', response.status);
          return false;
        }
      } catch (error) {
        console.error('❌ No se pudo conectar al backend:', error);
        return false;
      }
    }

    // Inicializar la página cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', async function() {
      try {
        console.log('🚀 Inicializando página de documentos...');
        
        // Esperar un poco para asegurar que todos los scripts se carguen
        await new Promise(resolve => setTimeout(resolve, 100));
        
        // Verificar que las dependencias estén disponibles
        if (!window.documentsApi) {
          throw new Error('documentsApi no está disponible');
        }
        
        if (!window.ordersApi) {
          throw new Error('ordersApi no está disponible');
        }
        
        // Probar conectividad del backend
        await testBackendConnection();
        
        // Inicializar la página
        await initializePage();
        
        // Configurar event listeners
        setupEventListeners();
        
        console.log('✅ Página de documentos inicializada correctamente');
      } catch (error) {
        console.error('❌ Error inicializando página de documentos:', error);
        showInitializationError(error);
      }
    });

    async function initializePage() {
      try {
        // Mostrar indicadores de carga
        showLoadingState();
        
        // Cargar datos en paralelo
        const results = await Promise.allSettled([
          loadDocumentTypes(),
          loadDocuments(),
          loadOrders(),
          loadStats()
        ]);

        // Log de resultados para debugging
        results.forEach((result, index) => {
          const operations = ['documentTypes', 'documents', 'orders', 'stats'];
          if (result.status === 'rejected') {
            console.warn(`Error cargando ${operations[index]}:`, result.reason);
          }
        });

        // Renderizar la interfaz
        renderStats();
        renderDocumentTypes();
        renderOrdersTable();
        
        // Ocultar indicadores de carga
        hideLoadingState();
        
      } catch (error) {
        console.error('Error inicializando la página:', error);
        showError('Error cargando los datos. Por favor recarga la página.');
      }
    }

    function setupEventListeners() {
      // Event listener para botón crear documento principal
      const btnCrearDocumento = document.getElementById('btnCrearDocumento');
      if (btnCrearDocumento) {
        btnCrearDocumento.addEventListener('click', function() {
          mostrarSelectorOrden();
        });
      }

      // Event listeners para cerrar modales
      const cerrarModalVer = document.getElementById('cerrarModalVer');
      if (cerrarModalVer) {
        cerrarModalVer.addEventListener('click', function() {
          document.getElementById('modalVerDocumentos').classList.add('hidden');
        });
      }
      
      const cerrarModalCrear = document.getElementById('cerrarModalCrear');
      if (cerrarModalCrear) {
        cerrarModalCrear.addEventListener('click', function() {
          document.getElementById('modalCrearDocumentos').classList.add('hidden');
        });
      }
      
      const cerrarModalSelector = document.getElementById('cerrarModalSelector');
      if (cerrarModalSelector) {
        cerrarModalSelector.addEventListener('click', function() {
          document.getElementById('modalSelectorOrden').classList.add('hidden');
        });
      }

      const cerrarModalPrevia = document.getElementById('cerrarModalPrevia');
      if (cerrarModalPrevia) {
        cerrarModalPrevia.addEventListener('click', function() {
          document.getElementById('modalVistaPrevia').classList.add('hidden');
        });
      }

      // Event listener para cerrar modales con escape
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          document.getElementById('modalVerDocumentos').classList.add('hidden');
          document.getElementById('modalCrearDocumentos').classList.add('hidden');
          document.getElementById('modalSelectorOrden').classList.add('hidden');
          document.getElementById('modalVistaPrevia').classList.add('hidden');
        }
      });
    }

    function showLoadingState() {
      // Limpiar contenido existente sin agregar placeholders visuales
      const statsElements = ['totalDocuments', 'documentsThisMonth', 'averageTime', 'documentTypesCount'];
      statsElements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
          element.textContent = '...';
        }
      });
    }

    function hideLoadingState() {
      // Los elementos ya se actualizan en renderStats(), renderDocumentTypes(), etc.
    }

    function showInitializationError(error) {
      const tableBody = document.getElementById('ordersTableBody');
      if (tableBody) {
        tableBody.innerHTML = `
          <tr>
            <td colspan="6" class="px-6 py-8 text-center text-red-500">
              <div class="flex flex-col items-center">
                <svg class="w-12 h-12 text-red-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
                <p class="text-lg font-medium">Error inicializando el sistema</p>
                <p class="text-sm mb-4">${error.message}</p>
                <button onclick="location.reload()" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700">
                  Reintentar
                </button>
              </div>
            </td>
          </tr>
        `;
      }
    }

    async function loadDocumentTypes() {
      try {
        documentTypes = await window.documentsApi.getDocumentTypes();
        console.log('✅ Tipos de documentos cargados:', documentTypes.length);
      } catch (error) {
        console.error('❌ Error cargando tipos de documentos:', error);
        documentTypes = window.documentsApi.getMockDocumentTypes();
        console.log('📝 Usando tipos de documentos simulados');
      }
    }

    async function loadDocuments() {
      try {
        console.log('📄 Cargando documentos desde el backend...');
        const response = await window.documentsApi.getDocuments({ limit: 100 });
        console.log('📄 Respuesta de getDocuments:', response);
        
        documents = response.documents || [];
        console.log('✅ Documentos cargados:', documents.length);
        
        // Log detallado de documentos
        if (documents.length > 0) {
          console.log('📊 Desglose de documentos por orden:');
          const documentsByOrder = {};
          documents.forEach(doc => {
            const orderId = doc.orderId || doc.order?.id || 'sin-orden';
            if (!documentsByOrder[orderId]) {
              documentsByOrder[orderId] = [];
            }
            documentsByOrder[orderId].push({
              id: doc.id,
              title: doc.title,
              status: doc.status,
              documentType: doc.documentType?.name
            });
          });
          
          Object.entries(documentsByOrder).forEach(([orderId, docs]) => {
            console.log(`📋 Orden ${orderId}: ${docs.length} documentos`, docs);
          });
        }
        
      } catch (error) {
        console.error('❌ Error cargando documentos:', error);
        documents = [];
      }
    }

    async function loadOrders() {
      try {
        const response = await window.ordersApi.getOrders({ limit: 100 });
        orders = response.orders || [];
        console.log('✅ Órdenes cargadas:', orders.length);
        
        // Si no hay órdenes reales, crear algunas de prueba 
        if (orders.length === 0) {
          console.log('📝 No hay órdenes reales, creando datos de prueba...');
          orders = await createTestOrders();
        }
      } catch (error) {
        console.error('❌ Error cargando órdenes:', error);
        console.log('📝 Creando órdenes de prueba...');
        orders = await createTestOrders();
      }
    }

    async function createTestOrders() {
      // Intentar crear órdenes de prueba a través de la API
      const testOrders = [
        {
          title: 'Automatización Cuentas por Pagar',
          description: 'Sistema de automatización para el proceso de cuentas por pagar',
          clientCompanyName: 'Manufacturas ABC',
          contactName: 'Juan Pérez',
          contactEmail: 'juan.perez@manufactuasabc.com',
          contactPhone: '+52 81 1234-5678',
          status: 'IN_PROGRESS',
          priority: 'MEDIUM',
          type: 'AUTOMATION'
        },
        {
          title: 'Sistema de Tracking de Envíos',
          description: 'Plataforma de seguimiento y gestión de envíos',
          clientCompanyName: 'Logística XYZ',
          contactName: 'María González',
          contactEmail: 'maria@logisticaxyz.com',
          contactPhone: '+52 81 2345-6789',
          status: 'COMPLETED',
          priority: 'HIGH',
          type: 'INTEGRATION'
        },
        {
          title: 'CRM Automatizado',
          description: 'Sistema CRM con automatización de procesos de ventas',
          clientCompanyName: 'Ventas Pro Ltd',
          contactName: 'Carlos Rodríguez',
          contactEmail: 'carlos@ventaspro.com',
          contactPhone: '+52 81 3456-7890',
          status: 'PENDING',
          priority: 'MEDIUM',
          type: 'AUTOMATION'
        }
      ];

      const createdOrders = [];
      
      for (const orderData of testOrders) {
        try {
          const response = await fetch('http://localhost:3000/api/orders', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            },
            body: JSON.stringify(orderData)
          });
          
          if (response.ok) {
            const newOrder = await response.json();
            createdOrders.push(newOrder.data);
            console.log(`✅ Orden creada: ${newOrder.data.title}`);
          } else {
            console.warn(`⚠️ No se pudo crear orden: ${orderData.title}`);
          }
        } catch (error) {
          console.warn(`⚠️ Error creando orden: ${orderData.title}`, error);
        }
      }

      // Si no se pudieron crear órdenes reales, usar datos simulados pero con IDs consistentes
      if (createdOrders.length === 0) {
        return [
          {
            id: 'order_test_001',
            orderNumber: 'ORD-2024-001',
            title: 'Automatización Cuentas por Pagar',
            client: { companyName: 'Manufacturas ABC' },
            createdAt: '2024-01-15T10:00:00Z',
            status: 'IN_PROGRESS'
          },
          {
            id: 'order_test_002',
            orderNumber: 'ORD-2024-002', 
            title: 'Sistema de Tracking de Envíos',
            client: { companyName: 'Logística XYZ' },
            createdAt: '2024-01-10T09:00:00Z',
            status: 'COMPLETED'
          },
          {
            id: 'order_test_003',
            orderNumber: 'ORD-2024-003',
            title: 'CRM Automatizado',
            client: { companyName: 'Ventas Pro Ltd' },
            createdAt: '2024-01-20T11:00:00Z',
            status: 'PENDING'
          }
        ];
      }

      return createdOrders;
    }

    async function loadStats() {
      try {
        stats = await window.documentsApi.getDocumentStats();
        console.log('✅ Estadísticas cargadas');
      } catch (error) {
        console.error('❌ Error cargando estadísticas:', error);
        stats = window.documentsApi.getMockDocumentStats();
        console.log('📝 Usando estadísticas simuladas');
      }
    }

    function renderStats() {
      // Actualizar estadísticas con datos reales o simulados
      const totalDocs = stats.overview?.totalDocuments || 0;
      const monthlyDocs = stats.overview?.documentsThisMonth || 0;
      const avgTime = stats.overview?.averageTimeToFinalize || 0;
      
      document.getElementById('totalDocuments').textContent = totalDocs;
      document.getElementById('documentsThisMonth').textContent = monthlyDocs;
      document.getElementById('averageTime').textContent = avgTime 
        ? `${Math.round(avgTime)} hrs` 
        : '0 hrs';
      document.getElementById('documentTypesCount').textContent = documentTypes.length;
    }

    function renderDocumentTypes() {
      const container = document.getElementById('documentTypesContainer');
      
      if (documentTypes.length === 0) {
        container.innerHTML = '<div class="col-span-full text-center text-gray-500 py-8">No hay tipos de documentos disponibles</div>';
        return;
      }

      // Agrupar documentos por fase
      const documentsByPhase = groupDocumentsByPhase(documentTypes);
      
      // Configuración de fases con descripciones
      const phaseDescriptions = {
        'Fase 1': 'Análisis inicial y diagnóstico del proyecto',
        'Fase 2': 'Documentación técnica y especificaciones',
        'Fase 3': 'Propuestas comerciales y cotizaciones',
        'Fase 4': 'Documentación para usuarios finales',
        'Fase 5': 'Pruebas, validación y entrega',
        'Fase 6': 'Reporte final y cierre del proyecto',
        'Fase 7': 'Soporte técnico y documentación de mantenimiento'
      };

      // Iconos específicos para cada fase
      const phaseIcons = {
        'Fase 1': 'tabler:search',
        'Fase 2': 'tabler:file-text',
        'Fase 3': 'tabler:currency-dollar',
        'Fase 4': 'tabler:users',
        'Fase 5': 'tabler:circle-check',
        'Fase 6': 'tabler:flag',
        'Fase 7': 'tabler:tool'
      };

      // Colores específicos para cada fase
      const phaseColors = {
        'Fase 1': { bg: 'bg-blue-50', border: 'border-blue-200', text: 'text-blue-600', hover: 'hover:bg-blue-100' },
        'Fase 2': { bg: 'bg-teal-50', border: 'border-teal-200', text: 'text-teal-600', hover: 'hover:bg-teal-100' },
        'Fase 3': { bg: 'bg-emerald-50', border: 'border-emerald-200', text: 'text-emerald-600', hover: 'hover:bg-emerald-100' },
        'Fase 4': { bg: 'bg-purple-50', border: 'border-purple-200', text: 'text-purple-600', hover: 'hover:bg-purple-100' },
        'Fase 5': { bg: 'bg-orange-50', border: 'border-orange-200', text: 'text-orange-600', hover: 'hover:bg-orange-100' },
        'Fase 6': { bg: 'bg-green-50', border: 'border-green-200', text: 'text-green-600', hover: 'hover:bg-green-100' },
        'Fase 7': { bg: 'bg-gray-50', border: 'border-gray-200', text: 'text-gray-600', hover: 'hover:bg-gray-100' }
      };

      let html = '';
      
      // Renderizar cada fase con sus documentos en formato desplegable
      Object.keys(documentsByPhase).sort().forEach((phase, index) => {
        const docs = documentsByPhase[phase];
        const description = phaseDescriptions[phase] || 'Documentos de esta fase del proyecto';
        const icon = phaseIcons[phase] || 'tabler:file';
        const colors = phaseColors[phase] || phaseColors['Fase 1'];
        
        html += `
          <div class="mb-4">
            <!-- Header desplegable de la fase -->
            <div class="collapsible-header ${colors.bg} ${colors.border} ${colors.hover} border-2 rounded-xl p-4 cursor-pointer transition-all duration-300 hover:shadow-md"
                 onclick="togglePhaseSection('${phase.replace(' ', '-')}')">
              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                  <!-- Icono de la fase -->
                  <div class="p-3 bg-white rounded-lg shadow-sm">
                    <svg class="w-6 h-6 ${colors.text}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      ${getPhaseIconPath(icon)}
                    </svg>
                  </div>
                  
                  <!-- Información de la fase -->
                  <div class="flex-1">
                    <div class="flex items-center space-x-3">
                      <h3 class="text-lg font-bold text-gray-900">${phase}</h3>
                      <span class="px-3 py-1 ${colors.bg} ${colors.text} rounded-full text-sm font-medium border ${colors.border}">
                        ${docs.length} documento${docs.length !== 1 ? 's' : ''}
                      </span>
                    </div>
                    <p class="text-sm text-gray-600 mt-1">${description}</p>
                  </div>
                </div>
                
                <!-- Indicador de estado y flecha -->
                <div class="flex items-center space-x-3">
                  <div class="text-right">
                    <div class="text-xs text-gray-500">Tiempo estimado</div>
                    <div class="text-sm font-medium ${colors.text}">
                      ${getTotalEstimatedTime(docs)}
                    </div>
                  </div>
                  
                  <!-- Flecha desplegable -->
                  <div class="phase-arrow transition-transform duration-300 ${colors.text}" data-phase="${phase.replace(' ', '-')}">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Contenido desplegable de los documentos -->
            <div class="phase-content hidden transition-all duration-500 ease-in-out overflow-hidden" 
                 id="phase-${phase.replace(' ', '-')}-content">
              <div class="mt-3 px-4">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                  ${docs.map(docType => `
                    <div class="group document-card ${colors.bg} border-2 ${colors.border} rounded-lg p-4 hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300 cursor-pointer">
                      <div class="flex items-center space-x-3 mb-3">
                        <div class="p-2 bg-white rounded-lg shadow-sm group-hover:shadow-md transition-shadow">
                          <svg class="w-6 h-6 ${colors.text}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                          </svg>
                        </div>
                        <div class="flex-1">
                          <h4 class="font-semibold text-gray-900 group-hover:${colors.text} transition-colors">${docType.name}</h4>
                          <span class="text-xs ${colors.text} font-medium opacity-75">${docType.phase}</span>
                        </div>
                      </div>
                      
                      <p class="text-sm text-gray-700 mb-3 leading-relaxed">${docType.description}</p>
                      
                      <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-2 text-xs ${colors.text}">
                          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                          </svg>
                          <span>${docType.estimatedTime}</span>
                        </div>
                        
                        <div class="flex items-center space-x-1">
                          <div class="w-2 h-2 ${colors.bg} rounded-full"></div>
                          <div class="w-2 h-2 ${colors.bg} rounded-full opacity-60"></div>
                          <div class="w-2 h-2 ${colors.bg} rounded-full opacity-30"></div>
                        </div>
                      </div>
                    </div>
                  `).join('')}
                </div>
              </div>
            </div>
          </div>
        `;
      });
      
      container.innerHTML = html;
    }

    // Función para alternar la visibilidad de las secciones de fase
    function togglePhaseSection(phaseId) {
      const content = document.getElementById(`phase-${phaseId}-content`);
      const arrow = document.querySelector(`.phase-arrow[data-phase="${phaseId}"]`);
      
      if (content.classList.contains('hidden')) {
        // Mostrar contenido
        content.classList.remove('hidden');
        setTimeout(() => {
          content.style.maxHeight = content.scrollHeight + 'px';
          content.style.opacity = '1';
        }, 10);
        
        // Rotar flecha
        arrow.style.transform = 'rotate(180deg)';
      } else {
        // Ocultar contenido
        content.style.maxHeight = '0';
        content.style.opacity = '0';
        
        setTimeout(() => {
          content.classList.add('hidden');
        }, 300);
        
        // Restaurar flecha
        arrow.style.transform = 'rotate(0deg)';
      }
    }

    // Función para obtener el path del icono SVG según el tipo
    function getPhaseIconPath(iconName) {
      const iconPaths = {
        'tabler:search': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>',
        'tabler:file-text': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>',
        'tabler:currency-dollar': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>',
        'tabler:users': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a4 4 0 11-8 0 4 4 0 018 0z"></path>',
        'tabler:circle-check': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>',
        'tabler:flag': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 21v-4m0 0V5a2 2 0 012-2h6.5l1 2h7a2 2 0 012 2v6a2 2 0 01-2 2H12l-1-2H5a2 2 0 00-2 2z"></path>',
        'tabler:tool': '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM7 3V1m0 18v2m8-10a4 4 0 00-4-4H9v4a4 4 0 004 4h2v-4z"></path>'
      };
      
      return iconPaths[iconName] || iconPaths['tabler:file-text'];
    }

    // Función para calcular el tiempo estimado total de una fase
    function getTotalEstimatedTime(docs) {
      if (!docs || docs.length === 0) return '0 días';
      
      let totalDays = 0;
      
      docs.forEach(doc => {
        const timeStr = doc.estimatedTime || '1 día';
        const match = timeStr.match(/(\d+)(-(\d+))?/);
        if (match) {
          const min = parseInt(match[1]);
          const max = match[3] ? parseInt(match[3]) : min;
          totalDays += (min + max) / 2;
        }
      });
      
      if (totalDays === 0) return '0 días';
      if (totalDays < 1) return '< 1 día';
      if (totalDays === 1) return '1 día';
      
      return Math.round(totalDays) + ' días';
    }

    // Función para expandir/contraer todas las fases
    function toggleAllPhases(expand = true) {
      const phases = ['Fase-1', 'Fase-2', 'Fase-3', 'Fase-4', 'Fase-5', 'Fase-6', 'Fase-7'];
      
      phases.forEach(phase => {
        const content = document.getElementById(`phase-${phase}-content`);
        const arrow = document.querySelector(`.phase-arrow[data-phase="${phase}"]`);
        
        if (!content) return;
        
        if (expand && content.classList.contains('hidden')) {
          content.classList.remove('hidden');
          setTimeout(() => {
            content.style.maxHeight = content.scrollHeight + 'px';
            content.style.opacity = '1';
          }, 10);
          
          if (arrow) arrow.style.transform = 'rotate(180deg)';
        } else if (!expand && !content.classList.contains('hidden')) {
          content.style.maxHeight = '0';
          content.style.opacity = '0';
          
          setTimeout(() => {
            content.classList.add('hidden');
          }, 300);
          
          if (arrow) arrow.style.transform = 'rotate(0deg)';
        }
      });
    }

    // Función para alternar la visibilidad de las secciones de fase en el modal
    function toggleModalPhaseSection(phaseId) {
      const content = document.getElementById(`modal-phase-${phaseId}-content`);
      const arrow = document.querySelector(`.modal-phase-arrow[data-phase="${phaseId}"]`);
      
      if (!content || !arrow) return;
      
      if (content.classList.contains('hidden')) {
        // Mostrar contenido
        content.classList.remove('hidden');
        setTimeout(() => {
          content.style.maxHeight = content.scrollHeight + 'px';
          content.style.opacity = '1';
        }, 10);
        
        // Rotar flecha
        arrow.style.transform = 'rotate(180deg)';
      } else {
        // Ocultar contenido
        content.style.maxHeight = '0';
        content.style.opacity = '0';
        
        setTimeout(() => {
          content.classList.add('hidden');
        }, 300);
        
        // Restaurar flecha
        arrow.style.transform = 'rotate(0deg)';
      }
    }

    // Función para expandir/contraer todas las fases en el modal
    function toggleAllModalPhases(expand = true) {
      const phases = ['Fase-1', 'Fase-2', 'Fase-3', 'Fase-4', 'Fase-5', 'Fase-6', 'Fase-7'];
      
      phases.forEach(phase => {
        const content = document.getElementById(`modal-phase-${phase}-content`);
        const arrow = document.querySelector(`.modal-phase-arrow[data-phase="${phase}"]`);
        
        if (!content) return;
        
        if (expand && content.classList.contains('hidden')) {
          content.classList.remove('hidden');
          setTimeout(() => {
            content.style.maxHeight = content.scrollHeight + 'px';
            content.style.opacity = '1';
          }, 10);
          
          if (arrow) arrow.style.transform = 'rotate(180deg)';
        } else if (!expand && !content.classList.contains('hidden')) {
          content.style.maxHeight = '0';
          content.style.opacity = '0';
          
          setTimeout(() => {
            content.classList.add('hidden');
          }, 300);
          
          if (arrow) arrow.style.transform = 'rotate(0deg)';
        }
      });
    }

    // Función para obtener el icono de una fase
    function getPhaseIcon(phase) {
      const phaseIcons = {
        'Fase 1': 'tabler:search',
        'Fase 2': 'tabler:file-text',
        'Fase 3': 'tabler:currency-dollar',
        'Fase 4': 'tabler:users',
        'Fase 5': 'tabler:circle-check',
        'Fase 6': 'tabler:flag',
        'Fase 7': 'tabler:tool'
      };
      return phaseIcons[phase] || 'tabler:file-text';
    }

    function renderOrdersTable() {
      const tbody = document.getElementById('ordersTableBody');
      
      if (orders.length === 0) {
        tbody.innerHTML = `
          <tr>
            <td colspan="6" class="text-center py-8 text-gray-500">
              <div class="flex flex-col items-center">
                <svg class="w-12 h-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <p class="text-lg font-medium">No hay órdenes disponibles</p>
                <p class="text-sm">Las órdenes aparecerán aquí cuando se creen</p>
              </div>
            </td>
          </tr>
        `;
        return;
      }

      tbody.innerHTML = orders.map(order => {
        // Buscar documentos por orderId
        const documentsForOrder = documents.filter(doc => {
          return doc.orderId === order.id || doc.order?.id === order.id;
        });
        
        // Agrupar documentos por fase
        const documentsByPhase = groupDocumentsByPhase(documentTypes);
        const createdDocsByPhase = {};
        
        // Contar documentos creados por fase CON DEBUGGING
        console.log(`\n🔍 === DEBUG TABLA ÓRDENES - ${order.orderNumber} ===`);
        console.log('📄 Documentos para esta orden:', documentsForOrder.length);
        console.log('📋 Tipos de documentos disponibles:', documentTypes.length);
        
        // Log de documentos encontrados
        documentsForOrder.forEach((doc, index) => {
          console.log(`📄 Documento ${index + 1}:`, {
            id: doc.id,
            title: doc.title,
            documentTypeId: doc.documentTypeId,
            status: doc.status,
            documentTypeName: doc.documentType?.name
          });
        });
        
        Object.keys(documentsByPhase).forEach(phase => {
          console.log(`\n🔍 Analizando ${phase} para progreso:`);
          const phaseDocTypes = documentsByPhase[phase];
          
          console.log(`📋 Tipos de documentos en ${phase}:`, phaseDocTypes.map(dt => ({
            id: dt.id,
            name: dt.name,
            slug: dt.slug
          })));
          
          const createdInPhase = documentsForOrder.filter(doc => {
            const typeMatch = phaseDocTypes.some(docType => docType.id === doc.documentTypeId);
            const statusMatch = ['FINALIZED', 'SENT', 'APPROVED'].includes(doc.status);
            
            if (typeMatch && statusMatch) {
              console.log(`✅ COMPLETADO: Documento "${doc.title}" (${doc.documentTypeId}) está completado en ${phase}`);
            } else if (typeMatch && !statusMatch) {
              console.log(`⚠️ CREADO PERO NO COMPLETADO: Documento "${doc.title}" (${doc.documentTypeId}) en ${phase} con status ${doc.status}`);
            }
            
            return typeMatch && statusMatch;
          });
          
          createdDocsByPhase[phase] = createdInPhase.length;
          console.log(`📊 Documentos completados en ${phase}:`, createdInPhase.length);
        });
        
        console.log('📈 Documentos completados por fase:', createdDocsByPhase);
        
        // Calcular progreso general basado en fases
        const totalPhases = Object.keys(documentsByPhase).length;
        const completedPhases = Object.values(createdDocsByPhase).filter(count => count > 0).length;
        const progress = totalPhases > 0 ? Math.round((completedPhases / totalPhases) * 100) : 0;
        
        // Determinar fase actual
        const currentPhase = getCurrentPhase(createdDocsByPhase);
        
        // Contar documentos completados totales
        const completedDocs = documentsForOrder.filter(doc => {
          return ['FINALIZED', 'SENT', 'APPROVED'].includes(doc.status);
        }).length;
        
        // Contar documentos totales posibles
        const totalPossibleDocs = documentTypes.length;

        console.log(`📊 Orden ${order.orderNumber}: ${documentsForOrder.length} docs totales, ${completedDocs} completados, ${progress}% progreso, Fase actual: ${currentPhase}`);

        return `
          <tr class="hover:bg-gray-50">
            <td class="py-4 px-6">
              <div>
                <div class="font-medium text-gray-900">${order.orderNumber || order.id}</div>
                <div class="text-sm text-gray-500">${formatDate(order.createdAt)}</div>
              </div>
            </td>
            <td class="py-4 px-6">
              <div>
                <div class="font-medium text-gray-900">${order.client?.companyName || 'Cliente no especificado'}</div>
                <div class="text-sm text-gray-500">${order.title || 'Sin título'}</div>
              </div>
            </td>
            <td class="py-4 px-6">
              <div class="flex flex-col">
                <span class="px-3 py-1 bg-${getOrderStatusColor(order.status)}-100 text-${getOrderStatusColor(order.status)}-800 rounded-full text-sm font-medium mb-1">
                  ${getOrderStatusLabel(order.status)}
                </span>
                <span class="text-xs text-gray-500">${currentPhase}</span>
              </div>
            </td>
            <td class="py-4 px-6">
              <div class="flex items-center space-x-3">
                <div class="flex-1 bg-gray-200 rounded-full h-2">
                  <div class="h-2 rounded-full ${getProgressColor(progress)} transition-all duration-300" style="width: ${progress}%"></div>
                </div>
                <span class="text-sm font-medium text-gray-900">${progress}%</span>
              </div>
              <div class="text-xs text-gray-500 mt-1">${completedPhases}/${totalPhases} fases completadas</div>
            </td>
            <td class="py-4 px-6">
              <div class="space-y-1">
                <div class="flex space-x-2">
                  <span class="px-2 py-1 bg-emerald-100 text-emerald-800 rounded text-xs font-medium">
                    ${completedDocs} creados
                  </span>
                  ${(totalPossibleDocs - completedDocs) > 0 ? `
                    <span class="px-2 py-1 bg-orange-100 text-orange-800 rounded text-xs font-medium">
                      ${totalPossibleDocs - completedDocs} pendientes
                    </span>
                  ` : `
                    <span class="px-2 py-1 bg-green-100 text-green-800 rounded text-xs font-medium">
                      ✓ Completo
                    </span>
                  `}
                </div>
                <div class="text-xs text-gray-500">
                  ${Object.entries(createdDocsByPhase).map(([phase, count]) => 
                    `${phase}: ${count}/${documentsByPhase[phase]?.length || 0}`
                  ).join(', ')}
                </div>
              </div>
            </td>
            <td class="py-4 px-6">
              <div class="flex space-x-2">
                <button class="ver-documentos bg-teal-100 text-teal-700 px-3 py-1 rounded-lg text-sm font-medium hover:bg-teal-200 transition-colors duration-200" 
                        onclick="mostrarDocumentosOrden('${order.id}')">
                  <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                  </svg>
                  Ver (${documentsForOrder.length})
                </button>
                ${(totalPossibleDocs - completedDocs) > 0 ? `
                  <button class="crear-faltantes bg-orange-100 text-orange-700 px-3 py-1 rounded-lg text-sm font-medium hover:bg-orange-200 transition-colors duration-200"
                          onclick="mostrarCrearDocumentos('${order.id}')">
                    <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    Crear
                  </button>
                ` : ''}
              </div>
            </td>
          </tr>
        `;
      }).join('');
    }

    // Función para determinar la fase actual basada en documentos creados
    function getCurrentPhase(createdDocsByPhase) {
      const phases = ['Fase 1', 'Fase 2', 'Fase 3', 'Fase 4', 'Fase 5', 'Fase 6', 'Fase 7'];
      
      for (let i = 0; i < phases.length; i++) {
        const phase = phases[i];
        if (createdDocsByPhase[phase] === 0) {
          return phase;
        }
      }
      
      return 'Completo';
    }

    async function refreshData() {
      console.log('🔄 Refrescando datos...');
      
      try {
        // Recargar documentos y stats
        const results = await Promise.allSettled([
          loadDocuments(),
          loadStats()
        ]);
        
        // Log de resultados
        results.forEach((result, index) => {
          const operations = ['documentos', 'estadísticas'];
          if (result.status === 'rejected') {
            console.warn(`⚠️ Error recargando ${operations[index]}:`, result.reason);
          } else {
            console.log(`✅ ${operations[index]} recargadas exitosamente`);
          }
        });
        
        // Actualizar interfaz
        console.log('🎨 Actualizando interfaz...');
        renderStats();
        renderOrdersTable();
        
        console.log('✅ Datos refrescados completamente');
        console.log(`📊 Total documentos en memoria: ${documents.length}`);
        console.log(`📋 Total órdenes en memoria: ${orders.length}`);
        
      } catch (error) {
        console.error('❌ Error refrescando datos:', error);
      }
    }

    // Funciones del modal selector de orden
    function mostrarSelectorOrden() {
      const modal = document.getElementById('modalSelectorOrden');
      const contenido = document.getElementById('contenidoModalSelector');
      
      if (orders.length === 0) {
        contenido.innerHTML = `
          <div class="text-center py-8 text-gray-500">
            <svg class="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            <p class="text-lg font-medium">No hay órdenes disponibles</p>
            <p class="text-sm">Primero necesitas crear una orden para poder generar documentos</p>
            <a href="/portal/ordenes" class="mt-4 inline-block px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700">
              Ir a Órdenes
            </a>
          </div>
        `;
      } else {
        contenido.innerHTML = `
          <div class="mb-6">
            <label class="block text-sm font-medium text-gray-700 mb-2">Selecciona una orden para crear documentos:</label>
            <div class="space-y-2 max-h-96 overflow-y-auto">
              ${orders.map(order => {
                const documentsForOrder = documents.filter(doc => doc.orderId === order.id);
                const completedDocs = documentsForOrder.filter(doc => ['FINALIZED', 'SENT', 'APPROVED'].includes(doc.status));
                const pendingDocs = documentTypes.length - completedDocs.length;
                
                return `
                  <div class="border rounded-lg p-4 hover:bg-gray-50 cursor-pointer transition-colors" 
                       onclick="seleccionarOrden('${order.id}')">
                    <div class="flex items-center justify-between">
                      <div>
                        <h4 class="font-medium text-gray-900">${order.orderNumber || order.id}</h4>
                        <p class="text-sm text-gray-600">${order.client?.companyName || 'Cliente no especificado'}</p>
                        <p class="text-xs text-gray-500">${order.title || 'Sin título'}</p>
                      </div>
                      <div class="text-right">
                        <span class="px-2 py-1 bg-${getOrderStatusColor(order.status)}-100 text-${getOrderStatusColor(order.status)}-800 rounded text-xs font-medium">
                          ${getOrderStatusLabel(order.status)}
                        </span>
                        ${pendingDocs > 0 ? `
                          <p class="text-xs text-orange-600 mt-1">
                            ${pendingDocs} documentos pendientes
                          </p>
                        ` : `
                          <p class="text-xs text-green-600 mt-1">
                            Todos los documentos creados
                          </p>
                        `}
                      </div>
                    </div>
                  </div>
                `;
              }).join('')}
            </div>
          </div>
        `;
      }
      
      modal.classList.remove('hidden');
    }

    function seleccionarOrden(orderId) {
      selectedOrder = orders.find(order => order.id === orderId);
      document.getElementById('modalSelectorOrden').classList.add('hidden');
      mostrarTiposDocumentos();
    }

    function mostrarTiposDocumentos() {
      if (!selectedOrder) return;
      
      const modal = document.getElementById('modalCrearDocumentos');
      const contenido = document.getElementById('contenidoModalCrear');
      
      // Obtener documentos para la orden seleccionada CON DEBUGGING
      console.log(`\n🔍 === DEBUG MODAL CREAR DOCUMENTOS - ${selectedOrder.orderNumber} ===`);
      console.log('📄 Documentos totales en memoria:', documents.length);
      console.log('🔍 Filtrando documentos para orden:', selectedOrder.id);
      
      const documentsForOrder = documents.filter(doc => doc.orderId === selectedOrder.id);
      console.log('📋 Documentos encontrados para la orden:', documentsForOrder.length);
      
      // Log de documentos encontrados
      documentsForOrder.forEach((doc, index) => {
        console.log(`📄 Documento ${index + 1}:`, {
          id: doc.id,
          title: doc.title,
          documentTypeId: doc.documentTypeId,
          status: doc.status,
          documentTypeName: doc.documentType?.name
        });
      });
      
      const completedDocuments = documentsForOrder.filter(doc => ['FINALIZED', 'SENT', 'APPROVED'].includes(doc.status));
      console.log('✅ Documentos completados:', completedDocuments.length);
      
      const completedTypeIds = completedDocuments.map(doc => doc.documentTypeId);
      console.log('🏷️ IDs de tipos completados:', completedTypeIds);
      
      // Agrupar todos los tipos de documentos por fase
      const allDocumentsByPhase = groupDocumentsByPhase(documentTypes);
      console.log('📊 Documentos agrupados por fase:', Object.keys(allDocumentsByPhase));
      
      // Calcular progreso por fase CON DEBUGGING
      const phaseProgress = {};
      Object.keys(allDocumentsByPhase).forEach(phase => {
        console.log(`\n🔍 Analizando progreso de ${phase}:`);
        const phaseDocTypes = allDocumentsByPhase[phase];
        
        console.log(`📋 Tipos de documentos en ${phase}:`, phaseDocTypes.map(dt => ({
          id: dt.id,
          name: dt.name,
          slug: dt.slug
        })));
        
        const completedInPhase = phaseDocTypes.filter(docType => {
          const isCompleted = completedTypeIds.includes(docType.id);
          if (isCompleted) {
            console.log(`✅ Tipo completado en ${phase}: ${docType.name} (${docType.id})`);
          } else {
            console.log(`⚠️ Tipo pendiente en ${phase}: ${docType.name} (${docType.id})`);
          }
          return isCompleted;
        }).length;
        
        const totalInPhase = phaseDocTypes.length;
        phaseProgress[phase] = {
          completed: completedInPhase,
          total: totalInPhase,
          percentage: totalInPhase > 0 ? Math.round((completedInPhase / totalInPhase) * 100) : 0
        };
        
        console.log(`📈 Progreso de ${phase}:`, phaseProgress[phase]);
      });
      
      console.log('🔍 === FIN DEBUG MODAL CREAR DOCUMENTOS ===');
      
      // Configuración de fases con descripciones
      const phaseDescriptions = {
        'Fase 1': 'Análisis inicial y diagnóstico del proyecto',
        'Fase 2': 'Documentación técnica y especificaciones',
        'Fase 3': 'Propuestas comerciales y cotizaciones',
        'Fase 4': 'Documentación para usuarios finales',
        'Fase 5': 'Pruebas, validación y entrega',
        'Fase 6': 'Reporte final y cierre del proyecto',
        'Fase 7': 'Soporte técnico y documentación de mantenimiento'
      };

      // Colores específicos para cada fase
      const phaseColors = {
        'Fase 1': { bg: 'bg-blue-50', border: 'border-blue-200', text: 'text-blue-600', hover: 'hover:bg-blue-100', progress: 'bg-blue-500' },
        'Fase 2': { bg: 'bg-teal-50', border: 'border-teal-200', text: 'text-teal-600', hover: 'hover:bg-teal-100', progress: 'bg-teal-500' },
        'Fase 3': { bg: 'bg-emerald-50', border: 'border-emerald-200', text: 'text-emerald-600', hover: 'hover:bg-emerald-100', progress: 'bg-emerald-500' },
        'Fase 4': { bg: 'bg-purple-50', border: 'border-purple-200', text: 'text-purple-600', hover: 'hover:bg-purple-100', progress: 'bg-purple-500' },
        'Fase 5': { bg: 'bg-orange-50', border: 'border-orange-200', text: 'text-orange-600', hover: 'hover:bg-orange-100', progress: 'bg-orange-500' },
        'Fase 6': { bg: 'bg-green-50', border: 'border-green-200', text: 'text-green-600', hover: 'hover:bg-green-100', progress: 'bg-green-500' },
        'Fase 7': { bg: 'bg-gray-50', border: 'border-gray-200', text: 'text-gray-600', hover: 'hover:bg-gray-100', progress: 'bg-gray-500' }
      };

      contenido.innerHTML = `
        <div class="mb-6">
          <div class="bg-teal-50 border border-teal-200 rounded-lg p-4 mb-6">
            <h4 class="font-medium text-teal-900 mb-2">Orden seleccionada:</h4>
            <p class="text-teal-700">${selectedOrder.orderNumber} - ${selectedOrder.title}</p>
            <p class="text-sm text-teal-600">${selectedOrder.client?.companyName}</p>
            <div class="mt-3 bg-white rounded-lg p-3">
              <div class="flex items-center justify-between text-sm">
                <span class="text-gray-600">Progreso general:</span>
                <span class="font-medium text-teal-700">${completedDocuments.length}/${documentTypes.length} documentos</span>
              </div>
              <div class="mt-2 bg-gray-200 rounded-full h-2">
                <div class="bg-teal-500 h-2 rounded-full transition-all duration-300" style="width: ${Math.round((completedDocuments.length / documentTypes.length) * 100)}%"></div>
              </div>
            </div>
          </div>
          
          <div class="flex items-center justify-between mb-4">
            <h4 class="font-medium text-gray-900">Documentos por fase:</h4>
            <div class="flex items-center space-x-2">
              <button 
                onclick="toggleAllModalPhases(true)"
                class="text-xs px-3 py-1 bg-teal-100 text-teal-700 rounded-lg hover:bg-teal-200 transition-colors"
              >
                Expandir Todo
              </button>
              <button 
                onclick="toggleAllModalPhases(false)"
                class="text-xs px-3 py-1 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
              >
                Contraer Todo
              </button>
            </div>
          </div>
          
          <div class="space-y-4">
            ${Object.keys(allDocumentsByPhase).sort().map(phase => {
              const docs = allDocumentsByPhase[phase];
              const description = phaseDescriptions[phase] || 'Documentos de esta fase del proyecto';
              const colors = phaseColors[phase] || phaseColors['Fase 1'];
              const progress = phaseProgress[phase];
              
              return `
                <div class="mb-4">
                  <!-- Header desplegable de la fase con barra de progreso -->
                  <div class="modal-collapsible-header ${colors.bg} ${colors.border} ${colors.hover} border-2 rounded-lg p-4 cursor-pointer transition-all duration-300 hover:shadow-md"
                       onclick="toggleModalPhaseSection('${phase.replace(' ', '-')}')">
                    <div class="flex items-center justify-between">
                      <div class="flex items-center space-x-4">
                        <!-- Barra de progreso a la izquierda -->
                        <div class="flex flex-col items-center">
                          <div class="w-12 h-12 ${colors.bg} border-2 ${colors.border} rounded-full flex items-center justify-center relative">
                            <div class="absolute inset-0 rounded-full">
                              <svg class="w-full h-full transform -rotate-90" viewBox="0 0 36 36">
                                <circle cx="18" cy="18" r="16" fill="none" stroke="currentColor" stroke-width="2" stroke-dasharray="100" stroke-dashoffset="100" class="text-gray-200"></circle>
                                <circle cx="18" cy="18" r="16" fill="none" stroke="currentColor" stroke-width="2" stroke-dasharray="100" stroke-dashoffset="${100 - progress.percentage}" class="${colors.text} transition-all duration-500"></circle>
                              </svg>
                            </div>
                            <span class="text-xs font-bold ${colors.text} z-10">${progress.percentage}%</span>
                          </div>
                          <div class="text-xs ${colors.text} mt-1 font-medium">${progress.completed}/${progress.total}</div>
                        </div>
                        
                        <div class="p-3 bg-white rounded-lg shadow-sm">
                          <svg class="w-6 h-6 ${colors.text}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            ${getPhaseIconPath(getPhaseIcon(phase))}
                          </svg>
                        </div>
                        
                        <div class="flex-1">
                          <div class="flex items-center space-x-3">
                            <h5 class="text-lg font-bold text-gray-900">${phase}</h5>
                            <div class="flex space-x-2">
                              <span class="px-2 py-1 bg-emerald-100 text-emerald-800 rounded-full text-xs font-medium">
                                ${progress.completed} completados
                              </span>
                              ${(progress.total - progress.completed) > 0 ? `
                                <span class="px-2 py-1 bg-orange-100 text-orange-800 rounded-full text-xs font-medium">
                                  ${progress.total - progress.completed} pendientes
                                </span>
                              ` : ''}
                            </div>
                          </div>
                          <p class="text-sm text-gray-600 mt-1">${description}</p>
                        </div>
                      </div>
                      
                      <div class="modal-phase-arrow transition-transform duration-300 ${colors.text}" data-phase="${phase.replace(' ', '-')}">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                        </svg>
                      </div>
                    </div>
                  </div>
                  
                  <!-- Contenido desplegable de los documentos -->
                  <div class="modal-phase-content hidden transition-all duration-500 ease-in-out overflow-hidden" 
                       id="modal-phase-${phase.replace(' ', '-')}-content">
                    <div class="mt-3 px-4">
                      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        ${docs.map(docType => {
                          const isCompleted = completedTypeIds.includes(docType.id);
                          const baseClasses = isCompleted ? 
                            'bg-gray-100 border-gray-300 opacity-60 cursor-not-allowed' : 
                            `${colors.bg} border-2 ${colors.border} hover:shadow-lg transform hover:-translate-y-1 cursor-pointer`;
                          
                          return `
                            <div class="group document-card ${baseClasses} rounded-lg p-4 transition-all duration-300 relative ${isCompleted ? '' : 'hover:shadow-lg'}"
                                 ${isCompleted ? '' : `onclick="seleccionarTipoDocumento('${docType.id}')"`}>
                              
                              ${isCompleted ? `
                                <div class="absolute top-2 right-2 bg-green-500 text-white rounded-full p-1">
                                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                  </svg>
                                </div>
                              ` : ''}
                              
                              <div class="flex items-center space-x-3 mb-3">
                                <div class="p-2 ${isCompleted ? 'bg-gray-200' : 'bg-white'} rounded-lg shadow-sm ${isCompleted ? '' : 'group-hover:shadow-md'} transition-shadow">
                                  <svg class="w-6 h-6 ${isCompleted ? 'text-gray-400' : colors.text}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                  </svg>
                                </div>
                                <div class="flex-1">
                                  <h5 class="font-semibold ${isCompleted ? 'text-gray-500' : 'text-gray-900'} ${isCompleted ? '' : `group-hover:${colors.text}`} transition-colors">${docType.name}</h5>
                                  <span class="text-xs ${isCompleted ? 'text-gray-400' : colors.text} font-medium opacity-75">${docType.phase}</span>
                                </div>
                              </div>
                              
                              <p class="text-sm ${isCompleted ? 'text-gray-500' : 'text-gray-700'} mb-3 leading-relaxed">${docType.description}</p>
                              
                              <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-2 text-xs ${isCompleted ? 'text-gray-400' : colors.text}">
                                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                  </svg>
                                  <span>${docType.estimatedTime}</span>
                                </div>
                                
                                ${isCompleted ? `
                                  <div class="flex items-center space-x-1 text-xs text-green-600">
                                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                    </svg>
                                    <span>Completado</span>
                                  </div>
                                ` : `
                                  <div class="flex items-center space-x-1">
                                    <div class="w-2 h-2 ${colors.bg} rounded-full"></div>
                                    <div class="w-2 h-2 ${colors.bg} rounded-full opacity-60"></div>
                                    <div class="w-2 h-2 ${colors.bg} rounded-full opacity-30"></div>
                                  </div>
                                `}
                              </div>
                            </div>
                          `;
                        }).join('')}
                      </div>
                    </div>
                  </div>
                </div>
              `;
            }).join('')}
          </div>
        </div>
      `;
      
      modal.classList.remove('hidden');
    }

    function seleccionarTipoDocumento(documentTypeId) {
      selectedDocumentType = documentTypes.find(type => type.id === documentTypeId);
      mostrarFormularioDocumento();
    }

    function mostrarFormularioDocumento() {
      if (!selectedOrder || !selectedDocumentType) return;
      
      const contenido = document.getElementById('contenidoModalCrear');
      
      // Crear el contenedor para el formulario React
      contenido.innerHTML = `
        <div class="mb-6">
          <div class="bg-teal-50 border border-teal-200 rounded-lg p-4 mb-6">
            <div class="flex items-center justify-between">
              <div>
                <h4 class="font-medium text-teal-900 mb-1">Crear Documento:</h4>
                <p class="text-teal-700">${selectedDocumentType.name}</p>
                <p class="text-sm text-teal-600">Para: ${selectedOrder.orderNumber} - ${selectedOrder.title}</p>
              </div>
              <button onclick="mostrarTiposDocumentos()" class="text-teal-600 hover:text-teal-800">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <div id="dynamicFormContainer"></div>
        </div>
      `;
      
      // Renderizar el formulario React
      renderDynamicForm();
    }

    function renderDynamicForm() {
      const container = document.getElementById('dynamicFormContainer');
      if (!container) return;
      
      // Importar React dinámicamente si no está disponible
      if (typeof React === 'undefined') {
        const script = document.createElement('script');
        script.src = 'https://unpkg.com/react@18/umd/react.development.js';
        script.onload = () => {
          const reactDomScript = document.createElement('script');
          reactDomScript.src = 'https://unpkg.com/react-dom@18/umd/react-dom.development.js';
          reactDomScript.onload = () => createReactForm();
          document.head.appendChild(reactDomScript);
        };
        document.head.appendChild(script);
      } else {
        createReactForm();
      }
    }

    function createReactForm() {
      // Crear el formulario dinámico manualmente si React no está disponible
      mostrarFormularioEstatico();
    }

    async function mostrarFormularioEstatico() {
      const container = document.getElementById('dynamicFormContainer');
      if (!container || !selectedDocumentType || !selectedOrder) return;
      
      try {
        // Obtener la definición del formulario del backend
        const formDefinition = await window.documentsApi.getDocumentFormDefinition(
          selectedDocumentType.id,
          selectedOrder.id
        );
        
        // Crear el formulario HTML
        const formHTML = `
          <form id="documentForm" class="space-y-6">
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  Título del Documento
                  <span class="text-red-500 ml-1">*</span>
                </label>
                <input 
                  type="text" 
                  id="title" 
                  name="title" 
                  value="${formDefinition.defaultValues.title || ''}"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="Título del documento"
                  required
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  Descripción
                </label>
                <textarea 
                  id="description" 
                  name="description" 
                  rows="3"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="Descripción del documento"
                >${selectedDocumentType.description}</textarea>
              </div>
              
              ${renderFormFields(formDefinition.formFields)}
            </div>
            
            <div class="flex justify-end space-x-3 pt-6 border-t">
              <button 
                type="button" 
                onclick="mostrarTiposDocumentos()" 
                class="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
              >
                Cancelar
              </button>
              <button 
                type="submit" 
                class="px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 transition-colors"
              >
                Crear Documento
              </button>
            </div>
          </form>
        `;
        
        container.innerHTML = formHTML;
        
        // Agregar event listener al formulario
        const form = document.getElementById('documentForm');
        if (form) {
          form.addEventListener('submit', handleDocumentFormSubmit);
        }
        
        // Renderizar componentes React dinámicamente
        renderReactComponents();
      } catch (error) {
        console.error('Error cargando formulario:', error);
        container.innerHTML = `
          <div class="text-center py-8 text-red-500">
            <p>Error cargando el formulario</p>
            <button onclick="mostrarTiposDocumentos()" class="mt-4 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200">
              Volver
            </button>
          </div>
        `;
      }
    }

    function renderFormFields(fields) {
      if (!fields || fields.length === 0) {
        console.log('⚠️ No hay campos para renderizar');
        return '';
      }
      
      console.log('🔧 Renderizando campos de formulario:', fields.length);
      console.log('📋 Tipos de campos:', fields.map(f => ({ name: f.name, type: f.type })));
      
      return fields.map(field => {
        switch (field.type) {
          case 'text':
            return `
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  ${field.label}
                  ${field.required ? '<span class="text-red-500 ml-1">*</span>' : ''}
                </label>
                <input 
                  type="text" 
                  id="${field.name}" 
                  name="${field.name}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="${field.placeholder || ''}"
                  ${field.required ? 'required' : ''}
                />
              </div>
            `;
            
          case 'textarea':
            return `
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  ${field.label}
                  ${field.required ? '<span class="text-red-500 ml-1">*</span>' : ''}
                </label>
                <textarea 
                  id="${field.name}" 
                  name="${field.name}" 
                  rows="4"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="${field.placeholder || ''}"
                  ${field.required ? 'required' : ''}
                ></textarea>
              </div>
            `;
            
          case 'number':
            return `
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  ${field.label}
                  ${field.required ? '<span class="text-red-500 ml-1">*</span>' : ''}
                </label>
                <input 
                  type="number" 
                  id="${field.name}" 
                  name="${field.name}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  placeholder="${field.placeholder || ''}"
                  ${field.required ? 'required' : ''}
                />
              </div>
            `;
            
          case 'select':
            return `
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  ${field.label}
                  ${field.required ? '<span class="text-red-500 ml-1">*</span>' : ''}
                </label>
                <select 
                  id="${field.name}" 
                  name="${field.name}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  ${field.required ? 'required' : ''}
                >
                  <option value="">Selecciona una opción</option>
                  ${field.options?.map(option => `
                    <option value="${option.value}">${option.label}</option>
                  `).join('') || ''}
                </select>
              </div>
            `;
            
          case 'date':
            return `
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  ${field.label}
                  ${field.required ? '<span class="text-red-500 ml-1">*</span>' : ''}
                </label>
                <input 
                  type="date" 
                  id="${field.name}" 
                  name="${field.name}" 
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-teal-500"
                  ${field.required ? 'required' : ''}
                />
              </div>
            `;
            
          case 'attachment':
            return `
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  ${field.label}
                  ${field.required ? '<span class="text-red-500 ml-1">*</span>' : ''}
                </label>
                ${field.description ? `<p class="text-sm text-gray-600 mb-3">${field.description}</p>` : ''}
                <div id="${field.name}-container" class="attachment-field" 
                     data-field-name="${field.name}"
                     data-config='${JSON.stringify(field.attachmentConfig || {})}'></div>
                <input type="hidden" id="${field.name}" name="${field.name}" value="" />
              </div>
            `;
            
          case 'roi_calculator':
            console.log('🧮 Procesando campo ROI calculator:', field.name);
            return `
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  ${field.label}
                  ${field.required ? '<span class="text-red-500 ml-1">*</span>' : ''}
                </label>
                ${field.description ? `<p class="text-sm text-gray-600 mb-3">${field.description}</p>` : ''}
                <div id="${field.name}-container" class="roi-calculator-field" 
                     data-field-name="${field.name}"></div>
                <input type="hidden" id="${field.name}" name="${field.name}" value="" />
              </div>
            `;
            
          case 'aim_quote_calculator':
            console.log('💰 Procesando campo AIM Quote Calculator:', field.name);
            return `
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  ${field.label}
                  ${field.required ? '<span class="text-red-500 ml-1">*</span>' : ''}
                </label>
                ${field.description ? `<p class="text-sm text-gray-600 mb-3">${field.description}</p>` : ''}
                <div id="${field.name}-container" class="aim-quote-calculator-field" 
                     data-field-name="${field.name}"
                     data-config='${JSON.stringify(field.quoteConfig || {})}'></div>
                <input type="hidden" id="${field.name}" name="${field.name}" value="" />
              </div>
            `;
            
          default:
            return '';
        }
      }).join('');
    }

    // Renderizar componentes React dinámicamente
    function renderReactComponents() {
      if (!window.React || !window.ReactDOM) {
        console.warn('React no está disponible, saltando renderizado de componentes');
        return;
      }

      console.log('🔧 Renderizando componentes React...');
      
      // Renderizar campos de attachment
      const attachmentFields = document.querySelectorAll('.attachment-field');
      console.log('📁 Campos de attachment encontrados:', attachmentFields.length);
      
      attachmentFields.forEach(container => {
        const fieldName = container.getAttribute('data-field-name');
        const config = JSON.parse(container.getAttribute('data-config') || '{}');
        
        // Crear elemento FileUpload
        const FileUpload = window.React.createElement('div', {
          className: 'file-upload-component',
          style: { border: '2px dashed #e5e7eb', padding: '20px', borderRadius: '8px', textAlign: 'center' }
        }, [
          window.React.createElement('div', { key: 'icon', style: { fontSize: '48px', marginBottom: '10px' } }, '📁'),
          window.React.createElement('div', { key: 'text', style: { fontSize: '16px', color: '#374151', marginBottom: '10px' } }, 'Arrastra archivos aquí o haz clic para seleccionar'),
          window.React.createElement('div', { key: 'info', style: { fontSize: '14px', color: '#6b7280' } }, 
            `Tipos: ${config.allowedTypes?.join(', ') || 'pdf, image, document'} | Máximo: ${config.maxSize ? Math.round(config.maxSize/1024/1024) + 'MB' : '10MB'} | Límite: ${config.maxCount || 5} archivos`
          ),
          window.React.createElement('input', {
            key: 'file-input',
            type: 'file',
            multiple: true,
            accept: getAcceptTypes(config.allowedTypes || ['pdf', 'image', 'document']),
            style: { display: 'none' },
            ref: (input) => {
              if (input) {
                container.onclick = () => input.click();
                input.onchange = (e) => handleFileUpload(e, fieldName, config);
              }
            }
          })
        ]);
        
        window.ReactDOM.render(FileUpload, container);
      });

      // Renderizar calculadora ROI
      const roiFields = document.querySelectorAll('.roi-calculator-field');
      console.log('🧮 Campos ROI encontrados:', roiFields.length);
      
      roiFields.forEach(container => {
        const fieldName = container.getAttribute('data-field-name');
        console.log(`🧮 Renderizando componente ROI para campo: ${fieldName}`);
        
        // Crear el componente ROI Calculator embebido
        const ROICalculatorEmbedded = window.React.createElement('div', {
          className: 'roi-calculator-embedded bg-white border border-gray-300 rounded-lg p-6',
          style: { minHeight: '600px' }
        }, [
          // Header
          window.React.createElement('div', { key: 'header', className: 'mb-6' }, [
            window.React.createElement('h3', { className: 'text-xl font-bold text-gray-900 mb-2' }, 'Calculadora ROI Avanzada'),
            window.React.createElement('p', { className: 'text-sm text-gray-600' }, 'Calcula el retorno de inversión con gestión de empleados y configuración de agentes')
          ]),
          
          // Tabs
          window.React.createElement('div', { key: 'tabs', className: 'mb-6' }, [
            window.React.createElement('div', { className: 'flex space-x-1 bg-gray-100 p-1 rounded-lg' }, [
              window.React.createElement('button', {
                className: 'flex-1 px-4 py-2 text-sm font-medium text-teal-600 bg-white rounded-md shadow-sm',
                onClick: () => showROITab(fieldName, 'employees')
              }, 'Empleados'),
              window.React.createElement('button', {
                className: 'flex-1 px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700',
                onClick: () => showROITab(fieldName, 'agents')
              }, 'Agentes'),
              window.React.createElement('button', {
                className: 'flex-1 px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700',
                onClick: () => showROITab(fieldName, 'results')
              }, 'Resultados')
            ])
          ]),
          
          // Tab content
          window.React.createElement('div', { key: 'tab-content', id: `${fieldName}-tab-content` }, [
            // Employees tab
            window.React.createElement('div', { 
              key: 'employees-tab',
              id: `${fieldName}-employees-tab`,
              className: 'block'
            }, [
              window.React.createElement('div', { className: 'mb-4' }, [
                window.React.createElement('h4', { className: 'text-lg font-semibold mb-2' }, 'Gestión de Empleados'),
                window.React.createElement('p', { className: 'text-sm text-gray-600' }, 'Agrega empleados y define cómo la automatización afectará su trabajo')
              ]),
              
              // Add employee form
              window.React.createElement('div', { className: 'bg-gray-50 p-4 rounded-lg mb-4' }, [
                window.React.createElement('h5', { className: 'font-medium mb-3' }, 'Agregar Empleado'),
                window.React.createElement('div', { className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' }, [
                  window.React.createElement('div', {}, [
                    window.React.createElement('label', { className: 'block text-sm font-medium mb-1' }, 'Nombre'),
                    window.React.createElement('input', {
                      type: 'text',
                      id: `${fieldName}-emp-name`,
                      className: 'w-full px-3 py-2 border rounded-lg text-sm',
                      placeholder: 'Nombre del empleado'
                    })
                  ]),
                  window.React.createElement('div', {}, [
                    window.React.createElement('label', { className: 'block text-sm font-medium mb-1' }, 'Puesto'),
                    window.React.createElement('input', {
                      type: 'text',
                      id: `${fieldName}-emp-position`,
                      className: 'w-full px-3 py-2 border rounded-lg text-sm',
                      placeholder: 'Puesto de trabajo'
                    })
                  ]),
                  window.React.createElement('div', {}, [
                    window.React.createElement('label', { className: 'block text-sm font-medium mb-1' }, 'Salario Mensual'),
                    window.React.createElement('input', {
                      type: 'number',
                      id: `${fieldName}-emp-salary`,
                      className: 'w-full px-3 py-2 border rounded-lg text-sm',
                      placeholder: '0'
                    })
                  ]),
                  window.React.createElement('div', {}, [
                    window.React.createElement('label', { className: 'block text-sm font-medium mb-1' }, 'Horas/Mes'),
                    window.React.createElement('input', {
                      type: 'number',
                      id: `${fieldName}-emp-hours`,
                      className: 'w-full px-3 py-2 border rounded-lg text-sm',
                      placeholder: '160',
                      defaultValue: '160'
                    })
                  ]),
                  window.React.createElement('div', {}, [
                    window.React.createElement('label', { className: 'block text-sm font-medium mb-1' }, '% Afectado'),
                    window.React.createElement('input', {
                      type: 'number',
                      id: `${fieldName}-emp-percentage`,
                      className: 'w-full px-3 py-2 border rounded-lg text-sm',
                      placeholder: '50',
                      min: '0',
                      max: '100'
                    })
                  ]),
                  window.React.createElement('div', { className: 'flex items-end' }, [
                    window.React.createElement('button', {
                      type: 'button',
                      className: 'w-full px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 text-sm font-medium',
                      onClick: () => addEmployee(fieldName)
                    }, 'Agregar Empleado')
                  ])
                ])
              ]),
              
              // Employees list
              window.React.createElement('div', { 
                id: `${fieldName}-employees-list`,
                className: 'space-y-3'
              }, [
                window.React.createElement('div', { className: 'text-center text-gray-500 py-8' }, 'No hay empleados agregados. Agrega empleados para calcular el ROI.')
              ])
            ]),
            
            // Agents tab (hidden initially)
            window.React.createElement('div', { 
              key: 'agents-tab',
              id: `${fieldName}-agents-tab`,
              className: 'hidden'
            }, [
              window.React.createElement('div', { className: 'mb-4' }, [
                window.React.createElement('h4', { className: 'text-lg font-semibold mb-2' }, 'Configuración de Agentes'),
                window.React.createElement('p', { className: 'text-sm text-gray-600' }, 'Selecciona los agentes de automatización que se implementarán')
              ]),
              
              // Pre-configured agents
              window.React.createElement('div', { 
                id: `${fieldName}-agents-container`,
                className: 'space-y-4' 
              }, [
                window.React.createElement('div', { className: 'text-center text-gray-500 py-8' }, 'Cargando agentes...')
              ])
            ]),
            
            // Results tab (hidden initially)
            window.React.createElement('div', { 
              key: 'results-tab',
              id: `${fieldName}-results-tab`,
              className: 'hidden'
            }, [
              window.React.createElement('div', { className: 'mb-4' }, [
                window.React.createElement('h4', { className: 'text-lg font-semibold mb-2' }, 'Resultados del ROI'),
                window.React.createElement('p', { className: 'text-sm text-gray-600' }, 'Resumen de cálculos y métricas de retorno de inversión')
              ]),
              
              // ROI Results
              window.React.createElement('div', { 
                id: `${fieldName}-roi-results`,
                className: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'
              }, [
                window.React.createElement('div', { className: 'bg-teal-50 p-4 rounded-lg text-center' }, [
                  window.React.createElement('div', { className: 'text-2xl font-bold text-teal-600' }, '0%'),
                  window.React.createElement('div', { className: 'text-sm text-teal-800' }, 'ROI Anual')
                ]),
                window.React.createElement('div', { className: 'bg-emerald-50 p-4 rounded-lg text-center' }, [
                  window.React.createElement('div', { className: 'text-2xl font-bold text-emerald-600' }, '0'),
                  window.React.createElement('div', { className: 'text-sm text-emerald-800' }, 'Meses de Recuperación')
                ]),
                window.React.createElement('div', { className: 'bg-blue-50 p-4 rounded-lg text-center' }, [
                  window.React.createElement('div', { className: 'text-2xl font-bold text-blue-600' }, '$0'),
                  window.React.createElement('div', { className: 'text-sm text-blue-800' }, 'Ahorro Anual')
                ])
              ])
            ])
          ])
        ]);
        
        window.ReactDOM.render(ROICalculatorEmbedded, container);
      });

            // Renderizar cotizador AIM
      const aimQuoteFields = document.querySelectorAll('.aim-quote-calculator-field');
      console.log('💰 Campos AIM Quote encontrados:', aimQuoteFields.length);
      
      aimQuoteFields.forEach(container => {
        const fieldName = container.getAttribute('data-field-name');
        const config = JSON.parse(container.getAttribute('data-config') || '{}');
        console.log(`💰 Renderizando cotizador AIM para campo: ${fieldName}`, config);
        
        // Crear cotizador AIM embebido simplificado
        renderAIMQuoteCalculator(container, fieldName, config);
      });
    }

    // Función para renderizar el cotizador AIM embebido
    function renderAIMQuoteCalculator(container, fieldName, config) {
      console.log(`💰 Creando cotizador AIM para ${fieldName}`);
      
      // Crear estructura HTML del cotizador
      const quoteCalculatorHTML = `
        <div class="aim-quote-calculator bg-white border border-gray-300 rounded-lg overflow-hidden" style="min-height: 600px;">
          <!-- Header -->
          <div class="bg-gradient-to-r from-teal-500 to-emerald-500 text-white p-6">
            <h3 class="text-xl font-bold mb-2">Cotizador AIM Dinámico</h3>
            <p class="text-teal-100">Configura agentes, planes y servicios para generar una cotización completa</p>
          </div>

          <!-- Progress indicator -->
          <div class="p-3 bg-blue-50 border-b border-blue-200">
            <div class="flex items-center justify-between text-sm mb-2">
              <span class="text-blue-700 font-medium" id="${fieldName}-progress-text">
                Paso 1 de 4: Agentes
              </span>
              <span class="text-blue-600 text-xs" id="${fieldName}-progress-info">
                0 agente(s) | 0 planes | 0 servicio(s)
              </span>
            </div>
            <div class="w-full bg-blue-200 rounded-full h-1.5">
              <div 
                class="bg-blue-500 h-1.5 rounded-full transition-all duration-300"
                style="width: 25%"
                id="${fieldName}-progress-bar"
              ></div>
            </div>
          </div>
          
          <!-- Tabs Navigation -->
          <div class="border-b border-gray-200">
            <nav class="flex space-x-0" role="tablist">
              <button class="aim-tab flex-1 px-6 py-4 text-sm font-medium border-b-2 border-teal-500 text-teal-600 bg-teal-50" 
                      data-tab="agents" onclick="switchAIMTab('${fieldName}', 'agents', event); return false;">
                Agentes
              </button>
              <button class="aim-tab flex-1 px-6 py-4 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" 
                      data-tab="plans" onclick="switchAIMTab('${fieldName}', 'plans', event); return false;">
                Planes
              </button>
              <button class="aim-tab flex-1 px-6 py-4 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" 
                      data-tab="services" onclick="switchAIMTab('${fieldName}', 'services', event); return false;">
                Servicios
              </button>
              <button class="aim-tab flex-1 px-6 py-4 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" 
                      data-tab="summary" onclick="switchAIMTab('${fieldName}', 'summary', event); return false;">
                Resumen
              </button>
            </nav>
          </div>
          
          <!-- Tab Content -->
          <div class="p-6">
            <!-- Agentes Tab -->
            <div id="${fieldName}-agents-tab" class="aim-tab-content">
              <h4 class="text-lg font-semibold mb-4">Selecciona Agentes de Automatización</h4>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4" id="${fieldName}-agents-grid">
                <!-- Los agentes se cargarán dinámicamente -->
              </div>
              
              <!-- Botón de avance para agentes -->
              <div class="flex justify-center mt-6">
                <button 
                  type="button"
                  onclick="console.log('🔥 BOTÓN CONTINUAR AGENTES CLICKEADO'); goToNextAIMTab('${fieldName}'); return false;"
                  class="px-8 py-3 rounded-lg font-medium bg-teal-600 text-white hover:bg-teal-700 transition-colors"
                  id="${fieldName}-agents-continue"
                >
                  Continuar a Planes →
                </button>
              </div>
            </div>
            
            <!-- Planes Tab -->
            <div id="${fieldName}-plans-tab" class="aim-tab-content hidden">
              <h4 class="text-lg font-semibold mb-4">Selecciona Plan de Suscripción</h4>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4" id="${fieldName}-plans-grid">
                <!-- Los planes se cargarán dinámicamente -->
              </div>
              
              <!-- Botón de avance para planes -->
              <div class="flex justify-center mt-6">
                <button 
                  type="button"
                  onclick="console.log('🔥 BOTÓN CONTINUAR PLANES CLICKEADO'); goToNextAIMTab('${fieldName}'); return false;"
                  class="px-8 py-3 rounded-lg font-medium bg-teal-600 text-white hover:bg-teal-700 transition-colors"
                  id="${fieldName}-plans-continue"
                >
                  Continuar a Servicios →
                </button>
              </div>
            </div>
            
            <!-- Servicios Tab -->
            <div id="${fieldName}-services-tab" class="aim-tab-content hidden">
              <h4 class="text-lg font-semibold mb-4">Servicios Adicionales</h4>
              <div class="space-y-3" id="${fieldName}-services-list">
                <!-- Los servicios se cargarán dinámicamente -->
              </div>
              
              <!-- Botón de avance para servicios -->
              <div class="flex justify-center mt-6">
                <button 
                  type="button"
                  onclick="console.log('🔥 BOTÓN CONTINUAR SERVICIOS CLICKEADO'); goToNextAIMTab('${fieldName}'); return false;"
                  class="px-8 py-3 rounded-lg font-medium bg-teal-600 text-white hover:bg-teal-700 transition-colors"
                  id="${fieldName}-services-continue"
                >
                  Ver Resumen Final →
                </button>
              </div>
            </div>
            
            <!-- Resumen Tab -->
            <div id="${fieldName}-summary-tab" class="aim-tab-content hidden">
              <h4 class="text-lg font-semibold mb-4">Resumen de Cotización</h4>
              <div id="${fieldName}-summary-content">
                <div class="text-center text-gray-500 py-8">
                  <p>Selecciona agentes y planes para ver el resumen</p>
                </div>
              </div>
            </div>

            <!-- Navigation buttons -->
            <div class="flex justify-between items-center mt-8 pt-6 border-t border-gray-200">
              <button
                type="button"
                onclick="goToPrevAIMTab('${fieldName}'); return false;"
                class="px-6 py-2 rounded-lg font-medium bg-gray-200 text-gray-700 hover:bg-gray-300 transition-colors"
                id="${fieldName}-prev-btn"
              >
                ← Anterior
              </button>

              <div class="flex space-x-2">
                <button type="button" onclick="switchAIMTab('${fieldName}', 'agents', event); return false;" 
                        class="w-3 h-3 rounded-full bg-teal-500 transition-colors" title="Ir a Agentes"></button>
                <button type="button" onclick="switchAIMTab('${fieldName}', 'plans', event); return false;" 
                        class="w-3 h-3 rounded-full bg-gray-300 hover:bg-gray-400 transition-colors" title="Ir a Planes"></button>
                <button type="button" onclick="switchAIMTab('${fieldName}', 'services', event); return false;" 
                        class="w-3 h-3 rounded-full bg-gray-300 hover:bg-gray-400 transition-colors" title="Ir a Servicios"></button>
                <button type="button" onclick="switchAIMTab('${fieldName}', 'summary', event); return false;" 
                        class="w-3 h-3 rounded-full bg-gray-300 hover:bg-gray-400 transition-colors" title="Ir a Resumen"></button>
              </div>

              <button
                type="button"
                onclick="goToNextAIMTab('${fieldName}'); return false;"
                class="px-6 py-2 rounded-lg font-medium bg-teal-500 text-white hover:bg-teal-600 transition-colors"
                id="${fieldName}-next-btn"
              >
                Siguiente →
              </button>
            </div>
          </div>
          
          <!-- Hidden input para el formulario -->
          <input type="hidden" id="${fieldName}" name="${fieldName}" value="" />
        </div>
      `;
      
      container.innerHTML = quoteCalculatorHTML;
      
      // Inicializar datos del cotizador
      if (!window.aimQuoteData) {
        window.aimQuoteData = {};
      }
      
      window.aimQuoteData[fieldName] = {
        selectedAgents: [],
        selectedPlan: null,
        selectedServices: [],
        totals: {
          implementation: 0,
          monthly: 0,
          setup: 0,
          total: 0
        }
      };
      
      // Cargar contenido inicial
      loadAIMAgents(fieldName);
      loadAIMPlans(fieldName);
      loadAIMServices(fieldName);
      
      // Inicializar indicador de progreso
      updateProgressIndicator(fieldName, 'agents');
      
      console.log(`✅ Cotizador AIM inicializado para ${fieldName}`);
    }

    // Función para cargar agentes AIM desde la galería real
    async function loadAIMAgents(fieldName) {
      const agentsGrid = document.getElementById(`${fieldName}-agents-grid`);
      if (!agentsGrid) return;

      try {
        // Mostrar loading
        agentsGrid.innerHTML = `
          <div class="col-span-full flex items-center justify-center py-8">
            <div class="text-center">
              <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-teal-600 mx-auto"></div>
              <p class="mt-2 text-gray-600">Cargando agentes...</p>
            </div>
          </div>
        `;

        // Crear instancia del cliente de galería
        const galleryClient = new GalleryApiClient();
        
        // Obtener agentes desde la API
        const response = await galleryClient.getAgents({
          isActive: true,
          limit: 20,
          sortBy: 'usageCount',
          sortOrder: 'desc'
        });

        const agents = response.data?.items || [];
        console.log('💰 Agentes cargados desde galería:', agents);

        if (agents.length === 0) {
          agentsGrid.innerHTML = `
            <div class="col-span-full text-center py-8">
              <p class="text-gray-500">No hay agentes disponibles en la galería</p>
            </div>
          `;
          return;
        }

        // Mapear categorías de iconos
        const getCategoryIcon = (categoryName) => {
          const iconMap = {
            'Finanzas': '💰',
            'Contabilidad': '📊',
            'Logística': '📦',
            'Inventario': '📦',
            'Ventas': '👥',
            'CRM': '👥',
            'Recursos Humanos': '🧑‍💼',
            'RRHH': '🧑‍💼',
            'Producción': '🏭',
            'Calidad': '✅',
            'Mantenimiento': '🔧',
            'Compras': '🛒',
            'Marketing': '📢',
            'Servicio al Cliente': '📞',
            'TI': '💻',
            'Seguridad': '🔒'
          };
          return iconMap[categoryName] || '🤖';
        };

        // Convertir complejidad a español
        const getComplexityLabel = (complexity) => {
          const complexityMap = {
            'basic': 'Básico',
            'medium': 'Medio',
            'advanced': 'Avanzado'
          };
          return complexityMap[complexity?.toLowerCase()] || 'Medio';
        };

        // Generar precios estimados basados en complejidad (en caso de que no estén en la API)
        const getEstimatedPrice = (complexity) => {
          const priceMap = {
            'basic': { implementation: 25000, monthly: 4500 },
            'medium': { implementation: 45000, monthly: 8000 },
            'advanced': { implementation: 75000, monthly: 14000 }
          };
          const prices = priceMap[complexity?.toLowerCase()] || priceMap['medium'];
          return {
            implementation: prices.implementation + Math.floor(Math.random() * 10000) - 5000,
            monthly: prices.monthly + Math.floor(Math.random() * 2000) - 1000
          };
        };

        // Procesar y guardar datos de agentes reales con precios estimados
        const processedAgents = agents.map(agent => {
          const prices = getEstimatedPrice(agent.complexity);
          return {
            id: agent.id,
            name: agent.title || agent.name,
            title: agent.title || agent.name,
            description: agent.shortDescription || agent.challenge || 'Agente de automatización inteligente',
            complexity: agent.complexity,
            category: agent.category?.name || 'General',
            price: prices.implementation,
            monthlyPrice: prices.monthly,
            icon: getCategoryIcon(agent.category?.name)
          };
        });

        // Almacenar en el store global para uso posterior
        window.aimAgentsData[fieldName] = processedAgents;
        
        const agentsHTML = processedAgents.map(agent => {
          const complexityLabel = getComplexityLabel(agent.complexity);
          
          return `
            <div class="agent-card border-2 border-gray-200 rounded-lg p-4 hover:border-teal-300 transition-all cursor-pointer" 
                 onclick="toggleAIMAgent('${fieldName}', '${agent.id}', event); return false;">
              <div class="flex items-start justify-between mb-3">
                <div class="flex items-center space-x-3">
                  <div class="text-2xl">${agent.icon}</div>
                  <div>
                    <h3 class="font-semibold text-gray-900">${agent.title}</h3>
                    <span class="px-2 py-1 bg-${agent.complexity === 'basic' ? 'green' : agent.complexity === 'medium' ? 'yellow' : 'red'}-100 text-${agent.complexity === 'basic' ? 'green' : agent.complexity === 'medium' ? 'yellow' : 'red'}-800 rounded-full text-xs">
                      ${complexityLabel}
                    </span>
                  </div>
                </div>
                <div class="text-right">
                  <div class="text-lg font-bold text-teal-600">$${agent.price.toLocaleString()}</div>
                  <div class="text-sm text-gray-600">+ $${agent.monthlyPrice.toLocaleString()}/mes</div>
                </div>
              </div>
              <p class="text-gray-700 text-sm">${agent.description}</p>
              <div class="mt-3 text-center">
                <span class="select-indicator text-sm text-gray-500">Clic para seleccionar</span>
              </div>
            </div>
          `;
        }).join('');

        agentsGrid.innerHTML = agentsHTML;
        console.log('💰 Grid de agentes actualizado exitosamente');

      } catch (error) {
        console.error('💰 Error cargando agentes desde galería:', error);
        
        // Fallback a datos mock en caso de error
        const fallbackAgents = [
          {
            id: 'ap-301',
            name: 'Agente Cuentas por Pagar',
            category: 'Finanzas',
            complexity: 'medium',
            price: 45000,
            monthlyPrice: 8500,
            description: 'Automatiza recepción, validación e ingreso de facturas con OCR avanzado',
            icon: '💰'
          },
          {
            id: 'inv-401',
            name: 'Agente Control de Inventarios',
            category: 'Logística',
            complexity: 'medium',
            price: 38000,
            monthlyPrice: 7200,
            description: 'Gestión automática de stock, alertas y reposición inteligente',
            icon: '📦'
          },
          {
            id: 'crm-501',
            name: 'Agente CRM Automatizado',
            category: 'Ventas',
            complexity: 'advanced',
            price: 65000,
            monthlyPrice: 12000,
            description: 'Gestión automática de leads, seguimiento y pipelines de ventas',
            icon: '👥'
          }
        ];

        const fallbackHTML = fallbackAgents.map(agent => `
          <div class="agent-card border-2 border-gray-200 rounded-lg p-4 hover:border-teal-300 transition-all cursor-pointer" 
               onclick="toggleAIMAgent('${fieldName}', '${agent.id}', event); return false;">
            <div class="flex items-start justify-between mb-3">
              <div class="flex items-center space-x-3">
                <div class="text-2xl">${agent.icon}</div>
                <div>
                  <h3 class="font-semibold text-gray-900">${agent.name}</h3>
                  <span class="px-2 py-1 bg-${agent.complexity === 'basic' ? 'green' : agent.complexity === 'medium' ? 'yellow' : 'red'}-100 text-${agent.complexity === 'basic' ? 'green' : agent.complexity === 'medium' ? 'yellow' : 'red'}-800 rounded-full text-xs">
                    ${agent.complexity === 'basic' ? 'Básico' : agent.complexity === 'medium' ? 'Medio' : 'Avanzado'}
                  </span>
                </div>
              </div>
              <div class="text-right">
                <div class="text-lg font-bold text-teal-600">$${agent.price.toLocaleString()}</div>
                <div class="text-sm text-gray-600">+ $${agent.monthlyPrice.toLocaleString()}/mes</div>
              </div>
            </div>
            <p class="text-gray-700 text-sm">${agent.description}</p>
            <div class="mt-3 text-center">
              <span class="select-indicator text-sm text-gray-500">Clic para seleccionar</span>
            </div>
          </div>
        `).join('');

        agentsGrid.innerHTML = `
          <div class="col-span-full bg-yellow-50 border border-yellow-200 rounded p-4 mb-4">
            <p class="text-yellow-800 text-sm">⚠️ No se pudieron cargar los agentes desde la galería. Mostrando agentes de ejemplo.</p>
          </div>
          ${fallbackHTML}
        `;
      }
    }

    // Función para cargar planes AIM
    function loadAIMPlans(fieldName) {
      const plansGrid = document.getElementById(`${fieldName}-plans-grid`);
      if (!plansGrid) return;

      const mockPlans = [
        {
          id: 'starter',
          name: 'Plan Starter',
          price: 12000,
          features: ['Hasta 3 agentes', 'Soporte básico', 'Dashboard estándar', 'Reportes mensuales'],
          recommended: false,
          icon: '🚀'
        },
        {
          id: 'professional',
          name: 'Plan Professional',
          price: 25000,
          features: ['Hasta 8 agentes', 'Soporte prioritario', 'Dashboard avanzado', 'Reportes semanales', 'Integraciones ilimitadas'],
          recommended: true,
          icon: '💼'
        },
        {
          id: 'enterprise',
          name: 'Plan Enterprise',
          price: 45000,
          features: ['Agentes ilimitados', 'Soporte 24/7', 'Dashboard personalizado', 'Reportes en tiempo real', 'Consultoría incluida'],
          recommended: false,
          icon: '🏢'
        }
      ];

      const plansHTML = mockPlans.map(plan => `
        <div class="plan-card border-2 ${plan.recommended ? 'border-teal-500 bg-teal-50' : 'border-gray-200'} rounded-lg p-4 hover:border-teal-300 transition-all cursor-pointer relative" 
             onclick="console.log('🔥 PLAN CLICKEADO: ${plan.id}'); selectAIMPlan('${fieldName}', '${plan.id}', event); return false;"
             data-plan-id="${plan.id}">
          ${plan.recommended ? '<div class="absolute -top-2 left-1/2 transform -translate-x-1/2 bg-teal-500 text-white text-xs px-3 py-1 rounded-full">Recomendado</div>' : ''}
          <div class="text-center mb-4">
            <div class="text-3xl mb-2">${plan.icon}</div>
            <h3 class="font-bold text-lg text-gray-900">${plan.name}</h3>
            <div class="text-2xl font-bold text-teal-600 mt-2">$${plan.price.toLocaleString()}</div>
            <div class="text-sm text-gray-600">por mes</div>
          </div>
          <ul class="space-y-2 text-sm">
            ${plan.features.map(feature => `
              <li class="flex items-center">
                <svg class="w-4 h-4 text-green-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                ${feature}
              </li>
            `).join('')}
          </ul>
          <div class="mt-4 text-center">
            <span class="select-indicator text-sm text-gray-500">Clic para seleccionar</span>
          </div>
        </div>
      `).join('');

      plansGrid.innerHTML = plansHTML;
    }

    // Función para cargar servicios AIM
    function loadAIMServices(fieldName) {
      const servicesList = document.getElementById(`${fieldName}-services-list`);
      if (!servicesList) return;

      const mockServices = [
        {
          id: 'training',
          name: 'Capacitación del Equipo',
          price: 15000,
          description: 'Entrenamiento completo para tu equipo en el uso de los agentes'
        },
        {
          id: 'consulting',
          name: 'Consultoría Especializada',
          price: 25000,
          description: 'Análisis y optimización de procesos específicos de tu empresa'
        },
        {
          id: 'custom-dashboard',
          name: 'Dashboard Personalizado',
          price: 35000,
          description: 'Desarrollo de dashboard específico para tus necesidades'
        },
        {
          id: 'priority-support',
          name: 'Soporte Prioritario',
          price: 8500,
          description: 'Soporte técnico con tiempo de respuesta garantizado'
        }
      ];

      const servicesHTML = mockServices.map(service => `
        <div class="service-item flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50">
          <div class="flex items-center">
            <input type="checkbox" id="${fieldName}-service-${service.id}" 
                   onchange="toggleAIMService('${fieldName}', '${service.id}', event); return false;" 
                   class="mr-3 rounded border-gray-300 text-teal-600 focus:ring-teal-500">
            <div>
              <h4 class="font-medium text-gray-900">${service.name}</h4>
              <p class="text-sm text-gray-600">${service.description}</p>
            </div>
          </div>
          <div class="text-lg font-semibold text-teal-600">
            $${service.price.toLocaleString()}
          </div>
        </div>
      `).join('');

      servicesList.innerHTML = servicesHTML;
    }

    // Store para guardar los datos reales de agentes cargados desde la galería
    window.aimAgentsData = {};

    // Función para seleccionar/deseleccionar agentes
    function toggleAIMAgent(fieldName, agentId, event) {
      // Prevenir propagación del evento para evitar conflictos
      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }
      
      console.log(`💰 Toggle agente ${agentId} para campo ${fieldName}`);
      
      if (!window.aimQuoteData[fieldName]) {
        window.aimQuoteData[fieldName] = { selectedAgents: [], selectedPlan: null, selectedServices: [] };
      }
      
      const selectedAgents = window.aimQuoteData[fieldName].selectedAgents;
      const agentIndex = selectedAgents.findIndex(a => a.id === agentId);
      
      // Buscar los datos del agente en el store de agentes reales
      let agentData = null;
      if (window.aimAgentsData[fieldName]) {
        agentData = window.aimAgentsData[fieldName].find(agent => agent.id === agentId);
      }
      
      // Fallback a datos mock si no se encuentran los datos reales
      if (!agentData) {
        const mockAgentsData = {
          'ap-301': { id: 'ap-301', name: 'Agente Cuentas por Pagar', price: 45000, monthlyPrice: 8500 },
          'inv-401': { id: 'inv-401', name: 'Agente Control de Inventarios', price: 38000, monthlyPrice: 7200 },
          'crm-501': { id: 'crm-501', name: 'Agente CRM Automatizado', price: 65000, monthlyPrice: 12000 },
          'hr-601': { id: 'hr-601', name: 'Agente Recursos Humanos', price: 28000, monthlyPrice: 5500 }
        };
        agentData = mockAgentsData[agentId];
      }
      
      if (!agentData) {
        console.error(`💰 No se encontraron datos para el agente ${agentId}`);
        return false;
      }
      
      if (agentIndex > -1) {
        // Deseleccionar
        selectedAgents.splice(agentIndex, 1);
        console.log(`💰 Agente ${agentId} deseleccionado`);
      } else {
        // Seleccionar
        selectedAgents.push(agentData);
        console.log(`💰 Agente ${agentId} seleccionado:`, agentData);
        
        // ✅ AUTO-CAMBIO REMOVIDO - El usuario navega manualmente con botones "Continuar"
        console.log(`💰 Agente seleccionado - usa el botón "Continuar" para avanzar`);
      }
      
      // Actualizar UI
      updateAgentSelection(fieldName, agentId, agentIndex === -1);
      updateAIMSummary(fieldName);
      
      return false; // Prevenir comportamiento por defecto
    }

    // Función para seleccionar plan
    function selectAIMPlan(fieldName, planId, event) {
      // Prevenir propagación del evento para evitar conflictos
      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }
      
      console.log(`💰 Seleccionar plan ${planId} para campo ${fieldName}`);
      
      if (!window.aimQuoteData[fieldName]) {
        window.aimQuoteData[fieldName] = { selectedAgents: [], selectedPlan: null, selectedServices: [] };
      }
      
      // Datos de los planes
      const plansData = {
        'starter': { id: 'starter', name: 'Plan Starter', price: 12000 },
        'professional': { id: 'professional', name: 'Plan Professional', price: 25000 },
        'enterprise': { id: 'enterprise', name: 'Plan Enterprise', price: 45000 }
      };
      
      window.aimQuoteData[fieldName].selectedPlan = plansData[planId];
      
      // Actualizar UI
      updatePlanSelection(fieldName, planId);
      updateAIMSummary(fieldName);
      
      console.log(`✅ Plan ${planId} seleccionado exitosamente para ${fieldName}`);
      
      // ✅ AUTO-CAMBIO REMOVIDO - El usuario navega manualmente con botones "Continuar"
      console.log(`💰 Plan seleccionado - usa el botón "Continuar" para avanzar`);
      
      return false; // Prevenir comportamiento por defecto
    }

    // Función para seleccionar/deseleccionar servicios
    function toggleAIMService(fieldName, serviceId, event) {
      // Prevenir propagación del evento para evitar conflictos
      if (event) {
        event.preventDefault();
        event.stopPropagation();
      }
      
      console.log(`💰 Toggle servicio ${serviceId} para campo ${fieldName}`);
      
      if (!window.aimQuoteData[fieldName]) {
        window.aimQuoteData[fieldName] = { selectedAgents: [], selectedPlan: null, selectedServices: [] };
      }
      
      const selectedServices = window.aimQuoteData[fieldName].selectedServices;
      const serviceIndex = selectedServices.findIndex(s => s.id === serviceId);
      
      // Datos de servicios
      const servicesData = {
        'training': { id: 'training', name: 'Capacitación del Equipo', price: 15000 },
        'consulting': { id: 'consulting', name: 'Consultoría Especializada', price: 25000 },
        'custom-dashboard': { id: 'custom-dashboard', name: 'Dashboard Personalizado', price: 35000 },
        'priority-support': { id: 'priority-support', name: 'Soporte Prioritario', price: 8500 }
      };
      
      if (serviceIndex > -1) {
        // Deseleccionar
        selectedServices.splice(serviceIndex, 1);
        console.log(`💰 Servicio ${serviceId} deseleccionado`);
      } else {
        // Seleccionar
        selectedServices.push(servicesData[serviceId]);
        console.log(`💰 Servicio ${serviceId} seleccionado`);
        
        // ✅ AUTO-CAMBIO REMOVIDO - El usuario navega manualmente con botones "Continuar"
        console.log(`💰 Servicio seleccionado - usa el botón "Continuar" para avanzar`);
      }
      
      updateAIMSummary(fieldName);
      
      return false; // Prevenir comportamiento por defecto
    }

    // Función para actualizar la selección visual de agentes
    function updateAgentSelection(fieldName, agentId, isSelected) {
      const agentCard = document.querySelector(`#${fieldName}-agents-grid .agent-card[onclick*="${agentId}"]`);
      if (agentCard) {
        if (isSelected) {
          agentCard.classList.remove('border-gray-200');
          agentCard.classList.add('border-teal-500', 'bg-teal-50');
          agentCard.querySelector('.select-indicator').textContent = '✓ Seleccionado';
        } else {
          agentCard.classList.remove('border-teal-500', 'bg-teal-50');
          agentCard.classList.add('border-gray-200');
          agentCard.querySelector('.select-indicator').textContent = 'Clic para seleccionar';
        }
      }
    }

    // Función para actualizar la selección visual de planes
    function updatePlanSelection(fieldName, selectedPlanId) {
      const planCards = document.querySelectorAll(`#${fieldName}-plans-grid .plan-card`);
      planCards.forEach(card => {
        const cardOnClick = card.getAttribute('onclick');
        if (cardOnClick && cardOnClick.includes(selectedPlanId)) {
          card.classList.remove('border-gray-200');
          card.classList.add('border-teal-500', 'bg-teal-50');
          const indicator = card.querySelector('.select-indicator');
          if (indicator) {
            indicator.textContent = '✓ Seleccionado';
          }
        } else {
          card.classList.remove('border-teal-500', 'bg-teal-50');
          card.classList.add('border-gray-200');
          const indicator = card.querySelector('.select-indicator');
          if (indicator) {
            indicator.textContent = 'Clic para seleccionar';
          }
        }
      });
    }

    // Función para actualizar el resumen
    function updateAIMSummary(fieldName) {
      const data = window.aimQuoteData[fieldName];
      if (!data) return;
      
      console.log(`💰 Resumen actualizado para ${fieldName}:`, data);
      
      // Calcular totales con validación de datos
      const agentsTotal = data.selectedAgents?.reduce((sum, agent) => {
        const price = agent?.price || 0;
        return sum + price;
      }, 0) || 0;
      
      const agentsMonthly = data.selectedAgents?.reduce((sum, agent) => {
        const monthlyPrice = agent?.monthlyPrice || 0;
        return sum + monthlyPrice;
      }, 0) || 0;
      
      const planMonthly = data.selectedPlan?.price || 0;
      
      const servicesTotal = data.selectedServices?.reduce((sum, service) => {
        const price = service?.price || 0;
        return sum + price;
      }, 0) || 0;
      
      const totalImplementation = agentsTotal + servicesTotal;
      const totalMonthly = agentsMonthly + planMonthly;
      const firstYearTotal = totalImplementation + (totalMonthly * 12);
      
      // Actualizar datos
      data.totals = {
        implementation: totalImplementation,
        monthly: totalMonthly,
        setup: servicesTotal,
        total: firstYearTotal
      };
      
      // Actualizar el campo hidden
      const hiddenInput = document.getElementById(fieldName);
      if (hiddenInput) {
        hiddenInput.value = JSON.stringify(data);
      }
      
      // Actualizar resumen visual
      const summaryContent = document.getElementById(`${fieldName}-summary-content`);
      if (summaryContent) {
        summaryContent.innerHTML = `
          <div class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div class="bg-teal-50 border border-teal-200 rounded-lg p-4 text-center">
                <div class="text-2xl font-bold text-teal-600">$${totalImplementation.toLocaleString()}</div>
                <div class="text-sm text-teal-800">Implementación</div>
              </div>
              <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 text-center">
                <div class="text-2xl font-bold text-blue-600">$${totalMonthly.toLocaleString()}</div>
                <div class="text-sm text-blue-800">Mensual</div>
              </div>
              <div class="bg-emerald-50 border border-emerald-200 rounded-lg p-4 text-center">
                <div class="text-2xl font-bold text-emerald-600">$${firstYearTotal.toLocaleString()}</div>
                <div class="text-sm text-emerald-800">Primer Año</div>
              </div>
            </div>
            
            <div class="space-y-4">
              <div>
                <h5 class="font-semibold mb-2">Agentes Seleccionados (${data.selectedAgents?.length || 0})</h5>
                ${(data.selectedAgents?.length || 0) > 0 ? 
                  data.selectedAgents.map(agent => `
                    <div class="flex justify-between py-1">
                      <span>${agent?.name || agent?.title || 'Agente'}</span>
                      <span>$${(agent?.price || 0).toLocaleString()}</span>
                    </div>
                  `).join('') :
                  '<p class="text-gray-500 text-sm">Ningún agente seleccionado</p>'
                }
              </div>
              
              <div>
                <h5 class="font-semibold mb-2">Plan de Suscripción</h5>
                ${data.selectedPlan ? 
                  `<div class="flex justify-between py-1">
                    <span>${data.selectedPlan?.name || 'Plan'}</span>
                    <span>$${(data.selectedPlan?.price || 0).toLocaleString()}/mes</span>
                  </div>` :
                  '<p class="text-gray-500 text-sm">Ningún plan seleccionado</p>'
                }
              </div>
              
              <div>
                <h5 class="font-semibold mb-2">Servicios Adicionales (${data.selectedServices?.length || 0})</h5>
                ${(data.selectedServices?.length || 0) > 0 ? 
                  data.selectedServices.map(service => `
                    <div class="flex justify-between py-1">
                      <span>${service?.name || 'Servicio'}</span>
                      <span>$${(service?.price || 0).toLocaleString()}</span>
                    </div>
                  `).join('') :
                  '<p class="text-gray-500 text-sm">Ningún servicio seleccionado</p>'
                }
              </div>
            </div>
          </div>
        `;
      }
      
      console.log(`💰 Resumen actualizado para ${fieldName}:`, data);
    }

    // Hacer funciones globales
    window.toggleAIMAgent = toggleAIMAgent;
    window.selectAIMPlan = selectAIMPlan;
    window.toggleAIMService = toggleAIMService;

    // Helper para tipos de archivos
    // Funciones de utilidad para AIM Quote Calculator
    window.aimQuoteData = {};
    
    // Cliente API para galería (necesario para cargar agentes reales)
    class GalleryApiClient {
      constructor() {
        this.baseUrl = 'http://localhost:3001/api/gallery';
      }

      async request(endpoint, options = {}) {
        const url = `${this.baseUrl}${endpoint}`;
        
        const defaultOptions = {
          headers: {
            'Content-Type': 'application/json',
            ...options.headers
          }
        };

        // Agregar token de autenticación si está disponible
        const token = localStorage.getItem('access_token');
        if (token) {
          defaultOptions.headers.Authorization = `Bearer ${token}`;
        }

        const config = {
          ...defaultOptions,
          ...options
        };

        try {
          const response = await fetch(url, config);
          
          if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
          }

          return await response.json();
        } catch (error) {
          console.error('API request failed:', error);
          throw error;
        }
      }

      async getAgents(filters = {}) {
        const queryParams = new URLSearchParams();
        
        Object.entries(filters).forEach(([key, value]) => {
          if (value !== undefined && value !== null && value !== '') {
            queryParams.append(key, value.toString());
          }
        });
        
        const queryString = queryParams.toString();
        const endpoint = queryString ? `/agents?${queryString}` : '/agents';
        
        console.log(`🔍 Gallery API call: ${this.baseUrl}${endpoint}`);
        return this.request(endpoint);
      }
    }

    // Función mejorada para cambiar tabs del cotizador AIM con botones de navegación
    function switchAIMTab(fieldName, tabName, event) {
      try {
        // Prevenir propagación del evento para evitar conflictos
        if (event) {
          event.preventDefault();
          event.stopPropagation();
        }
        
        console.log(`🔄 FORZANDO CAMBIO DE TAB: ${tabName} para campo ${fieldName}`);
        
        // Buscar el contenedor específico del campo
        const mainContainer = document.querySelector(`[data-field-name="${fieldName}"]`);
        if (!mainContainer) {
          console.error(`❌ No se encontró contenedor para campo ${fieldName}`);
          return false;
        }
        
        console.log(`🎯 Contenedor encontrado:`, mainContainer);
        
        // FORZAR ocultación de TODOS los tabs
        const allTabsInContainer = mainContainer.querySelectorAll('[id*="-tab"]');
        console.log(`🔍 Encontrados ${allTabsInContainer.length} elementos de tab para ocultar`);
        
        allTabsInContainer.forEach((tab, index) => {
          console.log(`🙈 Ocultando tab ${index}: ${tab.id}`);
          tab.style.display = 'none';
          tab.classList.add('hidden');
        });
        
        // FORZAR mostrar el tab seleccionado
        const selectedContent = document.getElementById(`${fieldName}-${tabName}-tab`);
        console.log(`🔍 Buscando tab: ${fieldName}-${tabName}-tab`);
        console.log(`🎯 Tab encontrado:`, selectedContent);
        
        if (selectedContent) {
          console.log(`🚀 FORZANDO MOSTRAR TAB: ${selectedContent.id}`);
          selectedContent.style.display = 'block';
          selectedContent.classList.remove('hidden');
          
          // Verificar que realmente sea visible
          setTimeout(() => {
            const isVisible = selectedContent.offsetHeight > 0;
            console.log(`✅ Tab ${selectedContent.id} es visible: ${isVisible}`);
            if (!isVisible) {
              console.error(`❌ CRÍTICO: Tab ${selectedContent.id} no es visible después del cambio!`);
              selectedContent.style.display = 'block !important';
              selectedContent.style.visibility = 'visible';
              selectedContent.style.opacity = '1';
            }
          }, 50);
          
        } else {
          console.error(`❌ CRÍTICO: No se encontró contenido para tab ${fieldName}-${tabName}-tab`);
          
          // Debug: Listar todos los IDs disponibles
          const allElements = mainContainer.querySelectorAll('[id]');
          console.log(`🔍 DEBUG: Todos los IDs en el contenedor:`);
          allElements.forEach(el => {
            console.log(`   - ${el.id}`);
          });
        }
        
        // FORZAR actualización de estilos de los botones de tabs
        const tabButtons = mainContainer.querySelectorAll('.aim-tab');
        console.log(`🎨 Actualizando estilos de ${tabButtons.length} botones de tab`);
        
        tabButtons.forEach(button => {
          const buttonTab = button.getAttribute('data-tab');
          console.log(`🔘 Botón tab: ${buttonTab}, objetivo: ${tabName}`);
          
          // Remover todas las clases primero
          button.className = 'aim-tab flex-1 px-6 py-4 text-sm font-medium border-b-2';
          
          if (buttonTab === tabName) {
            button.className += ' border-teal-500 text-teal-600 bg-teal-50';
            console.log(`✅ Activando botón: ${buttonTab}`);
          } else {
            button.className += ' border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300';
          }
        });
        
        // Actualizar indicador de progreso
        updateProgressIndicator(fieldName, tabName);
        
        console.log(`🎉 CAMBIO DE TAB COMPLETADO FORZOSAMENTE a ${tabName}`);
        
      } catch (error) {
        console.error(`💥 Error CRÍTICO en switchAIMTab:`, error);
        console.error(`💥 Stack:`, error.stack);
      }
      
      return false; // Prevenir comportamiento por defecto
    }

    // Función para actualizar el indicador de progreso
    function updateProgressIndicator(fieldName, currentTab) {
      const tabs = {
        'agents': { step: 1, title: 'Agentes', width: '25%' },
        'plans': { step: 2, title: 'Planes', width: '50%' },
        'services': { step: 3, title: 'Servicios', width: '75%' },
        'summary': { step: 4, title: 'Resumen', width: '100%' }
      };

      const currentTabInfo = tabs[currentTab];
      if (!currentTabInfo) return;

      // Actualizar texto de progreso
      const progressText = document.getElementById(`${fieldName}-progress-text`);
      if (progressText) {
        progressText.textContent = `Paso ${currentTabInfo.step} de 4: ${currentTabInfo.title}`;
      }

      // Actualizar barra de progreso
      const progressBar = document.getElementById(`${fieldName}-progress-bar`);
      if (progressBar) {
        progressBar.style.width = currentTabInfo.width;
      }

      // Actualizar información de selecciones
      const progressInfo = document.getElementById(`${fieldName}-progress-info`);
      if (progressInfo && window.aimQuoteData && window.aimQuoteData[fieldName]) {
        const data = window.aimQuoteData[fieldName];
        const agentsCount = data.selectedAgents ? data.selectedAgents.length : 0;
        const planCount = data.selectedPlan ? 1 : 0;
        const servicesCount = data.selectedServices ? data.selectedServices.length : 0;
        
        progressInfo.textContent = `${agentsCount} agente(s) | ${planCount} plan(es) | ${servicesCount} servicio(s)`;
      }

      // Actualizar puntos de navegación
      const dotButtons = document.querySelectorAll(`[data-field-name="${fieldName}"] .flex.space-x-2 button`);
      dotButtons.forEach((button, index) => {
        const tabNames = ['agents', 'plans', 'services', 'summary'];
        if (tabNames[index] === currentTab) {
          button.className = 'w-3 h-3 rounded-full bg-teal-500 transition-colors';
        } else {
          button.className = 'w-3 h-3 rounded-full bg-gray-300 hover:bg-gray-400 transition-colors';
        }
      });
    }

    // Función para navegación con botones Anterior/Siguiente
    window.goToNextAIMTab = function(fieldName) {
      console.log(`🚀 INICIANDO goToNextAIMTab para campo: ${fieldName}`);
      
      const tabs = ['agents', 'plans', 'services', 'summary'];
      const mainContainer = document.querySelector(`[data-field-name="${fieldName}"]`);
      
      if (!mainContainer) {
        console.error(`❌ No se encontró contenedor principal para ${fieldName}`);
        return;
      }

      console.log(`✅ Contenedor encontrado para: ${fieldName}`);

      // Encontrar tab activo actual de forma más robusta
      let currentIndex = 0;
      let activeTab = mainContainer.querySelector('.aim-tab[class*="border-teal-500"]');
      
      // Si no encuentra por clase, buscar por aria-selected o data attributes
      if (!activeTab) {
        console.log(`🔍 Buscando tab activo de forma alternativa...`);
        activeTab = mainContainer.querySelector('.aim-tab.bg-teal-50');
      }
      
      if (activeTab) {
        const currentTab = activeTab.getAttribute('data-tab');
        currentIndex = tabs.indexOf(currentTab);
        console.log(`📍 Tab actual encontrado: ${currentTab} (índice: ${currentIndex})`);
      } else {
        console.log(`⚠️ No se encontró tab activo, asumiendo agents (índice 0)`);
      }

      // Ir al siguiente tab si existe
      if (currentIndex < tabs.length - 1) {
        const nextTab = tabs[currentIndex + 1];
        console.log(`▶️ Avanzando al siguiente tab: ${nextTab}`);
        
                 // Forzar el cambio de tab INMEDIATAMENTE
         switchAIMTab(fieldName, nextTab, null);
         
         // Cargar contenido específico del tab
         setTimeout(() => {
           forceLoadTabContent(fieldName, nextTab);
         }, 200);
      } else {
        console.log(`ℹ️ Ya estás en el último tab (${tabs[currentIndex]})`);
      }
    };

    window.goToPrevAIMTab = function(fieldName) {
      const tabs = ['agents', 'plans', 'services', 'summary'];
      const mainContainer = document.querySelector(`[data-field-name="${fieldName}"]`);
      if (!mainContainer) return;

      // Encontrar tab activo actual
      let currentIndex = 0;
      const activeTab = mainContainer.querySelector('.aim-tab.border-teal-500');
      if (activeTab) {
        const currentTab = activeTab.getAttribute('data-tab');
        currentIndex = tabs.indexOf(currentTab);
      }

      // Ir al tab anterior si existe
      if (currentIndex > 0) {
        const prevTab = tabs[currentIndex - 1];
        console.log(`🔄 Retrocediendo al tab anterior: ${prevTab}`);
        switchAIMTab(fieldName, prevTab);
      }
    };

    // Forzar cargar contenido inmediatamente después del cambio de tab
    function forceLoadTabContent(fieldName, tabName) {
      console.log(`🔄 Forzando carga de contenido para tab: ${tabName}`);
      
      try {
        if (tabName === 'agents') {
          loadAIMAgents(fieldName);
        } else if (tabName === 'plans') {
          loadAIMPlans(fieldName);
        } else if (tabName === 'services') {
          loadAIMServices(fieldName);
        } else if (tabName === 'summary') {
          updateAIMSummary(fieldName);
        }
        console.log(`✅ Contenido cargado para tab: ${tabName}`);
      } catch (error) {
        console.error(`❌ Error cargando contenido del tab ${tabName}:`, error);
      }
    }

    // Funciones globales para usar en onclick
    window.switchAIMTab = switchAIMTab;
    window.forceLoadTabContent = forceLoadTabContent;
    window.loadAIMAgents = loadAIMAgents;
    window.GalleryApiClient = GalleryApiClient;
    window.toggleAIMAgent = toggleAIMAgent;
    window.selectAIMPlan = selectAIMPlan;
    window.toggleAIMService = toggleAIMService;
    window.updateAIMSummary = updateAIMSummary;
    
    window.updateAIMQuoteCalculation = function(fieldName, newData) {
      console.log(`💰 Actualizando cálculo AIM Quote para ${fieldName}:`, newData);
      
      // Almacenar datos en el objeto global
      window.aimQuoteData[fieldName] = newData;
      
      // Actualizar el input hidden del formulario
      const hiddenInput = document.getElementById(fieldName);
      if (hiddenInput) {
        hiddenInput.value = JSON.stringify(newData);
        
        // Disparar evento de cambio para validación del formulario
        hiddenInput.dispatchEvent(new Event('change', { bubbles: true }));
      }
      
      // Actualizar vista previa HTML si existe
      updateDocumentPreview();
    };
    
    // Función para generar HTML de vista previa del cotizador
    window.generateAIMQuoteHTML = function(quoteData) {
      if (!quoteData) {
        return '<p class="text-gray-500">No hay datos de cotización disponibles</p>';
      }
      
      console.log(`💰 Generando HTML para cotización:`, quoteData);
      
      // Si no hay calculations o summary, generarlos dinámicamente
      if (!quoteData.calculations || !quoteData.summary) {
        quoteData = completarDatosCotizacion(quoteData);
      }
      
      const { selectedAgents, selectedPlan, selectedServices, calculations, summary } = quoteData;
      
      let html = `
        <div class="space-y-6">
          <!-- Header de la cotización -->
          <div class="bg-gradient-to-r from-teal-500 to-emerald-500 text-white p-6 rounded-lg">
            <p class="text-teal-100">Válida por ${summary.validityDays} días | ${calculations.currency}</p>
          </div>
          
          <!-- Resumen de selecciones -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="bg-teal-50 border border-teal-200 rounded-lg p-4">
              <h3 class="font-semibold text-teal-900 mb-3">🤖 Agentes Seleccionados (${summary.agentCount})</h3>`;
      
      if (selectedAgents.length > 0) {
        selectedAgents.forEach(agent => {
          html += `
              <div class="mb-2">
                <div class="font-medium text-teal-800">${agent.name}</div>
                <div class="text-sm text-teal-600">${agent.category} | ${agent.complexity}</div>
              </div>`;
        });
      } else {
        html += '<p class="text-sm text-teal-600">Ningún agente seleccionado</p>';
      }
      
      html += `
            </div>
            
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
              <h3 class="font-semibold text-blue-900 mb-3">💼 Plan de Suscripción</h3>`;
      
      if (selectedPlan) {
        html += `
              <div class="font-medium text-blue-800">${selectedPlan.name}</div>
              <div class="text-sm text-blue-600">${selectedPlan.subtitle}</div>
              <div class="text-xs text-blue-500 mt-1">$${selectedPlan.monthlyPrice.toLocaleString()}/mes</div>`;
      } else {
        html += '<p class="text-sm text-blue-600">Ningún plan seleccionado</p>';
      }
      
      html += `
            </div>
            
            <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
              <h3 class="font-semibold text-purple-900 mb-3">⚙️ Servicios Adicionales (${summary.servicesCount})</h3>`;
      
      if (selectedServices.length > 0) {
        selectedServices.slice(0, 3).forEach(service => {
          html += `<div class="text-sm text-purple-700 mb-1">• ${service.name}</div>`;
        });
        if (selectedServices.length > 3) {
          html += `<div class="text-sm text-purple-600">+${selectedServices.length - 3} servicios más</div>`;
        }
      } else {
        html += '<p class="text-sm text-purple-600">Ningún servicio adicional</p>';
      }
      
      html += `
            </div>
          </div>
          
          <!-- Desglose de costos -->
          <div class="bg-white border border-gray-200 rounded-lg overflow-hidden">
            <div class="bg-gray-50 px-6 py-4">
              <h3 class="font-semibold text-gray-900">💰 Desglose de Costos</h3>
            </div>
            
            <div class="p-6 space-y-4">
              <div class="flex justify-between items-center py-2 border-b border-gray-100">
                <span class="text-gray-700">Agentes (implementación)</span>
                <span class="font-medium">$${calculations.baseTotal.toLocaleString()} ${calculations.currency}</span>
              </div>
              
              <div class="flex justify-between items-center py-2 border-b border-gray-100">
                <span class="text-gray-700">Configuración inicial</span>
                <span class="font-medium">$${calculations.setupTotal.toLocaleString()} ${calculations.currency}</span>
              </div>`;
      
      if (calculations.warrantyTotal > 0) {
        html += `
              <div class="flex justify-between items-center py-2 border-b border-gray-100">
                <span class="text-gray-700">Garantía extendida</span>
                <span class="font-medium">$${calculations.warrantyTotal.toLocaleString()} ${calculations.currency}</span>
              </div>`;
      }
      
      html += `
              <div class="flex justify-between items-center py-2 border-b-2 border-gray-300">
                <span class="text-gray-700">Costo mensual recurrente</span>
                <span class="font-medium">$${calculations.monthlyTotal.toLocaleString()} ${calculations.currency}/mes</span>
              </div>
              
              <div class="flex justify-between items-center py-3 bg-teal-50 rounded-lg px-4">
                <span class="text-lg font-semibold text-teal-900">Total Inicial</span>
                <span class="text-xl font-bold text-teal-600">
                  $${calculations.grandTotal.toLocaleString()} ${calculations.currency}
                </span>
              </div>
              
              <div class="flex justify-between items-center py-3 bg-blue-50 rounded-lg px-4">
                <span class="text-lg font-semibold text-blue-900">Total Primer Año</span>
                <span class="text-xl font-bold text-blue-600">
                  $${calculations.firstYearTotal.toLocaleString()} ${calculations.currency}
                </span>
              </div>
            </div>
          </div>
          
          <!-- Términos de la cotización -->
          <div class="bg-gray-50 rounded-lg p-4">
            <h3 class="font-semibold text-gray-900 mb-3">📋 Términos de la Cotización</h3>
            <div class="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span class="text-gray-600">Términos de pago:</span>
                <span class="ml-2 font-medium">${summary.paymentTerms}</span>
              </div>
              <div>
                <span class="text-gray-600">Garantía:</span>
                <span class="ml-2 font-medium">${summary.warranty}</span>
              </div>
            </div>
          </div>
        </div>
      `;
      
      return html;
    };
    
    // Función auxiliar para completar datos faltantes de cotización
    function completarDatosCotizacion(quoteData) {
      console.log(`💰 Completando datos faltantes de cotización`);
      
      const { selectedAgents = [], selectedPlan = null, selectedServices = [] } = quoteData;
      
      // Calcular totales
      let baseTotal = 0;
      let monthlyTotal = 0;
      let setupTotal = 15000; // Costo base de configuración
      
      // Calcular costos de agentes
      selectedAgents.forEach(agent => {
        baseTotal += agent.implementationCost || 25000; // Costo base por agente
        monthlyTotal += agent.monthlyPrice || 5000; // Costo mensual por agente
      });
      
      // Calcular costos del plan
      if (selectedPlan) {
        monthlyTotal += selectedPlan.price || selectedPlan.monthlyPrice || 12000;
      }
      
      // Calcular costos de servicios
      selectedServices.forEach(service => {
        if (service.type === 'monthly') {
          monthlyTotal += service.price || 2000;
        } else {
          setupTotal += service.price || 8000;
        }
      });
      
      const warrantyTotal = Math.round(baseTotal * 0.1); // 10% de garantía
      const grandTotal = baseTotal + setupTotal + warrantyTotal;
      const firstYearTotal = grandTotal + (monthlyTotal * 12);
      
      // Crear objeto calculations
      const calculations = {
        baseTotal,
        setupTotal,
        warrantyTotal,
        monthlyTotal,
        grandTotal,
        firstYearTotal,
        currency: 'MXN'
      };
      
      // Crear objeto summary
      const summary = {
        agentCount: selectedAgents.length,
        servicesCount: selectedServices.length,
        validityDays: 30,
        paymentTerms: '50% inicial, 30% entrega beta, 20% go-live',
        warranty: '12 meses garantía completa'
      };
      
      console.log(`✅ Datos de cotización completados:`, { calculations, summary });
      
      return {
        ...quoteData,
        calculations,
        summary
      };
    }

    console.log('💰 Funciones AIM Quote Calculator registradas globalmente');

    // Función para debug de tabs y contenidos
    window.debugAIMTabs = function(fieldName) {
      console.log(`🔍 Debug AIM Tabs para ${fieldName}:`);
      
      const container = document.querySelector(`[data-field-name="${fieldName}"]`);
      console.log('Container encontrado:', container);
      
      if (container) {
        const tabs = container.querySelectorAll('.aim-tab');
        console.log(`Tabs encontrados: ${tabs.length}`);
        tabs.forEach(tab => {
          console.log(`- Tab: ${tab.getAttribute('data-tab')}, Visible: ${!tab.classList.contains('hidden')}`);
        });
        
        const tabContents = container.querySelectorAll(`[id^="${fieldName}-"][id$="-tab"]`);
        console.log(`Tab contents encontrados: ${tabContents.length}`);
        tabContents.forEach(content => {
          console.log(`- Content: ${content.id}, Hidden: ${content.classList.contains('hidden')}`);
        });
      }
    };

    // Auto-cargar agentes cuando se inicialice un cotizador AIM
    document.addEventListener('DOMContentLoaded', function() {
      // Buscar todos los cotizadores AIM en la página
      const aimCalculators = document.querySelectorAll('[data-field-name]');
      console.log(`💰 Encontrados ${aimCalculators.length} cotizadores AIM para inicializar`);
      
      aimCalculators.forEach(calculator => {
        const fieldName = calculator.getAttribute('data-field-name');
        if (fieldName && fieldName.includes('aim-quote')) {
          console.log(`💰 Inicializando cotizador AIM para campo: ${fieldName}`);
          
          // Pequeño delay para asegurar que el DOM esté completamente cargado
          setTimeout(() => {
            // Cargar agentes automáticamente
            if (typeof loadAIMAgents === 'function') {
              loadAIMAgents(fieldName);
            }
            
            // Asegurar que el primer tab esté activo
            switchAIMTab(fieldName, 'agents', null);
          }, 500);
        }
      });
    });

    // Funciones ROI
    window.showROITab = showROITab;
    window.addEmployee = addEmployee;
    window.removeEmployee = removeEmployee;
    window.updateEmployeesList = updateEmployeesList;
    window.updateROICalculation = updateROICalculation;

    // Helper para tipos de archivos
        function getAcceptTypes(allowedTypes) {
      const mimeTypes = {
        'pdf': ['application/pdf'],
        'image': ['image/jpeg', 'image/png', 'image/gif'],
        'document': ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],
                'video': ['video/mp4', 'video/avi'],
        'audio': ['audio/mp3', 'audio/wav']
      };
      
      return allowedTypes.flatMap(type => mimeTypes[type] || []).join(',');
    }

    // Función auxiliar para validar campos required
    function validateRequiredFields() {
      const form = document.getElementById('documentForm');
      if (!form) return true;
      
      const requiredFields = form.querySelectorAll('[required]');
      let isValid = true;
      
      requiredFields.forEach(field => {
        if (!field.value.trim()) {
          field.classList.add('border-red-500');
          isValid = false;
        } else {
          field.classList.remove('border-red-500');
        }
      });
      
      return isValid;
    }

    // Helper para tipos de archivos
    function getAcceptTypes(allowedTypes) {
      const mimeTypes = {
        'pdf': ['application/pdf'],
        'image': ['image/jpeg', 'image/png', 'image/gif'],
        'document': ['application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'],
        'video': ['video/mp4', 'video/avi'],
        'audio': ['audio/mp3', 'audio/wav']
      };
      
      return allowedTypes.flatMap(type => mimeTypes[type] || []).join(',');
    }

    // Manejar upload de archivos
    function handleFileUpload(e, fieldName, config) {
      const files = Array.from(e.target.files);
      const fileData = files.map(file => ({
        id: Date.now() + Math.random(),
        filename: file.name,
        originalName: file.name,
        type: getFileType(file),
        mimeType: file.type,
        size: file.size,
        category: config.categories?.[0] || 'General',
        description: '',
        file: file
      }));
      
      // Guardar datos en input hidden
      const hiddenInput = document.getElementById(fieldName);
      if (hiddenInput) {
        hiddenInput.value = JSON.stringify(fileData);
      }
      
      // Actualizar vista del componente
      const container = document.getElementById(`${fieldName}-container`);
      if (container && files.length > 0) {
        // Crear lista de archivos
        const filesList = files.map(file => `
          <div class="flex items-center justify-between p-2 bg-gray-100 rounded mb-2">
            <div class="flex items-center">
              <span class="text-lg mr-2">${getFileIcon(getFileType(file))}</span>
              <div>
                <div class="text-sm font-medium">${file.name}</div>
                <div class="text-xs text-gray-500">${formatFileSize(file.size)}</div>
              </div>
            </div>
            <span class="text-xs text-green-600">✓ Cargado</span>
          </div>
        `).join('');
        
        container.innerHTML = `
          <div class="border-2 border-dashed border-green-300 bg-green-50 p-4 rounded-lg">
            <div class="text-center mb-4">
              <div class="text-green-600 text-lg mb-2">✓ ${files.length} archivo(s) seleccionado(s)</div>
              <button type="button" onclick="document.getElementById('${fieldName}-container').querySelector('input[type=file]').click()" 
                      class="text-sm text-teal-600 hover:text-teal-800 underline">
                Seleccionar otros archivos
              </button>
            </div>
            <div class="max-h-40 overflow-y-auto">
              ${filesList}
            </div>
            <input type="file" multiple accept="${getAcceptTypes(config.allowedTypes || ['pdf', 'image', 'document'])}" 
                   style="display: none" onchange="handleFileUpload(event, '${fieldName}', ${JSON.stringify(config).replace(/"/g, '&quot;')})">
          </div>
        `;
      }
      
      console.log(`Archivos cargados para ${fieldName}:`, fileData);
    }

    // Formatear tamaño de archivo
    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Obtener icono de archivo
    function getFileIcon(type) {
      const icons = {
        'pdf': '📄',
        'image': '🖼️',
        'document': '📝',
        'video': '🎥',
        'audio': '🎵',
        'other': '📎'
      };
      return icons[type] || '📎';
    }

    // Obtener tipo de archivo
    function getFileType(file) {
      const extension = file.name.split('.').pop().toLowerCase();
      const mimeType = file.type.toLowerCase();
      
      // Verificar por extensión
      if (['pdf'].includes(extension) || mimeType.includes('pdf')) {
        return 'pdf';
      }
      
      if (['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'].includes(extension) || mimeType.includes('image')) {
        return 'image';
      }
      
      if (['doc', 'docx', 'txt', 'rtf'].includes(extension) || mimeType.includes('document') || mimeType.includes('text')) {
        return 'document';
      }
      
      if (['mp4', 'avi', 'mov', 'wmv'].includes(extension) || mimeType.includes('video')) {
        return 'video';
      }
      
      if (['mp3', 'wav', 'ogg', 'flac'].includes(extension) || mimeType.includes('audio')) {
        return 'audio';
      }
      
      return 'other';
    }



    // Variables globales para ROI
    let roiEmployees = {};
    let roiAgents = {};
    
    // Definición de agentes disponibles (misma data que la galería)
    const availableAgents = [
      {
        id: 'agente-inspeccion-visual-ia',
        name: 'Agente de Inspección Visual con Inteligencia Artificial',
        category: 'Automatización Industrial',
        icon: '👁️',
        description: 'Utiliza visión por computadora y deep learning para detectar defectos, mediciones y clasificar productos automáticamente',
        challenge: 'Las inspecciones visuales manuales son lentas, subjetivas y propensas a errores, especialmente en producciones de alto volumen.',
        solution: 'Sistema de visión artificial con IA que detecta defectos, mide dimensiones y clasifica productos en tiempo real con precisión superior al ojo humano.',
        basePrice: 74831,
        monthlyPrice: 14953,
        setupPrice: 18000,
        complexity: 'Advanced',
        estimatedHours: 50,
        estimatedDays: '7-10 días',
        features: [
          'Visión por computadora avanzada',
          'Deep learning para detección de defectos',
          'Clasificación automática de productos',
          'Mediciones precisas',
          'Integración con líneas de producción',
          'Reportes en tiempo real'
        ],
        benefits: [
          '99.5% precisión en detección',
          '80% reducción en productos defectuosos',
          'Inspección 10x más rápida',
          'Eliminación de subjetividad humana'
        ],
        requirements: [
          'Cámaras industriales de alta resolución',
          'Iluminación controlada',
          'GPU para procesamiento IA',
          'Integración con sistema MES'
        ]
      },
      {
        id: 'agente-prediccion-demanda-ml',
        name: 'Agente de Predicción de Demanda con Machine Learning',
        category: 'Automatización Industrial',
        icon: '📈',
        description: 'Predice demanda futura usando algoritmos de ML, considerando estacionalidad, tendencias y factores externos',
        challenge: 'La planificación de demanda manual es imprecisa y no considera múltiples variables que afectan las ventas.',
        solution: 'Algoritmos de machine learning que analizan históricos, tendencias y factores externos para predecir demanda con alta precisión.',
        basePrice: 75597,
        monthlyPrice: 14765,
        setupPrice: 19000,
        complexity: 'Advanced',
        estimatedHours: 48,
        estimatedDays: '6-8 días',
        features: [
          'Algoritmos de machine learning',
          'Análisis de estacionalidad',
          'Factores externos (clima, eventos)',
          'Predicciones multivariables',
          'Alertas de cambios de tendencia',
          'Integración con ERP/CRM'
        ],
        benefits: [
          '95% precisión en predicciones',
          '30% reducción en inventario excesivo',
          '25% mejora en nivel de servicio',
          'Optimización de capital de trabajo'
        ],
        requirements: [
          'Histórico de ventas mínimo 2 años',
          'Datos de factores externos',
          'Integración con sistemas de ventas',
          'Infraestructura de datos'
        ]
      },
      {
        id: 'agente-sincronizacion-erp',
        name: 'Agente de Sincronización Bidireccional ERP',
        category: 'Automatización Industrial',
        icon: '🔄',
        description: 'Sincroniza automáticamente datos entre múltiples sistemas ERP y aplicaciones, manteniendo consistencia en tiempo real',
        challenge: 'Mantener datos consistentes entre múltiples sistemas ERP causa errores y requiere trabajo manual intensivo.',
        solution: 'Sincronización automática bidireccional que mantiene consistencia de datos entre todos los sistemas en tiempo real.',
        basePrice: 74784,
        monthlyPrice: 13317,
        setupPrice: 17500,
        complexity: 'Advanced',
        estimatedHours: 45,
        estimatedDays: '6-8 días',
        features: [
          'Sincronización bidireccional',
          'Mapeo inteligente de campos',
          'Detección de conflictos',
          'Transformación de datos',
          'Monitoreo en tiempo real',
          'Logs de auditoría completos'
        ],
        benefits: [
          '99.9% consistencia de datos',
          '85% reducción en errores manuales',
          'Sincronización en tiempo real',
          'Ahorro de 40+ horas semanales'
        ],
        requirements: [
          'APIs de sistemas ERP',
          'Mapeo de estructura de datos',
          'Políticas de resolución de conflictos',
          'Infraestructura de integración'
        ]
      },
      {
        id: 'agente-reabastecimiento-inteligente',
        name: 'Agente de Reabastecimiento Inteligente',
        category: 'Gestión de Inventarios',
        icon: '🚛',
        description: 'Automatiza órdenes de compra basado en niveles de inventario, lead times y predicciones de demanda',
        challenge: 'La gestión manual de reabastecimiento causa stockouts y exceso de inventario por falta de optimización.',
        solution: 'Sistema inteligente que optimiza puntos de reorden considerando demanda, lead times y costos de inventario.',
        basePrice: 43150,
        monthlyPrice: 7731,
        setupPrice: 12000,
        complexity: 'Medium',
        estimatedHours: 35,
        estimatedDays: '4-6 días',
        features: [
          'Cálculo automático de puntos de reorden',
          'Optimización de cantidades',
          'Consideración de lead times variables',
          'Integración con proveedores',
          'Alertas proactivas',
          'Análisis de costos de inventario'
        ],
        benefits: [
          '95% reducción en stockouts',
          '30% optimización de inventario',
          '60% ahorro en tiempo de compras',
          'Mejora en rotación de inventario'
        ],
        requirements: [
          'Sistema de gestión de inventarios',
          'Datos de proveedores y lead times',
          'Integración con sistema de compras',
          'Configuración de políticas de inventario'
        ]
      },
      {
        id: 'agente-monitoreo-oee',
        name: 'Agente de Monitoreo OEE (Overall Equipment Effectiveness)',
        category: 'Mantenimiento Predictivo',
        icon: '⚙️',
        description: 'Supervisa y calcula automáticamente el OEE de líneas de producción, identificando pérdidas y oportunidades de mejora',
        challenge: 'El cálculo manual de OEE es tardío y no permite identificar oportunidades de mejora en tiempo real.',
        solution: 'Monitoreo continuo y cálculo automático de OEE con análisis de causas raíz y recomendaciones de mejora.',
        basePrice: 73879,
        monthlyPrice: 14118,
        setupPrice: 18500,
        complexity: 'Advanced',
        estimatedHours: 48,
        estimatedDays: '7-10 días',
        features: [
          'Cálculo automático de OEE',
          'Análisis de disponibilidad',
          'Medición de rendimiento',
          'Control de calidad integrado',
          'Identificación de pérdidas',
          'Dashboards en tiempo real'
        ],
        benefits: [
          '15-20% mejora en OEE',
          'Identificación inmediata de problemas',
          'Reducción de 50% en tiempo de análisis',
          'Optimización continua de producción'
        ],
        requirements: [
          'Sensores en equipos de producción',
          'Conexión con sistemas SCADA/MES',
          'Definición de parámetros de producción',
          'Integración con sistema de calidad'
        ]
      },
      {
        id: 'agente-trazabilidad-productos',
        name: 'Agente de Trazabilidad y Genealogía de Productos',
        category: 'Control de Calidad',
        icon: '🔍',
        description: 'Rastrea automáticamente cada producto desde materias primas hasta entrega final, manteniendo genealogía completa',
        challenge: 'La trazabilidad manual es incompleta y no permite respuesta rápida ante problemas de calidad o recalls.',
        solution: 'Sistema automático de trazabilidad que mantiene registro completo del historial de cada producto desde origen hasta cliente.',
        basePrice: 45313,
        monthlyPrice: 8631,
        setupPrice: 13500,
        complexity: 'Medium',
        estimatedHours: 38,
        estimatedDays: '5-7 días',
        features: [
          'Trazabilidad end-to-end',
          'Genealogía completa de productos',
          'Códigos únicos de identificación',
          'Seguimiento de materias primas',
          'Historial de procesos',
          'Capacidad de recall rápido'
        ],
        benefits: [
          'Trazabilidad 100% completa',
          '90% reducción en tiempo de recalls',
          'Cumplimiento regulatorio automático',
          'Mejora en control de calidad'
        ],
        requirements: [
          'Sistema de códigos únicos (RFID/QR)',
          'Lectores en puntos críticos',
          'Integración con MES/ERP',
          'Base de datos de trazabilidad'
        ]
      },
      {
        id: 'agente-optimizacion-energetico',
        name: 'Agente de Optimización de Consumo Energético',
        category: 'Gestión Energética',
        icon: '⚡',
        description: 'Optimiza automáticamente el consumo energético de la planta considerando tarifas, demanda y eficiencia de equipos',
        challenge: 'El consumo energético no optimizado representa costos elevados y desperdicio de recursos.',
        solution: 'Optimización automática del consumo energético considerando tarifas eléctricas, demanda de producción y eficiencia de equipos.',
        basePrice: 70268,
        monthlyPrice: 13455,
        setupPrice: 16800,
        complexity: 'Advanced',
        estimatedHours: 45,
        estimatedDays: '6-8 días',
        features: [
          'Monitoreo de consumo en tiempo real',
          'Optimización según tarifas eléctricas',
          'Control automático de equipos',
          'Análisis de eficiencia energética',
          'Programación inteligente de producción',
          'Reportes de ahorro energético'
        ],
        benefits: [
          '20-30% reducción en costos energéticos',
          'Optimización automática continua',
          'Mejora en huella de carbono',
          'ROI típico menor a 18 meses'
        ],
        requirements: [
          'Medidores inteligentes de energía',
          'Control automático de equipos',
          'Integración con sistema de producción',
          'Datos de tarifas eléctricas'
        ]
      },
      {
        id: 'agente-deteccion-vibraciones',
        name: 'Agente de Detección de Anomalías en Vibraciones',
        category: 'Mantenimiento Predictivo',
        icon: '📊',
        description: 'Analiza patrones de vibración de equipos rotativos para predecir fallas y programar mantenimiento preventivo',
        challenge: 'Las fallas inesperadas de equipos causan paros costosos y el mantenimiento reactivo es ineficiente.',
        solution: 'Análisis continuo de vibraciones con IA para detectar anomalías tempranas y predecir fallas antes de que ocurran.',
        basePrice: 71270,
        monthlyPrice: 13811,
        setupPrice: 17200,
        complexity: 'Advanced',
        estimatedHours: 46,
        estimatedDays: '6-9 días',
        features: [
          'Monitoreo continuo de vibraciones',
          'Análisis espectral automatizado',
          'Detección de anomalías con IA',
          'Predicción de fallas',
          'Alertas tempranas',
          'Programación automática de mantenimiento'
        ],
        benefits: [
          '85% reducción en paros no programados',
          '40% optimización de costos de mantenimiento',
          'Predicción de fallas 2-6 semanas antes',
          'Aumento de vida útil de equipos'
        ],
        requirements: [
          'Sensores de vibración en equipos críticos',
          'Conectividad IoT industrial',
          'Baseline de equipos en buen estado',
          'Integración con sistema CMMS'
        ]
      },
      {
        id: 'agente-optimizacion-lineas',
        name: 'Agente de Optimización de Líneas de Ensamble',
        category: 'Optimización de Producción',
        icon: '🏭',
        description: 'Optimiza automáticamente la secuencia y timing de líneas de ensamble para maximizar throughput y minimizar desperdicios',
        challenge: 'El balanceo manual de líneas es subóptimo y no se adapta a cambios en demanda o variaciones de proceso.',
        solution: 'Optimización continua y automática de líneas de ensamble considerando throughput, eficiencia y minimización de desperdicios.',
        basePrice: 72682,
        monthlyPrice: 14585,
        setupPrice: 17800,
        complexity: 'Advanced',
        estimatedHours: 50,
        estimatedDays: '7-10 días',
        features: [
          'Optimización automática de secuencias',
          'Balanceo dinámico de líneas',
          'Análisis de cuellos de botella',
          'Maximización de throughput',
          'Minimización de desperdicios',
          'Adaptación en tiempo real'
        ],
        benefits: [
          '15-25% aumento en throughput',
          '30% reducción en desperdicios',
          'Optimización continua automática',
          'Mejor utilización de recursos'
        ],
        requirements: [
          'Sensores de flujo en línea',
          'Sistema MES integrado',
          'Datos de tiempos de proceso',
          'Control automático de estaciones'
        ]
      }
    ];
    
    // Función para cambiar pestañas del ROI
    function showROITab(fieldName, tabName) {
      // Ocultar todas las pestañas
      const tabs = ['employees', 'agents', 'results'];
      tabs.forEach(tab => {
        const tabElement = document.getElementById(`${fieldName}-${tab}-tab`);
        if (tabElement) {
          tabElement.classList.add('hidden');
        }
      });
      
      // Mostrar la pestaña seleccionada
      const selectedTab = document.getElementById(`${fieldName}-${tabName}-tab`);
      if (selectedTab) {
        selectedTab.classList.remove('hidden');
      }
      
      // Actualizar estilos de botones
      const tabContainer = document.querySelector(`#${fieldName}-tab-content`).parentElement.querySelector('.flex.space-x-1');
      if (tabContainer) {
        const buttons = tabContainer.querySelectorAll('button');
        buttons.forEach((btn, index) => {
          if (index === tabs.indexOf(tabName)) {
            btn.className = 'flex-1 px-4 py-2 text-sm font-medium text-teal-600 bg-white rounded-md shadow-sm';
          } else {
            btn.className = 'flex-1 px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700';
          }
        });
      }
      
      // Si es la pestaña de agentes, cargar agentes
      if (tabName === 'agents') {
        loadAgentsForROI(fieldName);
      }
      
      // Si es la pestaña de resultados, recalcular
      if (tabName === 'results') {
        updateROICalculation(fieldName);
      }
    }
    
    // Función para cargar y mostrar agentes en la pestaña de agentes
    function loadAgentsForROI(fieldName) {
      const agentsContainer = document.getElementById(`${fieldName}-agents-container`);
      if (!agentsContainer) return;
      
      // Inicializar agentes seleccionados si no existe
      if (!roiAgents[fieldName]) {
        roiAgents[fieldName] = [];
      }
      
      // Limpiar contenedor
      agentsContainer.innerHTML = '';
      
      // Crear header
      const header = document.createElement('div');
      header.className = 'mb-4';
      header.innerHTML = `
        <div class="flex items-center justify-between mb-2">
          <h5 class="font-medium text-gray-900">Agentes Disponibles</h5>
          <span class="text-sm text-gray-500">${roiAgents[fieldName].length} seleccionados</span>
        </div>
        <p class="text-sm text-gray-600">Selecciona los agentes que se implementarán para calcular el ROI</p>
      `;
      agentsContainer.appendChild(header);
      
      // Crear grid de agentes
      const agentsGrid = document.createElement('div');
      agentsGrid.className = 'grid grid-cols-1 md:grid-cols-2 gap-4';
      
      availableAgents.forEach(agent => {
        const isSelected = roiAgents[fieldName].some(a => a.id === agent.id);
        
        const agentCard = document.createElement('div');
        agentCard.className = `border rounded-lg p-4 cursor-pointer transition-all ${
          isSelected 
            ? 'border-teal-500 bg-teal-50' 
            : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
        }`;
        agentCard.onclick = () => toggleAgentSelection(fieldName, agent);
        
        agentCard.innerHTML = `
          <div class="flex items-start space-x-3">
            <div class="text-2xl">${agent.icon}</div>
            <div class="flex-1 min-w-0">
              <div class="flex items-center space-x-2">
                <h6 class="font-medium text-gray-900 text-sm">${agent.name}</h6>
                ${isSelected ? '<span class="text-teal-600">✓</span>' : ''}
              </div>
              <p class="text-xs text-gray-600 mt-1">${agent.description}</p>
              <div class="mt-2 flex items-center space-x-4 text-xs text-gray-500">
                <span>💰 $${agent.basePrice.toLocaleString()}</span>
                <span>📅 ${agent.estimatedDays}</span>
                <span class="px-2 py-1 bg-gray-100 rounded text-xs">${agent.category}</span>
              </div>
            </div>
          </div>
        `;
        
        agentsGrid.appendChild(agentCard);
      });
      
      agentsContainer.appendChild(agentsGrid);
    }
    
    // Función para alternar selección de agente
    function toggleAgentSelection(fieldName, agent) {
      if (!roiAgents[fieldName]) {
        roiAgents[fieldName] = [];
      }
      
      const existingIndex = roiAgents[fieldName].findIndex(a => a.id === agent.id);
      
      if (existingIndex >= 0) {
        // Remover agente
        roiAgents[fieldName].splice(existingIndex, 1);
      } else {
        // Agregar agente
        roiAgents[fieldName].push({
          id: agent.id,
          name: agent.name,
          basePrice: agent.basePrice,
          monthlyPrice: agent.monthlyPrice,
          setupPrice: agent.setupPrice,
          category: agent.category,
          benefits: agent.benefits
        });
      }
      
      // Recargar vista de agentes
      loadAgentsForROI(fieldName);
      
      console.log(`🤖 Agentes seleccionados para ${fieldName}:`, roiAgents[fieldName]);
    }
    
    // Función para agregar empleados
    function addEmployee(fieldName) {
      const nameInput = document.getElementById(`${fieldName}-emp-name`);
      const positionInput = document.getElementById(`${fieldName}-emp-position`);
      const salaryInput = document.getElementById(`${fieldName}-emp-salary`);
      const hoursInput = document.getElementById(`${fieldName}-emp-hours`);
      const percentageInput = document.getElementById(`${fieldName}-emp-percentage`);
      
      if (!nameInput || !positionInput || !salaryInput || !hoursInput || !percentageInput) {
        return;
      }
      
      const name = nameInput.value.trim();
      const position = positionInput.value.trim();
      const salary = parseFloat(salaryInput.value) || 0;
      const hours = parseFloat(hoursInput.value) || 160;
      const percentage = parseFloat(percentageInput.value) || 0;
      
      if (!name || !position || salary <= 0 || percentage <= 0) {
        alert('Por favor completa todos los campos requeridos');
        return;
      }
      
      // Inicializar array si no existe
      if (!roiEmployees[fieldName]) {
        roiEmployees[fieldName] = [];
      }
      
      // Agregar empleado
      const employee = {
        id: Date.now().toString(),
        name,
        position,
        monthlySalary: salary,
        hoursPerMonth: hours,
        hourlyRate: salary / hours,
        affectedPercentage: percentage
      };
      
      roiEmployees[fieldName].push(employee);
      
      // Limpiar formulario
      nameInput.value = '';
      positionInput.value = '';
      salaryInput.value = '';
      hoursInput.value = '160';
      percentageInput.value = '';
      
      // Actualizar lista de empleados
      updateEmployeesList(fieldName);
      
      // Recalcular ROI
      updateROICalculation(fieldName);
    }
    
    // Función para actualizar lista de empleados
    function updateEmployeesList(fieldName) {
      const listContainer = document.getElementById(`${fieldName}-employees-list`);
      if (!listContainer) return;
      
      const employees = roiEmployees[fieldName] || [];
      
      if (employees.length === 0) {
        listContainer.innerHTML = '<div class="text-center text-gray-500 py-8">No hay empleados agregados. Agrega empleados para calcular el ROI.</div>';
        return;
      }
      
      listContainer.innerHTML = employees.map(emp => `
        <div class="bg-white border border-gray-200 rounded-lg p-4">
          <div class="flex items-center justify-between">
            <div class="flex-1">
              <div class="flex items-center space-x-4">
                <div class="flex-1">
                  <h6 class="font-medium text-gray-900">${emp.name}</h6>
                  <p class="text-sm text-gray-600">${emp.position}</p>
                </div>
                <div class="text-right">
                  <div class="text-sm font-medium text-gray-900">$${emp.monthlySalary.toLocaleString()}/mes</div>
                  <div class="text-xs text-gray-500">${emp.hoursPerMonth} hrs/mes</div>
                </div>
                <div class="text-right">
                  <div class="text-sm font-medium text-teal-600">${emp.affectedPercentage}%</div>
                  <div class="text-xs text-gray-500">Afectado</div>
                </div>
              </div>
            </div>
            <button 
              onclick="removeEmployee('${fieldName}', '${emp.id}')"
              class="ml-4 text-red-500 hover:text-red-700 p-1"
              title="Eliminar empleado"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
              </svg>
            </button>
          </div>
        </div>
      `).join('');
    }
    
    // Función para eliminar empleado
    function removeEmployee(fieldName, employeeId) {
      if (!roiEmployees[fieldName]) return;
      
      roiEmployees[fieldName] = roiEmployees[fieldName].filter(emp => emp.id !== employeeId);
      updateEmployeesList(fieldName);
      updateROICalculation(fieldName);
    }
    
    // Actualizar cálculo ROI
    function updateROICalculation(fieldName) {
      const employees = roiEmployees[fieldName] || [];
      const agents = roiAgents[fieldName] || [];
      const resultsContainer = document.getElementById(`${fieldName}-roi-results`);
      
      if (employees.length === 0 && agents.length === 0) {
        // Mostrar valores por defecto
        if (resultsContainer) {
          resultsContainer.innerHTML = `
            <div class="bg-teal-50 p-4 rounded-lg text-center">
              <div class="text-2xl font-bold text-teal-600">0%</div>
              <div class="text-sm text-teal-800">ROI Anual</div>
            </div>
            <div class="bg-emerald-50 p-4 rounded-lg text-center">
              <div class="text-2xl font-bold text-emerald-600">0</div>
              <div class="text-sm text-emerald-800">Meses de Recuperación</div>
            </div>
            <div class="bg-blue-50 p-4 rounded-lg text-center">
              <div class="text-2xl font-bold text-blue-600">$0</div>
              <div class="text-sm text-blue-800">Ahorro Anual</div>
            </div>
          `;
        }
        
        // Guardar datos vacíos
        const hiddenInput = document.getElementById(fieldName);
        if (hiddenInput) {
          hiddenInput.value = JSON.stringify({
            employees: [],
            agents: [],
            roiPercentage: 0,
            paybackMonths: 0,
            annualSavings: 0,
            calculatedAt: new Date().toISOString()
          });
        }
        
        return;
      }
      
      // Calcular métricas de empleados
      const totalMonthlyCost = employees.reduce((sum, emp) => sum + emp.monthlySalary, 0);
      const totalAffectedCost = employees.reduce((sum, emp) => sum + (emp.monthlySalary * emp.affectedPercentage / 100), 0);
      
      // Calcular costos de agentes
      const totalAgentSetupCost = agents.reduce((sum, agent) => sum + agent.setupPrice, 0);
      const totalAgentBaseCost = agents.reduce((sum, agent) => sum + agent.basePrice, 0);
      const totalAgentMonthlyCost = agents.reduce((sum, agent) => sum + agent.monthlyPrice, 0);
      
      // 🔧 CÁLCULO CORREGIDO DE AHORROS
      
      // Ahorros de empleados: Solo del costo afectado, más agresivo (40-60% de ahorro)
      const automationSavingPercentage = 50; // Más realista para automatización
      const employeeMonthlySavings = totalAffectedCost * (automationSavingPercentage / 100);
      
      // Ahorros de agentes: Basado en beneficios reales documentados
      const agentMonthlySavings = agents.reduce((sum, agent) => {
        let monthlySaving = 0;
        
        // Cálculo basado en el tipo de agente y sus beneficios documentados
        switch(agent.id) {
          case 'ap-301': // Cuentas por pagar: 20-30 horas semanales
            monthlySaving = 25 * 4 * 500; // 25 horas/semana * 4 semanas * $500/hora estimado
            break;
          case 'bank-reconciliation': // Conciliación: 15-20 horas semanales  
            monthlySaving = 17 * 4 * 400; // 17 horas/semana * 4 semanas * $400/hora
            break;
          case 'logistics-tracking': // Logística: 10-15 horas semanales
            monthlySaving = 12 * 4 * 350; // 12 horas/semana * 4 semanas * $350/hora
            break;
          case 'customer-support-ai': // Soporte: 25-30 horas semanales
            monthlySaving = 27 * 4 * 300; // 27 horas/semana * 4 semanas * $300/hora
            break;
          case 'inventory-sync': // Inventario: 20-25 horas semanales
            monthlySaving = 22 * 4 * 450; // 22 horas/semana * 4 semanas * $450/hora
            break;
          case 'quality-control-ai': // Calidad: 30-35 horas semanales
            monthlySaving = 32 * 4 * 600; // 32 horas/semana * 4 semanas * $600/hora
            break;
          default:
            // Fallback: 20% del costo base anual
            monthlySaving = (agent.basePrice * 0.30) / 12; // 30% anual más agresivo
        }
        
        return sum + monthlySaving;
      }, 0);
      
      const totalMonthlySavings = employeeMonthlySavings + agentMonthlySavings;
      const annualSavings = totalMonthlySavings * 12;
      
      // 🔧 CÁLCULO CORREGIDO DE INVERSIÓN
      
      // Inversión de empleados: Solo entrenamiento/transición (no 3 meses completos)
      const employeeInvestment = totalAffectedCost * 0.5; // 50% de 1 mes del costo afectado
      
      // Inversión de agentes: Setup + implementación (no costo base completo)
      const agentInvestment = totalAgentSetupCost + (totalAgentBaseCost * 0.3); // 30% del costo base
      
      const totalInvestment = employeeInvestment + agentInvestment;
      
      // Calcular ROI
      const roi = totalInvestment > 0 ? ((annualSavings - totalInvestment) / totalInvestment * 100) : 0;
      const paybackMonths = totalMonthlySavings > 0 ? Math.ceil(totalInvestment / totalMonthlySavings) : 0;
      const netPresentValue = annualSavings * 3 - totalInvestment; // Simplificado a 3 años
      
      // Actualizar resultados visuales
      if (resultsContainer) {
        resultsContainer.innerHTML = `
          <div class="bg-teal-50 p-4 rounded-lg text-center">
            <div class="text-2xl font-bold text-teal-600">${roi.toFixed(1)}%</div>
            <div class="text-sm text-teal-800">ROI Anual</div>
          </div>
          <div class="bg-emerald-50 p-4 rounded-lg text-center">
            <div class="text-2xl font-bold text-emerald-600">${paybackMonths}</div>
            <div class="text-sm text-emerald-800">Meses de Recuperación</div>
          </div>
          <div class="bg-blue-50 p-4 rounded-lg text-center">
            <div class="text-2xl font-bold text-blue-600">$${annualSavings.toLocaleString()}</div>
            <div class="text-sm text-blue-800">Ahorro Anual</div>
          </div>
          <div class="bg-purple-50 p-4 rounded-lg text-center">
            <div class="text-2xl font-bold text-purple-600">$${totalInvestment.toLocaleString()}</div>
            <div class="text-sm text-purple-800">Inversión Total</div>
          </div>
          <div class="bg-orange-50 p-4 rounded-lg text-center">
            <div class="text-2xl font-bold text-orange-600">$${(totalMonthlyCost + totalAgentMonthlyCost).toLocaleString()}</div>
            <div class="text-sm text-orange-800">Costo Mensual Total</div>
          </div>
          <div class="bg-green-50 p-4 rounded-lg text-center">
            <div class="text-2xl font-bold text-green-600">$${netPresentValue.toLocaleString()}</div>
            <div class="text-sm text-green-800">VPN (3 años)</div>
          </div>
          ${agents.length > 0 ? `
          <div class="bg-indigo-50 p-4 rounded-lg text-center">
            <div class="text-2xl font-bold text-indigo-600">${agents.length}</div>
            <div class="text-sm text-indigo-800">Agentes Seleccionados</div>
          </div>
          <div class="bg-cyan-50 p-4 rounded-lg text-center">
            <div class="text-2xl font-bold text-cyan-600">$${agentMonthlySavings.toLocaleString()}</div>
            <div class="text-sm text-cyan-800">Ahorro por Agentes</div>
          </div>
          ` : ''}
        `;
    }
      
      // Crear objeto de datos completo
      const roiData = {
        employees: employees,
        selectedAgents: agents,
        currentMonthlyCosts: totalMonthlyCost,
        projectedMonthlySavings: totalMonthlySavings,
        totalImplementationCost: totalInvestment,
        monthlyMaintenanceCost: totalAgentMonthlyCost,
        roiPercentage: roi,
        paybackMonths: paybackMonths,
        netPresentValue: netPresentValue,
        internalRateOfReturn: roi, // Simplificado
        fiveYearSavings: annualSavings * 5,
        agentDetails: {
          totalAgentSetupCost: totalAgentSetupCost,
          totalAgentBaseCost: totalAgentBaseCost,
          totalAgentMonthlyCost: totalAgentMonthlyCost,
          employeeMonthlySavings: employeeMonthlySavings,
          agentMonthlySavings: agentMonthlySavings,
          agentCount: agents.length
        },
        calculations: {
          currentAnnualCost: (totalMonthlyCost + totalAgentMonthlyCost) * 12,
          projectedAnnualSavings: annualSavings,
          totalAnnualSavings: annualSavings,
          breakEvenPoint: paybackMonths,
          efficiencyGain: automationSavingPercentage,
          errorReductionValue: totalMonthlySavings * 0.2, // 20% del ahorro por reducción de errores
          productivityValue: totalMonthlySavings * 0.8 // 80% del ahorro por productividad
        },
        charts: {
          savingsOverTime: Array.from({length: 12}, (_, i) => ({
            month: i + 1,
            cumulativeSavings: (i + 1) * totalMonthlySavings,
            monthlySavings: totalMonthlySavings,
            roi: totalInvestment > 0 ? (((i + 1) * totalMonthlySavings - totalInvestment) / totalInvestment * 100) : 0
          })),
          costBreakdown: {
            implementation: totalInvestment,
            maintenance: totalAgentMonthlyCost,
            currentOperational: totalMonthlyCost,
            projectedOperational: totalMonthlyCost - totalMonthlySavings,
            agentCosts: agentInvestment
          },
          benefitsBreakdown: {
            timeSavings: totalMonthlySavings * 0.6,
            errorReduction: totalMonthlySavings * 0.2,
            productivityIncrease: totalMonthlySavings * 0.15,
            otherBenefits: totalMonthlySavings * 0.05,
            employeeSavings: employeeMonthlySavings,
            agentSavings: agentMonthlySavings
          }
        },
        calculatedAt: new Date().toISOString()
      };
      
      // Mostrar información de depuración
      console.log(`🧮 ROI Debug para ${fieldName}:`);
      console.log(`👥 Empleados: ${employees.length}, Costo total: $${totalMonthlyCost.toLocaleString()}, Costo afectado: $${totalAffectedCost.toLocaleString()}`);
      console.log(`🤖 Agentes: ${agents.length}, Setup: $${totalAgentSetupCost.toLocaleString()}, Base: $${totalAgentBaseCost.toLocaleString()}, Mensual: $${totalAgentMonthlyCost.toLocaleString()}`);
      console.log(`💰 Ahorros mensuales: Empleados $${employeeMonthlySavings.toLocaleString()}, Agentes $${agentMonthlySavings.toLocaleString()}, Total $${totalMonthlySavings.toLocaleString()}`);
      console.log(`📊 Inversión: Empleados $${employeeInvestment.toLocaleString()}, Agentes $${agentInvestment.toLocaleString()}, Total $${totalInvestment.toLocaleString()}`);
      console.log(`📈 Resultado: ROI ${roi.toFixed(1)}%, Payback ${paybackMonths} meses, Ahorro anual $${annualSavings.toLocaleString()}`);
      
      // Guardar datos en input hidden
      const hiddenInput = document.getElementById(fieldName);
      if (hiddenInput) {
        hiddenInput.value = JSON.stringify(roiData);
      }
      
      console.log(`📄 ROI calculado para ${fieldName}:`, roiData);
    }

    async function handleDocumentFormSubmit(e) {
      e.preventDefault();
      
      const submitButton = e.target.querySelector('button[type="submit"]');
      const originalText = submitButton ? submitButton.innerHTML : 'Crear Documento';
      
      try {
        // Mostrar loading
        if (submitButton) {
          submitButton.innerHTML = `
            <svg class="animate-spin -ml-1 mr-3 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Creando Documento...
          `;
          submitButton.disabled = true;
        }
        
        console.log('🚀 Iniciando creación de documento...');
        console.log('📋 Orden seleccionada:', selectedOrder);
        console.log('📄 Tipo de documento seleccionado:', selectedDocumentType);
        
        // Recopilar datos del formulario
        const formData = new FormData(e.target);
        const documentData = {
          documentTypeId: selectedDocumentType.id,
          orderId: selectedOrder.id,
          title: formData.get('title'),
          description: formData.get('description'),
          sharedData: {
            orderNumber: selectedOrder.orderNumber,
            clientName: selectedOrder.client?.companyName,
            orderTitle: selectedOrder.title,
            createdDate: new Date().toISOString()
          },
          specificData: {}
        };
        
        // Agregar campos específicos del formulario
        for (let [key, value] of formData.entries()) {
          if (key !== 'title' && key !== 'description') {
            // Intentar parsear JSON para campos especiales
            try {
              const parsedValue = JSON.parse(value);
              documentData.specificData[key] = parsedValue;
            } catch (e) {
              // Si no es JSON, usar el valor tal como está
              documentData.specificData[key] = value;
            }
          }
        }

        // Procesar archivos adjuntos
        const attachmentFields = document.querySelectorAll('.attachment-field');
        attachmentFields.forEach(container => {
          const fieldName = container.getAttribute('data-field-name');
          const hiddenInput = document.getElementById(fieldName);
          if (hiddenInput && hiddenInput.value) {
            try {
              const attachmentData = JSON.parse(hiddenInput.value);
              documentData.specificData[fieldName] = attachmentData;
              console.log(`Archivos procesados para ${fieldName}:`, attachmentData);
            } catch (e) {
              console.warn(`Error procesando archivos para ${fieldName}:`, e);
            }
          }
        });

        // Procesar datos de ROI
        const roiFields = document.querySelectorAll('.roi-calculator-field');
        roiFields.forEach(container => {
          const fieldName = container.getAttribute('data-field-name');
          const hiddenInput = document.getElementById(fieldName);
          if (hiddenInput && hiddenInput.value) {
            try {
              const roiData = JSON.parse(hiddenInput.value);
              documentData.specificData[fieldName] = roiData;
              console.log(`Datos ROI procesados para ${fieldName}:`, roiData);
            } catch (e) {
              console.warn(`Error procesando ROI para ${fieldName}:`, e);
            }
          }
        });

        // 💰 Procesar datos del cotizador AIM
        const aimQuoteFields = document.querySelectorAll('.aim-quote-calculator-field');
        aimQuoteFields.forEach(container => {
          const fieldName = container.getAttribute('data-field-name');
          const hiddenInput = document.getElementById(fieldName);
          if (hiddenInput && hiddenInput.value) {
            try {
              const quoteData = JSON.parse(hiddenInput.value);
              documentData.specificData[fieldName] = quoteData;
              console.log(`💰 Datos del cotizador AIM procesados para ${fieldName}:`, quoteData);
            } catch (e) {
              console.warn(`⚠️ Error procesando cotizador AIM para ${fieldName}:`, e);
            }
          }
        });

        // 💰 También buscar en window.aimQuoteData como fallback
        if (window.aimQuoteData && Object.keys(window.aimQuoteData).length > 0) {
          console.log(`💰 Datos adicionales del cotizador encontrados en window.aimQuoteData:`, window.aimQuoteData);
          Object.keys(window.aimQuoteData).forEach(fieldName => {
            const quoteData = window.aimQuoteData[fieldName];
            if (quoteData && (quoteData.selectedAgents || quoteData.selectedPlan || quoteData.selectedServices)) {
              // Solo sobrescribir si no existe ya en specificData
              if (!documentData.specificData[fieldName]) {
                documentData.specificData[fieldName] = quoteData;
                console.log(`💰 Datos del cotizador guardados desde window.aimQuoteData para ${fieldName}:`, quoteData);
              }
            }
          });
        }
        
        console.log('📝 Datos del documento a crear:', documentData);
        
        // Crear el documento
        const newDocument = await window.documentsApi.createDocument(documentData);
        console.log('✅ Documento creado, respuesta del servidor:', newDocument);
        
        // Actualizar la lista de documentos local
        documents.push(newDocument);
        createdDocument = newDocument;
        console.log('📊 Lista de documentos actualizada, total:', documents.length);
        
        // Cerrar modal y mostrar vista previa
        document.getElementById('modalCrearDocumentos').classList.add('hidden');
        mostrarVistaPrevia(newDocument);
        
        // Refrescar datos para actualizar contadores
        console.log('🔄 Refrescando datos...');
        await refreshData();
        
        // Forzar actualización de la tabla de órdenes
        renderOrdersTable();
        
        showSuccess(`Documento "${documentData.title}" creado exitosamente`);
        
      } catch (error) {
        console.error('❌ Error creando documento:', error);
        showError('Error al crear el documento: ' + error.message);
      } finally {
        // Restaurar botón
        if (submitButton) {
          submitButton.innerHTML = originalText;
          submitButton.disabled = false;
        }
      }
    }

    async function mostrarVistaPrevia(documento) {
      const modal = document.getElementById('modalVistaPrevia');
      const contenido = document.getElementById('contenidoModalPrevia');
      
      // Mostrar loading mientras se genera el contenido
      contenido.innerHTML = `
        <div class="flex items-center justify-center min-h-[400px]">
          <div class="text-center">
            <div class="animate-spin rounded-full h-32 w-32 border-b-2 border-teal-600 mx-auto mb-4"></div>
            <p class="text-gray-600">Generando vista previa del documento...</p>
          </div>
        </div>
      `;
      
      modal.classList.remove('hidden');
      
      try {
        // 🎯 MEJORA: Generar contenido HTML integrado con datos específicos del tipo de documento
        let htmlContentWithSpecific = '';
        
        try {
          // Intentar obtener el contenido desde el backend
          const generatedContent = await window.documentsApi.generateDocument(documento.id, { format: 'html' });
          
          if (generatedContent.content) {
            htmlContentWithSpecific = generatedContent.content;
          } else if (generatedContent.url) {
            const response = await fetch(generatedContent.url);
            if (response.ok) {
              htmlContentWithSpecific = await response.text();
            }
          }
        } catch (backendError) {
          console.warn('⚠️ Error obteniendo contenido del backend, usando fallback:', backendError);
        }
        
        // Si no hay contenido del backend, usar fallback
        if (!htmlContentWithSpecific) {
          htmlContentWithSpecific = renderFallbackContent(documento);
        }
        
        // 🎯 CRÍTICO: Integrar contenido específico según el tipo de documento
        console.log(`🎯 Integrando contenido específico en vista previa para documento ${documento.id}`);
        htmlContentWithSpecific = await integrarContenidoEspecifico(documento.id, htmlContentWithSpecific);
        
        contenido.innerHTML = `
          <div class="space-y-6">
            <!-- Header del documento -->
            <div class="bg-gradient-to-r from-teal-500 to-emerald-500 text-white p-6 rounded-lg">
              <div class="flex items-center justify-between">
                <div>
                  <h3 class="text-xl font-bold">${documento.title}</h3>
                  <p class="text-teal-100 mt-1">${documento.documentType?.name || 'Documento'}</p>
                  <div class="flex items-center space-x-4 mt-2 text-sm">
                    <span class="flex items-center">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                      ${documento.documentNumber}
                    </span>
                    <span class="flex items-center">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                      ${formatDate(documento.createdAt)}
                    </span>
                  </div>
                </div>
                <div class="text-right">
                  <span class="px-3 py-1 bg-white bg-opacity-20 rounded-full text-sm font-medium">
                    ${getStatusLabel(documento.status)}
                  </span>
                </div>
              </div>
            </div>

            <!-- 🎯 Contenido generado del documento CON CONTENIDO ESPECÍFICO POR TIPO -->
            <div class="bg-white border border-gray-200 rounded-lg overflow-hidden">
              <div class="document-content max-w-none prose prose-sm max-w-none" style="
                font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
                line-height: 1.6;
                color: #374151;
                width: 100%;
                min-height: 800px;
                padding: 20px;
              ">
                ${htmlContentWithSpecific}
              </div>
            </div>

            <!-- Botones de acción -->
            <div class="flex justify-center space-x-4">
              <button 
                onclick="descargarDocumento('${documento.id}', 'pdf')"
                class="flex items-center px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Descargar PDF
              </button>
              
              <button 
                onclick="descargarDocumentoHTML('${documento.id}')"
                class="flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
                </svg>
                Descargar HTML
              </button>
              
              <button 
                onclick="finalizarDocumento('${documento.id}')"
                class="flex items-center px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Finalizar Documento
              </button>
            </div>
          </div>
        `;
      } catch (error) {
        console.error('Error generando vista previa:', error);
        // Mostrar contenido de fallback si falla la generación
        contenido.innerHTML = `
          <div class="space-y-6">
            ${renderDocumentFallback(documento)}
          </div>
        `;
      }
    }

    function renderDocumentSpecificData(specificData) {
      if (!specificData || typeof specificData !== 'object') {
        return '<p class="text-gray-500">No hay datos específicos disponibles</p>';
      }
      
      return Object.entries(specificData).map(([key, value]) => {
        const label = formatFieldName(key);
        const formattedValue = formatFieldValue(key, value);
        return `
          <div class="mb-4 p-3 bg-gray-50 rounded-lg">
            <span class="font-semibold text-gray-800 block mb-1">${label}:</span>
            <span class="text-gray-700 text-sm">${formattedValue}</span>
          </div>
        `;
      }).join('');
    }

    // Función para formatear valores de campos específicos
    function formatFieldValue(fieldName, value) {
      if (value === null || value === undefined || value === '') {
        return 'No especificado';
      }

      // Formatear valores numéricos con decimales
      if (typeof value === 'number') {
        // Si es un porcentaje o ROI
        if (fieldName.includes('roi') || fieldName.includes('percentage') || fieldName.includes('rate')) {
          return `${value.toFixed(2)}%`;
        }
        // Si es un costo o valor monetario
        if (fieldName.includes('cost') || fieldName.includes('value') || fieldName.includes('price') || fieldName.includes('budget') || fieldName.includes('savings')) {
          return `$${value.toLocaleString('es-MX', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
        }
        // Si es tiempo en horas
        if (fieldName.includes('hours') || fieldName.includes('time')) {
          return `${value} horas`;
        }
        // Si es tiempo en días
        if (fieldName.includes('days') || fieldName.includes('period')) {
          return `${value} días`;
        }
        // Número general
        return value.toLocaleString('es-MX');
      }

      // Formatear fechas
      if (typeof value === 'string' && /^\d{4}-\d{2}-\d{2}/.test(value)) {
        try {
          const date = new Date(value);
          return date.toLocaleDateString('es-ES', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          });
        } catch (e) {
          return value;
        }
      }

      // Formatear arrays
      if (Array.isArray(value)) {
        return value.length > 0 ? value.join(', ') : 'Ninguno';
      }

      // Formatear objetos
      if (typeof value === 'object') {
        return JSON.stringify(value, null, 2);
      }

      // Formatear booleanos
      if (typeof value === 'boolean') {
        return value ? 'Sí' : 'No';
      }

      // Valor string general
      return value.toString();
    }

    function renderFallbackContent(documento) {
      return `
        <div class="document-container" style="max-width: 216mm; width: 216mm; margin: 0 auto; padding: 20mm; background: white; min-height: 279mm; position: relative;">
          <!-- Header del documento -->
          <div class="bg-gradient-to-r from-teal-500 to-emerald-500 text-white p-6 rounded-lg mb-8">
            <div class="flex items-center justify-between">
              <div>
                <h1 class="text-2xl font-bold mb-2">${documento.title}</h1>
                <p class="text-teal-100">${documento.documentType?.name || 'Documento'}</p>
                <div class="flex items-center space-x-4 mt-2 text-sm">
                  <span class="flex items-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    ${documento.documentNumber}
                  </span>
                  <span class="flex items-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    ${formatDate(documento.createdAt)}
                  </span>
                </div>
              </div>
              <div class="text-right">
                <span class="px-3 py-1 bg-white bg-opacity-20 rounded-full text-sm font-medium">
                  ${getStatusLabel(documento.status)}
                </span>
              </div>
            </div>
          </div>

          <!-- Información de la orden -->
          <div class="mb-8">
            <h4 class="text-lg font-semibold text-gray-900 mb-4">Información de la Orden</h4>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div class="bg-gray-50 p-4 rounded-lg">
                <span class="font-semibold text-gray-800 block mb-1">Número de Orden:</span>
                <span class="text-gray-700">${documento.order?.orderNumber || 'N/A'}</span>
              </div>
              <div class="bg-gray-50 p-4 rounded-lg">
                <span class="font-semibold text-gray-800 block mb-1">Cliente:</span>
                <span class="text-gray-700">${documento.order?.client?.companyName || 'N/A'}</span>
              </div>
              <div class="bg-gray-50 p-4 rounded-lg">
                <span class="font-semibold text-gray-800 block mb-1">Proyecto:</span>
                <span class="text-gray-700">${documento.order?.title || 'N/A'}</span>
              </div>
              <div class="bg-gray-50 p-4 rounded-lg">
                <span class="font-semibold text-gray-800 block mb-1">Fecha de Creación:</span>
                <span class="text-gray-700">${formatDate(documento.createdAt)}</span>
              </div>
              <div class="bg-gray-50 p-4 rounded-lg">
                <span class="font-semibold text-gray-800 block mb-1">Creado por:</span>
                <span class="text-gray-700">${documento.createdBy?.name || 'Sistema'}</span>
              </div>
              <div class="bg-gray-50 p-4 rounded-lg">
                <span class="font-semibold text-gray-800 block mb-1">Versión:</span>
                <span class="text-gray-700">${documento.version}</span>
              </div>
            </div>
          </div>

          <!-- Descripción -->
          ${documento.description ? `
            <div class="mb-8">
              <h4 class="text-lg font-semibold text-gray-900 mb-4">Descripción</h4>
              <div class="bg-gray-50 p-4 rounded-lg">
                <p class="text-gray-700">${documento.description}</p>
              </div>
            </div>
          ` : ''}



          <!-- Información adicional -->
          <div class="text-xs text-gray-500 border-t pt-4 mt-8">
            <div class="flex items-center justify-between">
              <p>Documento generado por AIM - Automatización Industrial Mireles</p>
              <p>Fecha de generación: ${formatDate(new Date().toISOString())}</p>
            </div>
          </div>
        </div>
      `;
    }

    function renderDocumentFallback(documento) {
      return `
        <!-- Header del documento -->
        <div class="bg-gradient-to-r from-teal-500 to-emerald-500 text-white p-6 rounded-lg">
          <div class="flex items-center justify-between">
            <div>
              <h3 class="text-xl font-bold">${documento.title}</h3>
              <p class="text-teal-100 mt-1">${documento.documentType?.name || 'Documento'}</p>
              <div class="flex items-center space-x-4 mt-2 text-sm">
                <span class="flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                  ${documento.documentNumber}
                </span>
                <span class="flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  ${formatDate(documento.createdAt)}
                </span>
              </div>
            </div>
            <div class="text-right">
              <span class="px-3 py-1 bg-white bg-opacity-20 rounded-full text-sm font-medium">
                ${getStatusLabel(documento.status)}
              </span>
            </div>
          </div>
        </div>

        <!-- Mensaje de error y contenido básico -->
        <div class="bg-white border border-gray-200 rounded-lg p-8">
          <div class="text-center mb-6">
            <div class="bg-orange-100 border border-orange-200 rounded-lg p-4 mb-4">
              <p class="text-orange-800">No se pudo cargar la vista previa completa. Mostrando información básica.</p>
            </div>
          </div>
          ${renderFallbackContent(documento)}
        </div>

        <!-- Botones de acción -->
        <div class="flex justify-center space-x-4">
          <button 
            onclick="descargarDocumento('${documento.id}', 'pdf')"
            class="flex items-center px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Descargar PDF
          </button>
          
          <button 
            onclick="descargarDocumentoHTML('${documento.id}')"
            class="flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
            </svg>
            Descargar HTML
          </button>
          
          <button 
            onclick="finalizarDocumento('${documento.id}')"
            class="flex items-center px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            Finalizar Documento
          </button>
        </div>
      `;
    }

    async function descargarDocumento(documentId, format) {
      try {
        showSuccess(`Preparando documento para imprimir...`);
        
        // Obtener el HTML del documento desde la vista previa
        const htmlContent = await obtenerHTMLVistaPrevia(documentId);
        
        // Crear PDF desde el HTML (abre el diálogo de impresión)
        await convertirHTMLaPDF(htmlContent);
        
        showSuccess('Documento preparado para imprimir/guardar como PDF');
      } catch (error) {
        console.error('Error preparando documento:', error);
        showError('Error al preparar el documento: ' + error.message);
      }
    }

    async function descargarDocumentoHTML(documentId) {
      try {
        showSuccess('Generando HTML...');
        
        // Obtener el HTML del documento desde la vista previa
        const htmlContent = await obtenerHTMLVistaPrevia(documentId);
        
        // Crear un HTML completo con estilos y metadatos
        const documento = documents.find(doc => doc.id === documentId);
        const fullHTML = `
          <!DOCTYPE html>
          <html lang="es">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>${documento?.title || 'Documento AIM'}</title>
            <style>
              @page {
                size: Letter;
                margin: 20mm;
              }
              
              * {
                box-sizing: border-box;
                margin: 0;
                padding: 0;
              }
              
              body {
                font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
                line-height: 1.6;
                color: #374151;
                background: white;
                width: 216mm;
                max-width: 216mm;
                margin: 0 auto;
                padding: 0;
              }
              
              .document-container {
                max-width: 216mm;
                width: 216mm;
                margin: 0 auto;
                padding: 20mm;
                background: white;
                min-height: 279mm;
                position: relative;
              }
              
              .bg-gradient-to-r {
                background: linear-gradient(135deg, #0d9488 0%, #059669 100%);
              }
              
              .from-teal-500 {
                background: linear-gradient(135deg, #0d9488 0%, #059669 100%);
              }
              
              .text-white {
                color: white;
              }
              
              .p-6 {
                padding: 1.5rem;
              }
              
              .rounded-lg {
                border-radius: 0.5rem;
              }
              
              .mb-8 {
                margin-bottom: 2rem;
              }
              
              .mb-4 {
                margin-bottom: 1rem;
              }
              
              .mb-2 {
                margin-bottom: 0.5rem;
              }
              
              .mb-1 {
                margin-bottom: 0.25rem;
              }
              
              .mt-2 {
                margin-top: 0.5rem;
              }
              
              .mt-8 {
                margin-top: 2rem;
              }
              
              .flex {
                display: flex;
              }
              
              .items-center {
                align-items: center;
              }
              
              .justify-between {
                justify-content: space-between;
              }
              
              .space-x-4 > * + * {
                margin-left: 1rem;
              }
              
              .text-2xl {
                font-size: 1.5rem;
                line-height: 2rem;
              }
              
              .text-lg {
                font-size: 1.125rem;
                line-height: 1.75rem;
              }
              
              .text-sm {
                font-size: 0.875rem;
                line-height: 1.25rem;
              }
              
              .text-xs {
                font-size: 0.75rem;
                line-height: 1rem;
              }
              
              .font-bold {
                font-weight: 700;
              }
              
              .font-semibold {
                font-weight: 600;
              }
              
              .text-teal-100 {
                color: #ccfbf1;
              }
              
              .text-gray-900 {
                color: #111827;
              }
              
              .text-gray-800 {
                color: #1f2937;
              }
              
              .text-gray-700 {
                color: #374151;
              }
              
              .text-gray-500 {
                color: #6b7280;
              }
              
              .grid {
                display: grid;
              }
              
              .grid-cols-1 {
                grid-template-columns: repeat(1, 1fr);
              }
              
              .grid-cols-2 {
                grid-template-columns: repeat(2, 1fr);
              }
              
              .grid-cols-3 {
                grid-template-columns: repeat(3, 1fr);
              }
              
              .gap-4 {
                gap: 1rem;
              }
              
              .bg-gray-50 {
                background-color: #f9fafb;
              }
              
              .p-4 {
                padding: 1rem;
              }
              
              .p-3 {
                padding: 0.75rem;
              }
              
              .pt-4 {
                padding-top: 1rem;
              }
              
              .block {
                display: block;
              }
              
              .border-t {
                border-top: 1px solid #e5e7eb;
              }
              
              .px-3 {
                padding-left: 0.75rem;
                padding-right: 0.75rem;
              }
              
              .py-1 {
                padding-top: 0.25rem;
                padding-bottom: 0.25rem;
              }
              
              .bg-white {
                background-color: white;
              }
              
              .bg-opacity-20 {
                background-color: rgba(255, 255, 255, 0.2);
              }
              
              .rounded-full {
                border-radius: 9999px;
              }
              
              .font-medium {
                font-weight: 500;
              }
              
              .text-right {
                text-align: right;
              }
              
              .w-4 {
                width: 1rem;
              }
              
              .h-4 {
                height: 1rem;
              }
              
              .mr-1 {
                margin-right: 0.25rem;
              }
              
              @media (min-width: 768px) {
                .md\\:grid-cols-2 {
                  grid-template-columns: repeat(2, 1fr);
                }
              }
              
              @media (min-width: 1024px) {
                .lg\\:grid-cols-3 {
                  grid-template-columns: repeat(3, 1fr);
                }
              }
              
              @media print {
                body {
                  padding: 0;
                  max-width: none;
                  width: 100%;
                }
                
                .document-container {
                  box-shadow: none;
                  border: none;
                }
                
                .bg-gradient-to-r {
                  background: #0d9488 !important;
                }
              }
            </style>
          </head>
          <body>
            ${htmlContent}
          </body>
          </html>
        `;
        
        // Crear un blob con el contenido HTML completo
        const blob = new Blob([fullHTML], { type: 'text/html;charset=utf-8' });
        
        // Crear un enlace temporal para descargar
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `documento_${documentId}.html`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        // Limpiar el URL del objeto
        URL.revokeObjectURL(link.href);
        
        showSuccess('Documento HTML descargado exitosamente');
      } catch (error) {
        console.error('Error descargando documento HTML:', error);
        showError('Error al descargar el documento HTML: ' + error.message);
      }
    }

    async function obtenerHTMLVistaPrevia(documentId) {
      try {
        // Obtener el contenido HTML del documento
        const generatedContent = await window.documentsApi.generateDocument(documentId, { format: 'html' });
        
        let htmlContent = '';
        
        // Si hay contenido directo, usarlo
        if (generatedContent.content) {
          htmlContent = generatedContent.content;
        }
        // Si hay URL, intentar obtener el contenido
        else if (generatedContent.url) {
          const response = await fetch(generatedContent.url);
          if (response.ok) {
            htmlContent = await response.text();
          }
        }
        // Si no hay contenido, usar el fallback
        else {
          const documento = documents.find(doc => doc.id === documentId);
          if (documento) {
            htmlContent = renderFallbackContent(documento);
          } else {
            throw new Error('No se pudo obtener el contenido del documento');
          }
        }
        
        // 🎯 PARCHE: Integrar contenido específico dinámicamente
        htmlContent = await integrarContenidoEspecifico(documentId, htmlContent);
        
        return htmlContent;
      } catch (error) {
        console.error('Error obteniendo HTML del documento:', error);
        throw error;
      }
    }

    // 🔥 FUNCIÓN INTELIGENTE: Integrar contenido específico según el tipo de documento
    async function integrarContenidoEspecifico(documentId, htmlContent) {
      try {
        console.log(`🎯 INICIANDO integración de contenido específico para documento ${documentId}`);
        
        // Obtener el documento completo con sus datos
        const documento = documents.find(doc => doc.id === documentId);
        console.log(`📄 Documento encontrado:`, documento);
        
        if (!documento) {
          console.log(`⚠️ No se encontró documento para ${documentId}`);
          return htmlContent;
        }
        
        // Determinar el tipo de documento
        const tipoDocumento = determinarTipoDocumento(documento);
        console.log(`📋 Tipo de documento detectado: ${tipoDocumento}`);
        
        // Integrar contenido específico según el tipo
        let htmlContenidoEspecifico = '';
        switch (tipoDocumento) {
          case 'cotizacion':
            htmlContenidoEspecifico = await integrarDatosCotizador(documento, htmlContent);
            break;
          
          case 'roi':
            htmlContenidoEspecifico = await integrarDatosROI(documento, htmlContent);
            break;
          
          default:
            // Para documentos normales, mostrar detalles estándar
            htmlContenidoEspecifico = integrarDetallesEstandar(documento, htmlContent);
            break;
        }
        
        // 📎 INTEGRAR ANEXOS/ATTACHMENTS (para todos los tipos de documentos)
        // TEMPORALMENTE COMENTADO: htmlContenidoEspecifico = integrarAnexos(documento, htmlContenidoEspecifico);
        
        return htmlContenidoEspecifico;
        
      } catch (error) {
        console.error('❌ Error CRÍTICO integrando contenido específico:', error);
        return htmlContent;
      }
    }

    // Función para determinar el tipo de documento
    function determinarTipoDocumento(documento) {
      const tipoNombre = documento.documentType?.name?.toLowerCase() || '';
      const tipoSlug = documento.documentType?.slug?.toLowerCase() || '';
      const titulo = documento.title?.toLowerCase() || '';
      
      // Detectar documentos de cotización
      if (tipoNombre.includes('cotiz') || 
          tipoNombre.includes('quote') || 
          tipoNombre.includes('presupuesto') ||
          tipoSlug.includes('cotiz') ||
          tipoSlug.includes('quote') ||
          titulo.includes('cotiz') ||
          titulo.includes('presupuesto')) {
        return 'cotizacion';
      }
      
      // Detectar documentos de ROI
      if (tipoNombre.includes('roi') || 
          tipoNombre.includes('retorno') || 
          tipoNombre.includes('inversion') ||
          tipoSlug.includes('roi') ||
          titulo.includes('roi') ||
          titulo.includes('retorno')) {
        return 'roi';
      }
      
      // Detectar por campos específicos en los datos
      if (documento.specificData) {
        const tieneDetosQuote = Object.keys(documento.specificData).some(key => {
          const data = documento.specificData[key];
          if (typeof data === 'string') {
            return data.includes('selectedAgents') || data.includes('selectedPlan') || data.includes('aimQuoteData');
          }
          return data && (data.selectedAgents || data.selectedPlan || data.selectedServices);
        });
        
        const tieneDatosROI = Object.keys(documento.specificData).some(key => {
          const data = documento.specificData[key];
          if (typeof data === 'string') {
            return data.includes('roiPercentage') || data.includes('paybackMonths') || data.includes('employees');
          }
          return data && (data.roiPercentage !== undefined || data.employees || data.calculations);
        });
        
        if (tieneDetosQuote) return 'cotizacion';
        if (tieneDatosROI) return 'roi';
      }
      
      return 'estandar';
    }

    // 💰 FUNCIÓN ESPECÍFICA: Integrar datos del cotizador (solo para cotizaciones)
    async function integrarDatosCotizador(documento, htmlContent) {
      try {
        console.log(`💰 Integrando datos de cotizador para documento de cotización`);
        
        // Buscar datos de cotizador en diferentes lugares posibles
        let cotizadorHTML = '';
        let cotizadorEncontrado = false;
        
        // 1. Buscar en document.specificData
        if (documento.specificData) {
          Object.keys(documento.specificData).forEach(fieldName => {
            const fieldData = documento.specificData[fieldName];
            
            // Verificar si es un campo de cotizador
            let quoteData = null;
            
            if (typeof fieldData === 'string' && (
                fieldData.includes('selectedAgents') || 
                fieldData.includes('selectedPlan') || 
                fieldData.includes('selectedServices') ||
                fieldData.includes('aimQuoteData')
              )) {
              try {
                quoteData = JSON.parse(fieldData);
              } catch (parseError) {
                console.warn(`⚠️ Error parseando string ${fieldName}:`, parseError);
              }
            } else if (typeof fieldData === 'object' && fieldData !== null && (
                fieldData.selectedAgents || 
                fieldData.selectedPlan || 
                fieldData.selectedServices ||
                fieldData.calculations
              )) {
              quoteData = fieldData;
            }
            
            if (quoteData && (quoteData.selectedAgents || quoteData.selectedPlan || quoteData.selectedServices)) {
              console.log(`✅ Datos de cotización válidos encontrados:`, quoteData);
              cotizadorEncontrado = true;
              
              // Generar HTML del cotizador
              const quoteHTML = generarHTMLCotizadorCompleto(quoteData, fieldName);
              cotizadorHTML += quoteHTML;
            }
          });
        }
        
        // 2. Buscar en window.aimQuoteData como fallback
        if (!cotizadorEncontrado && window.aimQuoteData) {
          Object.keys(window.aimQuoteData).forEach(fieldName => {
            const quoteData = window.aimQuoteData[fieldName];
            if (quoteData && (quoteData.selectedAgents || quoteData.selectedPlan || quoteData.selectedServices)) {
              console.log(`💰 Datos de cotizador encontrados en window.aimQuoteData:`, quoteData);
              cotizadorEncontrado = true;
              
              const quoteHTML = generarHTMLCotizadorCompleto(quoteData, fieldName);
              cotizadorHTML += quoteHTML;
            }
          });
        }
        
        // 3. Si encontramos datos, integrarlos en el HTML
        if (cotizadorHTML) {
          console.log(`✅ INTEGRANDO HTML del cotizador`);
          return reemplazarSeccionDetalles(htmlContent, cotizadorHTML);
        } else {
          console.log(`⚠️ NO se encontraron datos de cotizador`);
          return htmlContent;
        }
        
              } catch (error) {
          console.error('❌ Error integrando cotizador:', error);
          return htmlContent;
        }
      }

    // 📊 FUNCIÓN ESPECÍFICA: Integrar datos de ROI (solo para documentos de ROI)
    async function integrarDatosROI(documento, htmlContent) {
      try {
        console.log(`📊 Integrando datos de ROI para documento de análisis ROI`);
        
        // Buscar datos de ROI en diferentes lugares posibles
        let roiHTML = '';
        let roiEncontrado = false;
        
        // 1. Buscar en document.specificData
        if (documento.specificData) {
          Object.keys(documento.specificData).forEach(fieldName => {
            const fieldData = documento.specificData[fieldName];
            
            // Verificar si es un campo de ROI
            let roiData = null;
            
            if (typeof fieldData === 'string' && (
                fieldData.includes('roiPercentage') || 
                fieldData.includes('paybackMonths') || 
                fieldData.includes('employees') ||
                fieldData.includes('calculations')
              )) {
              try {
                roiData = JSON.parse(fieldData);
              } catch (parseError) {
                console.warn(`⚠️ Error parseando string ROI ${fieldName}:`, parseError);
              }
            } else if (typeof fieldData === 'object' && fieldData !== null && (
                fieldData.roiPercentage !== undefined || 
                fieldData.employees || 
                fieldData.calculations ||
                fieldData.paybackMonths !== undefined
              )) {
              roiData = fieldData;
            }
            
            if (roiData && (roiData.roiPercentage !== undefined || roiData.employees || roiData.calculations)) {
              console.log(`✅ Datos de ROI válidos encontrados:`, roiData);
              roiEncontrado = true;
              
              // Generar HTML del ROI
              const roiHTMLSection = generarHTMLROICompleto(roiData, fieldName);
              roiHTML += roiHTMLSection;
            }
          });
        }
        
        // 2. Si encontramos datos, integrarlos en el HTML
        if (roiHTML) {
          console.log(`✅ INTEGRANDO HTML de ROI`);
          return reemplazarSeccionDetalles(htmlContent, roiHTML);
        } else {
          console.log(`⚠️ NO se encontraron datos de ROI válidos`);
          return htmlContent;
        }
        
      } catch (error) {
        console.error('❌ Error integrando ROI:', error);
        return htmlContent;
      }
    }

    // 📄 FUNCIÓN ESPECÍFICA: Integrar detalles estándar (para documentos normales)
    function integrarDetallesEstandar(documento, htmlContent) {
      try {
        console.log(`📄 Integrando detalles estándar para documento normal`);
        
        // Generar HTML de detalles estándar
        let detallesHTML = '';
        
        if (documento.specificData && Object.keys(documento.specificData).length > 0) {
          detallesHTML = generarHTMLDetallesEstandar(documento.specificData);
        } else {
          detallesHTML = '';
        }
        
        return reemplazarSeccionDetalles(htmlContent, detallesHTML);
        
      } catch (error) {
        console.error('❌ Error integrando detalles estándar:', error);
        return htmlContent;
      }
    }

    // 🔧 FUNCIÓN AUXILIAR: Reemplazar la sección de detalles en el HTML
    function reemplazarSeccionDetalles(htmlContent, nuevoContenido) {
      try {
        // REEMPLAZAR la sección "Información del Documento" con el nuevo contenido
        const detallesPattern = /<div class="section">\s*<div class="section-header">\s*<div class="section-title">Información del Documento<\/div>\s*<\/div>\s*<div class="section-content">[\s\S]*?<\/div>\s*<\/div>/;
        
        if (detallesPattern.test(htmlContent)) {
          // Reemplazar la sección completa de "Información del Documento"
          htmlContent = htmlContent.replace(detallesPattern, nuevoContenido.trim());
          console.log(`✅ Sección "Información del Documento" reemplazada exitosamente`);
        } else if (htmlContent.includes('<!-- Footer -->')) {
          // Fallback: insertar antes del footer si no se encuentra la sección
          htmlContent = htmlContent.replace('<!-- Footer -->', `${nuevoContenido}\n\n          <!-- Footer -->`);
          console.log(`✅ Contenido integrado antes del footer (fallback)`);
        } else if (htmlContent.includes('<div class="footer">')) {
          // Fallback: insertar antes del div del footer
          htmlContent = htmlContent.replace('<div class="footer">', `${nuevoContenido}\n\n          <div class="footer">`);
          console.log(`✅ Contenido integrado antes del div footer (fallback)`);
        } else {
          htmlContent += `\n${nuevoContenido}`;
          console.log(`✅ Contenido agregado al final (fallback)`);
        }
        
        return htmlContent;
      } catch (error) {
        console.error('❌ Error reemplazando sección de detalles:', error);
        return htmlContent;
      }
    }

    // 📊 FUNCIÓN AUXILIAR: Generar HTML completo de ROI con gráficas
    function generarHTMLROICompleto(roiData, fieldName) {
      console.log(`📊 Generando HTML completo para ROI ${fieldName}`);
      
      // Asegurar que tenemos todos los datos necesarios
      const {
        employees = [],
        roiPercentage = 0,
        paybackMonths = 0,
        netPresentValue = 0,
        fiveYearSavings = 0,
        calculations = {},
        charts = {},
        calculatedAt = new Date().toISOString()
      } = roiData;
      
      // Calcular métricas adicionales si no están presentes
      const currentAnnualCost = calculations.currentAnnualCost || 0;
      const projectedAnnualSavings = calculations.projectedAnnualSavings || 0;
      const totalImplementationCost = roiData.totalImplementationCost || 0;
      const monthlyMaintenanceCost = roiData.monthlyMaintenanceCost || 0;
      
      return `
        <!-- Sección de Análisis ROI -->
        <div class="section">
          <div class="section-header">
            <div class="section-title">Análisis de Retorno de Inversión (ROI)</div>
          </div>
          <div class="section-content">
            <!-- Resumen ejecutivo ROI -->
            <div class="content-block">
              <div style="text-align: center; margin-bottom: 20px;">
                <h3 style="color: #1e293b; font-size: 18px; font-weight: 700; margin-bottom: 8px;">
                   Análisis de Retorno de Inversión (ROI)
                </h3>
                <p style="color: #64748b; font-size: 14px; font-style: italic;">
                  Análisis calculado el ${new Date(calculatedAt).toLocaleDateString('es-ES')}
                </p>
              </div>
              
              <!-- Métricas principales en grid -->
              <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 25px;">
                <div style="background: linear-gradient(135deg, #f0f9ff, #e0f2fe); border: 1px solid #0369a1; border-radius: 8px; padding: 15px; text-align: center;">
                  <div style="font-size: 28px; font-weight: 700; color: #0369a1; margin-bottom: 5px;">${roiPercentage.toFixed(1)}%</div>
                  <div style="font-size: 12px; color: #075985; font-weight: 600;">ROI Anual</div>
                </div>
                
                <div style="background: linear-gradient(135deg, #f0fdf4, #dcfce7); border: 1px solid #16a34a; border-radius: 8px; padding: 15px; text-align: center;">
                  <div style="font-size: 28px; font-weight: 700; color: #16a34a; margin-bottom: 5px;">${paybackMonths}</div>
                  <div style="font-size: 12px; color: #15803d; font-weight: 600;">Meses de Recuperación</div>
                </div>
                
                <div style="background: linear-gradient(135deg, #fefce8, #fef3c7); border: 1px solid #d97706; border-radius: 8px; padding: 15px; text-align: center;">
                  <div style="font-size: 28px; font-weight: 700; color: #d97706; margin-bottom: 5px;">$${projectedAnnualSavings.toLocaleString()}</div>
                  <div style="font-size: 12px; color: #a16207; font-weight: 600;">Ahorro Anual</div>
                </div>
                
                <div style="background: linear-gradient(135deg, #fdf2f8, #fce7f3); border: 1px solid #c026d3; border-radius: 8px; padding: 15px; text-align: center;">
                  <div style="font-size: 28px; font-weight: 700; color: #c026d3; margin-bottom: 5px;">$${netPresentValue.toLocaleString()}</div>
                  <div style="font-size: 12px; color: #a21caf; font-weight: 600;">Valor Presente Neto</div>
                </div>
              </div>
            </div>
            
            <!-- Desglose financiero -->
            <div class="specific-data">
              <div class="data-item">
                <div class="data-label">Costo operacional actual (anual):</div>
                <div class="data-value">$${currentAnnualCost.toLocaleString()} MXN</div>
              </div>
              
              <div class="data-item">
                <div class="data-label">Costo de implementación:</div>
                <div class="data-value">$${totalImplementationCost.toLocaleString()} MXN</div>
              </div>
              
              <div class="data-item">
                <div class="data-label">Ahorros proyectados (anuales):</div>
                <div class="data-value">$${projectedAnnualSavings.toLocaleString()} MXN</div>
              </div>
              
              <div class="data-item">
                <div class="data-label">Mantenimiento mensual:</div>
                <div class="data-value">$${monthlyMaintenanceCost.toLocaleString()} MXN/mes</div>
              </div>
              
              <div class="data-item" style="background: #f0f9ff; border-top: 2px solid #0369a1;">
                <div class="data-label" style="color: #075985; font-weight: 700;">Ahorros a 5 años:</div>
                <div class="data-value" style="color: #0369a1; font-weight: 700; font-size: 16px;">$${fiveYearSavings.toLocaleString()} MXN</div>
              </div>
            </div>
            
            <!-- Análisis de empleados (si hay datos) -->
            ${employees.length > 0 ? `
            <div class="content-block">
              <h4 style="font-weight: 600; color: #1e293b; font-size: 16px; margin-bottom: 15px;">Análisis por Empleado</h4>
              <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 12px;">
                ${employees.map(emp => `
                  <div style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 6px; padding: 12px;">
                    <div style="font-weight: 600; color: #334155; font-size: 14px; margin-bottom: 4px;">${emp.name}</div>
                    <div style="font-size: 12px; color: #64748b; margin-bottom: 8px;">${emp.position}</div>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 11px;">
                      <div>
                        <span style="color: #64748b;">Salario:</span><br>
                        <span style="font-weight: 600; color: #1e293b;">$${emp.monthlySalary?.toLocaleString() || 0}/mes</span>
                      </div>
                      <div>
                        <span style="color: #64748b;">% Afectado:</span><br>
                        <span style="font-weight: 600; color: #059669;">${emp.affectedPercentage || 0}%</span>
                      </div>
                    </div>
                  </div>
                `).join('')}
              </div>
            </div>
            ` : ''}
            
            <!-- Gráfica de ROI (representación textual) -->
            <div class="content-block">
              <h4 style="font-weight: 600; color: #1e293b; font-size: 16px; margin-bottom: 15px;">Proyección de Ahorros (12 meses)</h4>
              <div style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 8px; padding: 15px;">
                ${generarGraficaROITexto(charts.savingsOverTime || [])}
              </div>
            </div>
            
            <!-- Desglose de beneficios -->
            ${charts.benefitsBreakdown ? `
            <div class="content-block">
              <h4 style="font-weight: 600; color: #1e293b; font-size: 16px; margin-bottom: 15px;">Desglose de Beneficios</h4>
              <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
                <div style="background: #ecfdf5; border-left: 4px solid #10b981; padding: 10px;">
                  <div style="font-size: 12px; color: #065f46; font-weight: 600;">Ahorro de Tiempo</div>
                  <div style="font-size: 18px; font-weight: 700; color: #059669;">$${charts.benefitsBreakdown.timeSavings?.toLocaleString() || 0}</div>
                </div>
                <div style="background: #eff6ff; border-left: 4px solid #3b82f6; padding: 10px;">
                  <div style="font-size: 12px; color: #1e40af; font-weight: 600;">Reducción de Errores</div>
                  <div style="font-size: 18px; font-weight: 700; color: #2563eb;">$${charts.benefitsBreakdown.errorReduction?.toLocaleString() || 0}</div>
                </div>
                <div style="background: #fef3c7; border-left: 4px solid #f59e0b; padding: 10px;">
                  <div style="font-size: 12px; color: #92400e; font-weight: 600;">Aumento Productividad</div>
                  <div style="font-size: 18px; font-weight: 700; color: #d97706;">$${charts.benefitsBreakdown.productivityIncrease?.toLocaleString() || 0}</div>
                </div>
                <div style="background: #f3e8ff; border-left: 4px solid #8b5cf6; padding: 10px;">
                  <div style="font-size: 12px; color: #5b21b6; font-weight: 600;">Otros Beneficios</div>
                  <div style="font-size: 18px; font-weight: 700; color: #7c3aed;">$${charts.benefitsBreakdown.otherBenefits?.toLocaleString() || 0}</div>
                </div>
              </div>
            </div>
            ` : ''}
            
            <!-- Conclusiones y recomendaciones -->
            <div class="content-block">
              <h4 style="font-weight: 600; color: #1e293b; font-size: 16px; margin-bottom: 15px;">Conclusiones del Análisis</h4>
              <div style="background: #f0f9ff; border: 1px solid #0369a1; border-radius: 8px; padding: 15px;">
                ${generarConclusionesROI(roiData)}
              </div>
            </div>
          </div>
        </div>
      `;
    }

    // 📊 FUNCIÓN AUXILIAR: Generar gráfica de ROI en formato texto
    function generarGraficaROITexto(savingsData) {
      if (!savingsData || savingsData.length === 0) {
        return '<p style="text-align: center; color: #64748b; font-style: italic;">No hay datos de proyección disponibles</p>';
      }
      
      let html = '<div style="font-family: monospace; font-size: 11px; line-height: 1.4;">';
      html += '<div style="display: grid; grid-template-columns: auto 1fr auto; gap: 8px; align-items: center; margin-bottom: 5px;">';
      html += '<span style="font-weight: 600; color: #374151;">Mes</span>';
      html += '<span style="font-weight: 600; color: #374151; text-align: center;">Progreso de Ahorros</span>';
      html += '<span style="font-weight: 600; color: #374151;">Acumulado</span>';
      html += '</div>';
      
      const maxSavings = Math.max(...savingsData.map(d => d.cumulativeSavings || 0));
      
      savingsData.slice(0, 12).forEach((month, index) => {
        const progress = maxSavings > 0 ? (month.cumulativeSavings / maxSavings) * 100 : 0;
        const barLength = Math.round(progress / 5); // Escala de 20 caracteres max
        const bar = '█'.repeat(barLength) + '░'.repeat(20 - barLength);
        
        html += '<div style="display: grid; grid-template-columns: auto 1fr auto; gap: 8px; align-items: center; margin-bottom: 3px;">';
        html += `<span style="color: #64748b; width: 30px;">${index + 1}</span>`;
        html += `<span style="color: #059669; font-family: monospace;">${bar}</span>`;
        html += `<span style="color: #374151; font-weight: 600;">$${month.cumulativeSavings?.toLocaleString() || 0}</span>`;
        html += '</div>';
      });
      
      html += '</div>';
      return html;
    }

    // 📊 FUNCIÓN AUXILIAR: Generar conclusiones de ROI
    function generarConclusionesROI(roiData) {
      const roi = roiData.roiPercentage || 0;
      const payback = roiData.paybackMonths || 0;
      const employees = roiData.employees || [];
      const agents = roiData.selectedAgents || [];
      const agentDetails = roiData.agentDetails || {};
      const totalInvestment = roiData.totalImplementationCost || 0;
      const annualSavings = roiData.projectedMonthlySavings * 12 || 0;
      
      let conclusion = '';
      let riskLevel = '';
      
      // Análisis más detallado del ROI
      if (roi >= 200) {
        conclusion = '<strong>Oportunidad excepcional:</strong> El ROI proyectado es extremadamente alto, indicando beneficios muy significativos y rápida recuperación.';
        riskLevel = 'Riesgo bajo - Proyecto altamente recomendado';
      } else if (roi >= 100) {
        conclusion = '<strong>Excelente oportunidad de inversión:</strong> El ROI proyectado es muy alto, indicando beneficios significativos y sólida justificación.';
        riskLevel = 'Riesgo bajo - Proyecto recomendado';
      } else if (roi >= 50) {
        conclusion = '<strong>Buena oportunidad de inversión:</strong> El ROI es sólido y justifica claramente la implementación.';
        riskLevel = 'Riesgo moderado-bajo - Proyecto viable';
      } else if (roi >= 25) {
        conclusion = '<strong>Oportunidad moderada:</strong> El ROI es positivo y aceptable para proyectos de automatización.';
        riskLevel = 'Riesgo moderado - Requiere análisis detallado';
      } else if (roi >= 0) {
        conclusion = '<strong>Oportunidad marginal:</strong> El ROI es bajo pero positivo, se recomienda optimizar parámetros.';
        riskLevel = 'Riesgo alto - Considerar alternativas';
      } else {
        conclusion = '<strong>Requiere reevaluación:</strong> El ROI es negativo, se deben revisar los cálculos y parámetros.';
        riskLevel = 'Riesgo muy alto - No recomendado en condiciones actuales';
      }
      
      let paybackAnalysis = '';
      if (payback <= 6) {
        paybackAnalysis = 'La recuperación en menos de 6 meses es excepcional para proyectos de automatización.';
      } else if (payback <= 12) {
        paybackAnalysis = 'La recuperación de la inversión en menos de un año es excelente.';
      } else if (payback <= 18) {
        paybackAnalysis = 'El período de recuperación de 18 meses es bueno para este tipo de proyecto.';
      } else if (payback <= 24) {
        paybackAnalysis = 'El período de recuperación de 2 años es aceptable para proyectos de automatización.';
      } else {
        paybackAnalysis = 'El período de recuperación es extenso, considerar optimizaciones o alternativas.';
      }
      
      // Análisis específico de componentes
      let componentAnalysis = '';
      if (employees.length > 0 && agents.length > 0) {
        componentAnalysis = `
          <p style="margin-bottom: 8px;"><strong>Impacto en empleados:</strong> ${employees.length} empleados afectados con potencial de ahorro del 50% en tareas automatizables.</p>
          <p style="margin-bottom: 8px;"><strong>Impacto de agentes:</strong> ${agents.length} agentes seleccionados generando ahorros estimados de $${(agentDetails.agentMonthlySavings || 0).toLocaleString()}/mes.</p>
        `;
      } else if (employees.length > 0) {
        componentAnalysis = `<p style="margin-bottom: 8px;"><strong>Enfoque en empleados:</strong> Análisis basado en ${employees.length} empleados con optimización de procesos manuales.</p>`;
      } else if (agents.length > 0) {
        componentAnalysis = `<p style="margin-bottom: 8px;"><strong>Enfoque en automatización:</strong> ${agents.length} agentes de automatización para optimización de procesos.</p>`;
      }
      
      return `
        <div style="margin-bottom: 20px;">
          <p style="font-size: 14px; color: #374151; margin-bottom: 10px;">${conclusion}</p>
          <p style="font-size: 14px; color: #374151; margin-bottom: 10px;">${paybackAnalysis}</p>
          <div style="background: #f8fafc; border-left: 4px solid #0369a1; padding: 10px; margin: 10px 0;">
            <p style="font-size: 13px; color: #475569; margin: 0;"><strong>Evaluación de riesgo:</strong> ${riskLevel}</p>
          </div>
        </div>
        
        <div style="font-size: 13px; color: #64748b;">
          <p style="margin-bottom: 8px;"><strong>Componentes del análisis:</strong></p>
          <div style="margin-left: 15px; margin-bottom: 15px;">
            ${componentAnalysis}
            <p style="margin-bottom: 8px;"><strong>Inversión total:</strong> $${totalInvestment.toLocaleString()} (setup, implementación y entrenamiento)</p>
            <p style="margin-bottom: 8px;"><strong>Ahorro anual proyectado:</strong> $${annualSavings.toLocaleString()} basado en eficiencias documentadas</p>
          </div>
          
          <p style="margin-bottom: 5px;"><strong>Metodología aplicada:</strong></p>
          <ul style="margin-left: 20px; margin-bottom: 15px;">
            <li>Cálculo de ahorros basado en beneficios específicos de cada agente</li>
            <li>Inversión realista considerando solo costos de transición</li>
            <li>Proyección conservadora con factores de riesgo incluidos</li>
            <li>Análisis de sensibilidad para diferentes escenarios</li>
          </ul>
          
          <p style="font-style: italic; font-size: 12px; background: #fefce8; padding: 8px; border-radius: 4px;">
            <strong>Nota importante:</strong> Este análisis utiliza metodología estándar de la industria para proyectos de automatización. 
            Los resultados se basan en datos proporcionados y benchmarks de implementaciones similares. 
            Se recomienda validar con un piloto antes de la implementación completa.
          </p>
        </div>
      `;
    }

    // 📄 FUNCIÓN AUXILIAR: No generar detalles estándar (eliminada por solicitud del usuario)
    function generarHTMLDetallesEstandar(specificData) {
      console.log(`📄 Función de detalles estándar deshabilitada`);
      return '';
    }

    // 🔥 FUNCIÓN AUXILIAR: Generar HTML completo del cotizador
    function generarHTMLCotizadorCompleto(quoteData, fieldName) {
      console.log(`🎨 Generando HTML completo para cotizador ${fieldName}`);
      
      // Completar datos si es necesario
      if (!quoteData.calculations || !quoteData.summary) {
        quoteData = completarDatosCotizacion(quoteData);
      }
      
      const { selectedAgents = [], selectedPlan = null, selectedServices = [], calculations, summary } = quoteData;
      
      return `
        
          <!-- Sección de Cotización AIM -->
          <div class="section">
            <div class="section-header">
              <div class="section-title">Cotización y Precios</div>
            </div>
            <div class="section-content">
              <!-- Información básica de la cotización -->
              <div class="content-block">
                <div style="text-align: center; color: #64748b; font-size: 13px; font-style: italic; margin-bottom: 15px;">Válida por ${summary.validityDays} días | Moneda: ${calculations.currency}</div>
                
                <!-- Grid principal con 3 columnas -->
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;">
                  <!-- Agentes -->
                  <div style="padding: 10px; background: #f8fafc; border-radius: 4px; border-left: 2px solid #14b8a6;">
                    <div style="font-weight: 600; color: #475569; font-size: 12px; margin-bottom: 3px;">Agentes Seleccionados (${selectedAgents.length})</div>
                    <div style="color: #1e293b; font-size: 13px;">
                      ${selectedAgents.length > 0 ? selectedAgents.map(agent => `
                        <div style="margin-bottom: 4px;">• ${agent.name || 'Agente'}</div>
                      `).join('') : 'Ningún agente seleccionado'}
                    </div>
                  </div>
                  
                  <!-- Plan -->
                  <div style="padding: 10px; background: #f8fafc; border-radius: 4px; border-left: 2px solid #14b8a6;">
                    <div style="font-weight: 600; color: #475569; font-size: 12px; margin-bottom: 3px;">Plan de Suscripción</div>
                    <div style="color: #1e293b; font-size: 13px;">
                      ${selectedPlan ? `
                        <div><strong>${selectedPlan.name}</strong></div>
                        <div style="font-size: 12px; color: #64748b;">$${(selectedPlan.price || selectedPlan.monthlyPrice || 0).toLocaleString()}/mes</div>
                      ` : 'Ningún plan seleccionado'}
                    </div>
                  </div>
                  
                  <!-- Servicios -->
                  <div style="padding: 10px; background: #f8fafc; border-radius: 4px; border-left: 2px solid #14b8a6;">
                    <div style="font-weight: 600; color: #475569; font-size: 12px; margin-bottom: 3px;">Servicios Adicionales (${selectedServices.length})</div>
                    <div style="color: #1e293b; font-size: 13px;">
                      ${selectedServices.length > 0 ? selectedServices.map(service => `
                        <div style="margin-bottom: 2px; font-size: 12px;">• ${service.name}</div>
                      `).join('') : 'Ningún servicio adicional'}
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Desglose de costos -->
              <div class="specific-data">
                <div class="data-item">
                  <div class="data-label">Agentes (implementación):</div>
                  <div class="data-value">$${calculations.baseTotal.toLocaleString()} ${calculations.currency}</div>
                </div>
                
                <div class="data-item">
                  <div class="data-label">Configuración inicial:</div>
                  <div class="data-value">$${calculations.setupTotal.toLocaleString()} ${calculations.currency}</div>
                </div>
                
                ${calculations.warrantyTotal > 0 ? `
                <div class="data-item">
                  <div class="data-label">Garantía extendida:</div>
                  <div class="data-value">$${calculations.warrantyTotal.toLocaleString()} ${calculations.currency}</div>
                </div>
                ` : ''}
                
                <div class="data-item">
                  <div class="data-label">Costo mensual recurrente:</div>
                  <div class="data-value">$${calculations.monthlyTotal.toLocaleString()} ${calculations.currency}/mes</div>
                </div>
                
                <div class="data-item" style="background: #ecfdf5; border-top: 2px solid #14b8a6;">
                  <div class="data-label" style="color: #166534; font-weight: 700;">Total Inicial:</div>
                  <div class="data-value" style="color: #15803d; font-weight: 700; font-size: 16px;">$${calculations.grandTotal.toLocaleString()} ${calculations.currency}</div>
                </div>
                
                <div class="data-item" style="background: #eff6ff;">
                  <div class="data-label" style="color: #1e40af; font-weight: 700;">Total Primer Año:</div>
                  <div class="data-value" style="color: #2563eb; font-weight: 700; font-size: 16px;">$${calculations.firstYearTotal.toLocaleString()} ${calculations.currency}</div>
                </div>
              </div>
              
              <!-- Términos de la cotización -->
              <div class="content-block">
                <div style="font-weight: 600; color: #1e293b; font-size: 14px; margin-bottom: 8px;">Términos de la Cotización</div>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
                  <div>
                    <span style="color: #64748b; font-size: 12px;">Términos de pago:</span><br>
                    <span style="font-weight: 600; color: #1e293b; font-size: 13px;">${summary.paymentTerms}</span>
                  </div>
                  <div>
                    <span style="color: #64748b; font-size: 12px;">Garantía:</span><br>
                    <span style="font-weight: 600; color: #1e293b; font-size: 13px;">${summary.warranty}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

      `;
    }

    async function convertirHTMLaPDF(htmlContent) {
      try {
        // Crear un HTML completo con estilos CSS optimizado para PDF
        const fullHTML = `
          <!DOCTYPE html>
          <html lang="es">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Documento AIM</title>
            <style>
              @page {
                size: Letter;
                margin: 20mm;
              }
              
              * {
                box-sizing: border-box;
                margin: 0;
                padding: 0;
              }
              
              body {
                font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
                line-height: 1.6;
                color: #374151;
                background: white;
                width: 216mm;
                max-width: 216mm;
                margin: 0 auto;
                padding: 0;
              }
              
              .document-header {
                background: linear-gradient(135deg, #0d9488 0%, #059669 100%);
                color: white;
                padding: 30px;
                border-radius: 12px;
                margin-bottom: 30px;
                text-align: center;
                page-break-inside: avoid;
              }
              
              .document-header h1 {
                font-size: 28px;
                font-weight: bold;
                margin-bottom: 10px;
              }
              
              .document-header p {
                font-size: 16px;
                opacity: 0.9;
              }
              
              .document-content {
                background: white;
                padding: 30px;
                border: 1px solid #e5e7eb;
                border-radius: 8px;
                margin-bottom: 20px;
                page-break-inside: avoid;
              }
              
              .field-group {
                margin-bottom: 20px;
                padding: 15px;
                background: #f9fafb;
                border-radius: 8px;
                page-break-inside: avoid;
              }
              
              .field-label {
                font-weight: 600;
                color: #1f2937;
                margin-bottom: 5px;
                display: block;
              }
              
              .field-value {
                color: #374151;
                font-size: 14px;
              }
              
              .document-footer {
                text-align: center;
                padding: 20px;
                border-top: 1px solid #e5e7eb;
                margin-top: 30px;
                font-size: 12px;
                color: #6b7280;
              }
              
              .grid {
                display: grid;
                gap: 1rem;
              }
              
              .grid-cols-2 {
                grid-template-columns: repeat(2, 1fr);
              }
              
              .grid-cols-3 {
                grid-template-columns: repeat(3, 1fr);
              }
              
              .mb-8 {
                margin-bottom: 2rem;
              }
              
              .mb-4 {
                margin-bottom: 1rem;
              }
              
              .p-4 {
                padding: 1rem;
              }
              
              .p-6 {
                padding: 1.5rem;
              }
              
              .bg-gray-50 {
                background-color: #f9fafb;
              }
              
              .rounded-lg {
                border-radius: 0.5rem;
              }
              
              .font-semibold {
                font-weight: 600;
              }
              
              .text-gray-800 {
                color: #1f2937;
              }
              
              .text-gray-700 {
                color: #374151;
              }
              
              .text-lg {
                font-size: 1.125rem;
              }
              
              .text-sm {
                font-size: 0.875rem;
              }
              
              .block {
                display: block;
              }
              
              .mb-1 {
                margin-bottom: 0.25rem;
              }
              
              h4 {
                font-size: 1.125rem;
                font-weight: 600;
                color: #1f2937;
                margin-bottom: 1rem;
              }
              
              @media print {
                body {
                  padding: 0;
                  max-width: none;
                  width: 100%;
                }
                
                .document-header {
                  break-inside: avoid;
                }
                
                .field-group {
                  break-inside: avoid;
                }
              }
            </style>
          </head>
          <body>
            ${htmlContent}
            <div class="document-footer">
              <p>Documento generado por AIM - Asociación de Ingeniería Mireles</p>
              <p>Fecha de generación: ${new Date().toLocaleDateString('es-ES')}</p>
            </div>
          </body>
          </html>
        `;
        
        // Crear una ventana temporal para generar el PDF
        const printWindow = window.open('', '_blank');
        printWindow.document.write(fullHTML);
        printWindow.document.close();
        
        // Esperar a que se cargue el contenido
        await new Promise(resolve => {
          printWindow.onload = resolve;
          setTimeout(resolve, 1000); // Fallback timeout
        });
        
        // Abrir el diálogo de impresión
        printWindow.print();
        
        // Cerrar la ventana después de imprimir
        setTimeout(() => {
          printWindow.close();
        }, 500);
        
        // Retornar null ya que el PDF se genera via impresión
        return null;
      } catch (error) {
        console.error('Error convirtiendo HTML a PDF:', error);
        throw error;
      }
    }

    async function finalizarDocumento(documentId) {
      try {
        showSuccess('Finalizando documento...');
        
        await window.documentsApi.changeDocumentStatus(
          documentId, 
          'FINALIZED', 
          'Documento finalizado desde vista previa'
        );
        
        // Actualizar el documento en la lista local
        const docIndex = documents.findIndex(d => d.id === documentId);
        if (docIndex !== -1) {
          documents[docIndex].status = 'FINALIZED';
        }
        
        // Refrescar datos para actualizar contadores
        await refreshData();
        
        showSuccess('Documento finalizado exitosamente');
        
        // Cerrar el modal de vista previa
        document.getElementById('modalVistaPrevia').classList.add('hidden');
        
        // Pequeño delay para asegurar que se muestre la notificación
        setTimeout(() => {
          // Redirigir a la página de documentos
          window.location.href = '/portal/documentos';
        }, 1000);
        
      } catch (error) {
        console.error('Error finalizando documento:', error);
        showError('Error al finalizar el documento: ' + error.message);
      }
    }

    // Función para crear documentos faltantes (desde tabla)
    function mostrarCrearDocumentos(orderId) {
      selectedOrder = orders.find(order => order.id === orderId);
      if (selectedOrder) {
        mostrarTiposDocumentos();
      }
    }

    // Función para mostrar documentos de una orden
    async function mostrarDocumentosOrden(orderId) {
      console.log(`🔍 Mostrando documentos para orden: ${orderId}`);
      
      const order = orders.find(o => o.id === orderId);
      console.log('📋 Orden encontrada:', order);
      
      if (!order) {
        console.error('❌ Orden no encontrada:', orderId);
        showError('Orden no encontrada');
        return;
      }
      
      // Cargar documentos específicos de la orden desde el backend
      let documentsForOrder = [];
      try {
        console.log('🌐 Consultando documentos desde el backend...');
        const response = await window.documentsApi.getDocumentsByOrder(orderId);
        console.log('📄 Respuesta del backend:', response);
        
        documentsForOrder = response.documents || [];
        console.log(`📊 Documentos obtenidos del backend: ${documentsForOrder.length}`);
        
        // Log detallado de cada documento
        documentsForOrder.forEach((doc, index) => {
          console.log(`📄 Documento ${index + 1}:`, {
            id: doc.id,
            title: doc.title,
            status: doc.status,
            orderId: doc.orderId,
            documentTypeId: doc.documentTypeId
          });
        });
        
      } catch (error) {
        console.error('❌ Error cargando documentos de la orden desde backend:', error);
        console.log('🔄 Intentando con datos locales...');
        
        // Fallback a filtrar de la lista local
        documentsForOrder = documents.filter(doc => {
          const matches = doc.orderId === orderId || doc.order?.id === orderId;
          if (matches) {
            console.log('✅ Documento local encontrado:', doc.title);
          }
          return matches;
        });
        
        console.log(`📊 Documentos encontrados localmente: ${documentsForOrder.length}`);
      }
      
      const modal = document.getElementById('modalVerDocumentos');
      const contenido = document.getElementById('contenidoModalVer');
      
      // Agrupar documentos por fase
      const allDocumentsByPhase = groupDocumentsByPhase(documentTypes);
      const documentsGroupedByPhase = {};
      
      // Calcular progreso por fase CON DEBUGGING
      const phaseProgress = {};
      console.log('🔍 === DEBUG MODAL VER DOCUMENTOS ===');
      console.log('📄 Documentos disponibles para analizar:', documentsForOrder.length);
      console.log('📋 Tipos de documentos agrupados por fase:', Object.keys(allDocumentsByPhase));
      
      // Log de todos los documentos disponibles
      documentsForOrder.forEach((doc, index) => {
        console.log(`📄 Documento ${index + 1}:`, {
          id: doc.id,
          title: doc.title,
          documentTypeId: doc.documentTypeId,
          status: doc.status,
          documentTypeName: doc.documentType?.name
        });
      });
      
      Object.keys(allDocumentsByPhase).forEach(phase => {
        console.log(`\n🔍 Analizando ${phase}:`);
        const phaseDocTypes = allDocumentsByPhase[phase];
        
        console.log(`📋 Tipos de documentos en ${phase}:`, phaseDocTypes.map(dt => ({
          id: dt.id,
          name: dt.name,
          slug: dt.slug
        })));
        
        const phaseDocuments = documentsForOrder.filter(doc => {
          const hasMatch = phaseDocTypes.some(docType => {
            const match = docType.id === doc.documentTypeId;
            if (match) {
              console.log(`✅ MATCH encontrado: Documento "${doc.title}" (${doc.documentTypeId}) coincide con tipo "${docType.name}" (${docType.id})`);
            }
            return match;
          });
          
          if (!hasMatch) {
            console.log(`❌ NO MATCH: Documento "${doc.title}" (${doc.documentTypeId}) no coincide con ningún tipo de ${phase}`);
          }
          
          return hasMatch;
        });
        
        console.log(`📊 Documentos encontrados en ${phase}:`, phaseDocuments.length);
        
        documentsGroupedByPhase[phase] = phaseDocuments;
        
        const completedInPhase = phaseDocuments.filter(doc => 
          ['FINALIZED', 'SENT', 'APPROVED'].includes(doc.status)
        ).length;
        
        phaseProgress[phase] = {
          created: phaseDocuments.length,
          completed: completedInPhase,
          total: phaseDocTypes.length,
          percentage: phaseDocTypes.length > 0 ? Math.round((completedInPhase / phaseDocTypes.length) * 100) : 0
        };
        
        console.log(`📈 Progreso de ${phase}:`, phaseProgress[phase]);
      });
      
      console.log('🔍 === FIN DEBUG MODAL VER DOCUMENTOS ===');
      
      // Configuración de fases
      const phaseDescriptions = {
        'Fase 1': 'Análisis inicial y diagnóstico del proyecto',
        'Fase 2': 'Documentación técnica y especificaciones',
        'Fase 3': 'Propuestas comerciales y cotizaciones',
        'Fase 4': 'Documentación para usuarios finales',
        'Fase 5': 'Pruebas, validación y entrega',
        'Fase 6': 'Reporte final y cierre del proyecto',
        'Fase 7': 'Soporte técnico y documentación de mantenimiento'
      };

      const phaseColors = {
        'Fase 1': { bg: 'bg-blue-50', border: 'border-blue-200', text: 'text-blue-600', hover: 'hover:bg-blue-100' },
        'Fase 2': { bg: 'bg-teal-50', border: 'border-teal-200', text: 'text-teal-600', hover: 'hover:bg-teal-100' },
        'Fase 3': { bg: 'bg-emerald-50', border: 'border-emerald-200', text: 'text-emerald-600', hover: 'hover:bg-emerald-100' },
        'Fase 4': { bg: 'bg-purple-50', border: 'border-purple-200', text: 'text-purple-600', hover: 'hover:bg-purple-100' },
        'Fase 5': { bg: 'bg-orange-50', border: 'border-orange-200', text: 'text-orange-600', hover: 'hover:bg-orange-100' },
        'Fase 6': { bg: 'bg-green-50', border: 'border-green-200', text: 'text-green-600', hover: 'hover:bg-green-100' },
        'Fase 7': { bg: 'bg-gray-50', border: 'border-gray-200', text: 'text-gray-600', hover: 'hover:bg-gray-100' }
      };
      
      const totalDocuments = documentsForOrder.length;
      const completedDocuments = documentsForOrder.filter(doc => 
        ['FINALIZED', 'SENT', 'APPROVED'].includes(doc.status)
      ).length;
      
      contenido.innerHTML = `
        <div class="mb-6">
          <div class="bg-teal-50 border border-teal-200 rounded-lg p-4 mb-6">
            <h4 class="font-medium text-teal-900 mb-2">Documentos de la orden:</h4>
            <p class="text-teal-700">${order.orderNumber} - ${order.title}</p>
            <p class="text-sm text-teal-600">${order.client?.companyName}</p>
            <div class="mt-3 bg-white rounded-lg p-3">
              <div class="flex items-center justify-between text-sm">
                <span class="text-gray-600">Progreso general:</span>
                <span class="font-medium text-teal-700">${totalDocuments} documentos creados (${completedDocuments} completados)</span>
              </div>
              <div class="mt-2 bg-gray-200 rounded-full h-2">
                <div class="bg-teal-500 h-2 rounded-full transition-all duration-300" style="width: ${totalDocuments > 0 ? Math.round((completedDocuments / totalDocuments) * 100) : 0}%"></div>
              </div>
            </div>
          </div>
          
          ${totalDocuments > 0 ? `
            <div class="space-y-6">
              ${Object.keys(allDocumentsByPhase).sort().map(phase => {
                const phaseDocuments = documentsGroupedByPhase[phase] || [];
                const progress = phaseProgress[phase];
                const description = phaseDescriptions[phase] || 'Documentos de esta fase del proyecto';
                const colors = phaseColors[phase] || phaseColors['Fase 1'];
                
                return `
                  <div class="border border-gray-200 rounded-lg overflow-hidden">
                    <div class="${colors.bg} ${colors.border} border-b p-4">
                      <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-3">
                          <div class="p-2 bg-white rounded-lg shadow-sm">
                            <svg class="w-5 h-5 ${colors.text}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              ${getPhaseIconPath(getPhaseIcon(phase))}
                            </svg>
                          </div>
                          <div>
                            <h5 class="font-semibold text-gray-900">${phase}</h5>
                            <p class="text-xs text-gray-600">${description}</p>
                          </div>
                        </div>
                        <div class="flex items-center space-x-3">
                          <div class="text-right">
                            <div class="text-xs text-gray-500">Estado</div>
                            <div class="flex space-x-2">
                              <span class="px-2 py-1 bg-emerald-100 text-emerald-800 rounded text-xs font-medium">
                                ${progress.created} creados
                              </span>
                              <span class="px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs font-medium">
                                ${progress.completed} completados
                              </span>
                            </div>
                          </div>
                          <div class="w-12 h-12 ${colors.bg} border-2 ${colors.border} rounded-full flex items-center justify-center relative">
                            <div class="absolute inset-0 rounded-full">
                              <svg class="w-full h-full transform -rotate-90" viewBox="0 0 36 36">
                                <circle cx="18" cy="18" r="16" fill="none" stroke="currentColor" stroke-width="2" stroke-dasharray="100" stroke-dashoffset="100" class="text-gray-200"></circle>
                                <circle cx="18" cy="18" r="16" fill="none" stroke="currentColor" stroke-width="2" stroke-dasharray="100" stroke-dashoffset="${100 - progress.percentage}" class="${colors.text} transition-all duration-500"></circle>
                              </svg>
                            </div>
                            <span class="text-xs font-bold ${colors.text} z-10">${progress.percentage}%</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div class="p-4">
                      ${phaseDocuments.length > 0 ? `
                        <div class="space-y-3">
                          ${phaseDocuments.map(doc => `
                            <div class="border border-gray-200 rounded-lg p-3 hover:bg-gray-50 transition-colors">
                              <div class="flex items-center justify-between">
                                <div class="flex-1">
                                  <div class="flex items-center space-x-2">
                                    <h6 class="font-medium text-gray-900">${doc.title}</h6>
                                    <span class="px-2 py-1 bg-${getStatusColor(doc.status)}-100 text-${getStatusColor(doc.status)}-800 rounded text-xs font-medium">
                                      ${getStatusLabel(doc.status)}
                                    </span>
                                  </div>
                                  <p class="text-sm text-gray-600 mt-1">${doc.documentType?.name || 'Tipo no especificado'}</p>
                                  <p class="text-xs text-gray-500 mt-1">
                                    ${doc.documentNumber} | Creado: ${formatDate(doc.createdAt)}
                                    ${doc.finalizedAt ? ` | Finalizado: ${formatDate(doc.finalizedAt)}` : ''}
                                  </p>
                                </div>
                                <div class="flex items-center space-x-2">
                                  <button 
                                    onclick="mostrarVistaPrevia(${JSON.stringify(doc).replace(/"/g, '&quot;')})"
                                    class="text-teal-600 hover:text-teal-800 p-2 rounded-lg hover:bg-teal-50"
                                    title="Vista previa"
                                  >
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                    </svg>
                                  </button>
                                  <button 
                                    onclick="descargarDocumento('${doc.id}', 'pdf')"
                                    class="text-blue-600 hover:text-blue-800 p-2 rounded-lg hover:bg-blue-50"
                                    title="Descargar PDF"
                                  >
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                    </svg>
                                  </button>
                                  ${doc.status === 'FINALIZED' ? `
                                    <button 
                                      onclick="enviarDocumentoPorEmail('${doc.id}')"
                                      class="text-green-600 hover:text-green-800 p-2 rounded-lg hover:bg-green-50"
                                      title="Enviar por email"
                                    >
                                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                      </svg>
                                    </button>
                                  ` : ''}
                                </div>
                              </div>
                            </div>
                          `).join('')}
                        </div>
                      ` : `
                        <div class="text-center py-4 text-gray-500">
                          <p class="text-sm">No hay documentos creados en esta fase</p>
                        </div>
                      `}
                    </div>
                  </div>
                `;
              }).join('')}
            </div>
          ` : `
            <div class="text-center py-8 text-gray-500">
              <svg class="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <p class="text-lg font-medium">No hay documentos creados para esta orden</p>
              <p class="text-sm mb-4">Crea documentos para ver el progreso por fases</p>
              <button onclick="mostrarCrearDocumentos('${orderId}')" class="px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 transition-colors">
                Crear Documento
              </button>
            </div>
          `}
                  </div>
                `;
      
      modal.classList.remove('hidden');
    }

    // Función para agrupar documentos por fase
    function groupDocumentsByPhase(docs) {
      const grouped = {};
      
      docs.forEach(doc => {
        const phase = doc.phase || 'Fase 1'; // Default a Fase 1 si no tiene fase
        if (!grouped[phase]) {
          grouped[phase] = [];
        }
        grouped[phase].push(doc);
      });
      
      return grouped;
    }

    // Funciones de utilidad
    function formatDate(dateString) {
      if (!dateString) return '-';
      try {
        return new Date(dateString).toLocaleDateString('es-ES');
      } catch {
        return dateString;
      }
    }

    // Función para formatear nombres de campos técnicos a español
    function formatFieldName(fieldName) {
      const fieldTranslations = {
        // Campos financieros y ROI
        'five_year_roi': 'ROI estimado en 5 años',
        'roi_calculation': 'Cálculo de ROI',
        'investment_cost': 'Costo de inversión',
        'annual_savings': 'Ahorros anuales',
        'payback_period': 'Período de recuperación',
        'net_present_value': 'Valor presente neto',
        'internal_rate_return': 'Tasa interna de retorno',
        'total_cost_ownership': 'Costo total de propiedad',
        'operational_savings': 'Ahorros operacionales',
        'maintenance_cost': 'Costo de mantenimiento',
        'energy_savings': 'Ahorros energéticos',
        'labor_cost_reduction': 'Reducción de costos laborales',
        'productivity_increase': 'Incremento de productividad',
        'quality_improvement': 'Mejora de calidad',
        'error_reduction': 'Reducción de errores',
        'downtime_reduction': 'Reducción de tiempo de inactividad',
        'efficiency_gain': 'Ganancia de eficiencia',
        
        // Campos técnicos
        'technical_specs': 'Especificaciones técnicas',
        'implementation_time': 'Tiempo de implementación',
        'training_requirements': 'Requisitos de capacitación',
        'hardware_requirements': 'Requisitos de hardware',
        'software_requirements': 'Requisitos de software',
        'system_integration': 'Integración del sistema',
        'security_requirements': 'Requisitos de seguridad',
        'backup_strategy': 'Estrategia de respaldo',
        'disaster_recovery': 'Recuperación ante desastres',
        'scalability_options': 'Opciones de escalabilidad',
        'performance_metrics': 'Métricas de rendimiento',
        'monitoring_tools': 'Herramientas de monitoreo',
        'automation_level': 'Nivel de automatización',
        'integration_complexity': 'Complejidad de integración',
        'data_migration': 'Migración de datos',
        'user_training': 'Capacitación de usuarios',
        'support_level': 'Nivel de soporte',
        'warranty_period': 'Período de garantía',
        'upgrade_path': 'Ruta de actualización',
        'customization_options': 'Opciones de personalización',
        
        // Campos de proyecto
        'project_scope': 'Alcance del proyecto',
        'project_timeline': 'Cronograma del proyecto',
        'project_budget': 'Presupuesto del proyecto',
        'project_risks': 'Riesgos del proyecto',
        'project_deliverables': 'Entregables del proyecto',
        'project_milestones': 'Hitos del proyecto',
        'project_resources': 'Recursos del proyecto',
        'project_stakeholders': 'Interesados del proyecto',
        'project_constraints': 'Restricciones del proyecto',
        'project_assumptions': 'Supuestos del proyecto',
        'success_criteria': 'Criterios de éxito',
        'acceptance_criteria': 'Criterios de aceptación',
        'quality_standards': 'Estándares de calidad',
        'compliance_requirements': 'Requisitos de cumplimiento',
        
        // Campos de cliente
        'client_name': 'Nombre del cliente',
        'client_contact': 'Contacto del cliente',
        'client_industry': 'Industria del cliente',
        'client_size': 'Tamaño del cliente',
        'client_requirements': 'Requisitos del cliente',
        'client_expectations': 'Expectativas del cliente',
        'client_budget': 'Presupuesto del cliente',
        'client_timeline': 'Cronograma del cliente',
        'client_approval': 'Aprobación del cliente',
        'client_feedback': 'Retroalimentación del cliente',
        
        // Campos de orden
        'order_number': 'Número de orden',
        'order_date': 'Fecha de orden',
        'order_priority': 'Prioridad de orden',
        'order_status': 'Estado de orden',
        'order_type': 'Tipo de orden',
        'order_value': 'Valor de orden',
        'order_description': 'Descripción de orden',
        'order_notes': 'Notas de orden',
        'delivery_date': 'Fecha de entrega',
        'completion_date': 'Fecha de finalización',
        'estimated_hours': 'Horas estimadas',
        'actual_hours': 'Horas reales',
        
        // Campos de tiempo
        'time_savings': 'Ahorro de tiempo',
        'implementation_timeline': 'Cronograma de implementación',
        'go_live_date': 'Fecha de puesta en marcha',
        'testing_period': 'Período de pruebas',
        'training_duration': 'Duración de capacitación',
        'rollout_schedule': 'Cronograma de despliegue',
        'maintenance_schedule': 'Cronograma de mantenimiento',
        'review_schedule': 'Cronograma de revisión',
        'update_schedule': 'Cronograma de actualizaciones',
        'support_hours': 'Horas de soporte',
        
        // Campos de recursos
        'human_resources': 'Recursos humanos',
        'technical_resources': 'Recursos técnicos',
        'financial_resources': 'Recursos financieros',
        'infrastructure_resources': 'Recursos de infraestructura',
        'software_licenses': 'Licencias de software',
        'hardware_equipment': 'Equipos de hardware',
        'external_services': 'Servicios externos',
        'consultant_fees': 'Honorarios de consultoría',
        'training_costs': 'Costos de capacitación',
        'maintenance_fees': 'Cuotas de mantenimiento',
        
        // Campos de análisis
        'risk_analysis': 'Análisis de riesgos',
        'cost_analysis': 'Análisis de costos',
        'benefit_analysis': 'Análisis de beneficios',
        'impact_analysis': 'Análisis de impacto',
        'feasibility_study': 'Estudio de factibilidad',
        'market_analysis': 'Análisis de mercado',
        'competitor_analysis': 'Análisis de competencia',
        'swot_analysis': 'Análisis FODA',
        'gap_analysis': 'Análisis de brechas',
        'stakeholder_analysis': 'Análisis de interesados',
        
        // Campos de proceso
        'current_process': 'Proceso actual',
        'target_process': 'Proceso objetivo',
        'process_improvement': 'Mejora de proceso',
        'process_automation': 'Automatización de proceso',
        'process_optimization': 'Optimización de proceso',
        'process_documentation': 'Documentación de proceso',
        'process_training': 'Capacitación de proceso',
        'process_monitoring': 'Monitoreo de proceso',
        'process_evaluation': 'Evaluación de proceso',
        'process_standardization': 'Estandarización de proceso',
        
        // Campos de calidad
        'quality_metrics': 'Métricas de calidad',
        'quality_assurance': 'Aseguramiento de calidad',
        'quality_control': 'Control de calidad',
        'quality_improvement': 'Mejora de calidad',
        'quality_standards': 'Estándares de calidad',
        'quality_testing': 'Pruebas de calidad',
        'quality_documentation': 'Documentación de calidad',
        'quality_training': 'Capacitación de calidad',
        'quality_audit': 'Auditoría de calidad',
        'quality_certification': 'Certificación de calidad'
      };
      
      // Si hay una traducción específica, úsala
      if (fieldTranslations[fieldName]) {
        return fieldTranslations[fieldName];
      }
      
      // Si no hay traducción específica, formatear automáticamente
      return fieldName
        .replace(/_/g, ' ')
        .replace(/([a-z])([A-Z])/g, '$1 $2')
        .toLowerCase()
        .split(' ')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
    }

    function getOrderStatusLabel(status) {
      const statusLabels = {
        'DRAFT': 'Borrador',
        'PENDING': 'Pendiente', 
        'IN_PROGRESS': 'En Progreso',
        'IN_REVIEW': 'En Revisión',
        'COMPLETED': 'Completada',
        'CANCELLED': 'Cancelada',
        'ON_HOLD': 'En Espera'
      };
      return statusLabels[status] || status;
    }

    function getOrderStatusColor(status) {
      const statusColors = {
        'DRAFT': 'gray',
        'PENDING': 'blue',
        'IN_PROGRESS': 'teal',
        'IN_REVIEW': 'purple',
        'COMPLETED': 'emerald',
        'CANCELLED': 'red',
        'ON_HOLD': 'orange'
      };
      return statusColors[status] || 'gray';
    }

    function getProgressColor(progress) {
      if (progress >= 80) return 'bg-emerald-500';
      if (progress >= 50) return 'bg-teal-500';
      if (progress >= 25) return 'bg-yellow-500';
      return 'bg-orange-500';
    }

    function getStatusColor(status) {
      const statusColors = {
        'DRAFT': 'gray',
        'FINALIZED': 'blue',
        'SENT': 'purple',
        'REVIEWED': 'yellow',
        'APPROVED': 'green',
        'REJECTED': 'red',
        'ARCHIVED': 'gray'
      };
      return statusColors[status] || 'gray';
    }

    function getStatusLabel(status) {
      const statusLabels = {
        'DRAFT': 'Borrador',
        'FINALIZED': 'Finalizado',
        'SENT': 'Enviado',
        'REVIEWED': 'Revisado',
        'APPROVED': 'Aprobado',
        'REJECTED': 'Rechazado',
        'ARCHIVED': 'Archivado'
      };
      return statusLabels[status] || status;
    }

    function showSuccess(message) {
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-md bg-green-500 text-white';
      notification.textContent = message;
      document.body.appendChild(notification);
      
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 5000);
    }

    function showError(message) {
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-md bg-red-500 text-white';
      notification.textContent = message;
      document.body.appendChild(notification);
      
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 5000);
    }

    // Función de diagnóstico completo del sistema
    window.debugDocumentSystem = async function() {
      console.log('🔍 === DIAGNÓSTICO COMPLETO DEL SISTEMA DE DOCUMENTOS ===');
      
      // 1. Verificar dependencias
      console.log('1️⃣ Verificando dependencias...');
      console.log('documentsApi disponible:', !!window.documentsApi);
      console.log('ordersApi disponible:', !!window.ordersApi);
      
      // 2. Verificar conectividad
      console.log('2️⃣ Verificando conectividad...');
      await testBackendConnection();
      
      // 3. Verificar datos en memoria
      console.log('3️⃣ Verificando datos en memoria...');
      console.log('Tipos de documentos:', documentTypes.length);
      console.log('Documentos cargados:', documents.length);
      console.log('Órdenes cargadas:', orders.length);
      
      // 4. Probar APIs individualmente
      console.log('4️⃣ Probando APIs...');
      
      try {
        const typesResponse = await window.documentsApi.getDocumentTypes();
        console.log('✅ getDocumentTypes OK:', typesResponse.length);
      } catch (error) {
        console.error('❌ getDocumentTypes ERROR:', error);
      }
      
      try {
        const docsResponse = await window.documentsApi.getDocuments({ limit: 5 });
        console.log('✅ getDocuments OK:', docsResponse.documents?.length || 0);
        
        // Mostrar documentos cargados con sus orderIds
        if (docsResponse.documents && docsResponse.documents.length > 0) {
          console.log('📄 Documentos en memoria:');
          docsResponse.documents.forEach((doc, index) => {
            console.log(`  ${index + 1}. ${doc.title} (ID: ${doc.id}, OrderID: ${doc.orderId})`);
          });
        }
      } catch (error) {
        console.error('❌ getDocuments ERROR:', error);
      }
      
      // 5. Probar consulta por orden específica
      console.log('5️⃣ Probando consultas por orden...');
      if (orders.length > 0) {
        for (let i = 0; i < Math.min(orders.length, 3); i++) {
          const order = orders[i];
          console.log(`🔍 Probando orden ${i + 1}: ${order.orderNumber} (ID: ${order.id})`);
          
          try {
            const orderDocsResponse = await window.documentsApi.getDocumentsByOrder(order.id);
            console.log(`  ✅ getDocumentsByOrder OK: ${orderDocsResponse.documents?.length || 0} documentos`);
            
            if (orderDocsResponse.documents && orderDocsResponse.documents.length > 0) {
              orderDocsResponse.documents.forEach((doc, index) => {
                console.log(`    📄 ${index + 1}. ${doc.title} (Status: ${doc.status})`);
              });
            }
          } catch (error) {
            console.error(`  ❌ getDocumentsByOrder ERROR para ${order.orderNumber}:`, error);
          }
        }
      }
      
      // 6. Verificar autenticación
      console.log('6️⃣ Verificando autenticación...');
      const token = window.documentsApi.getAuthToken();
      console.log('Token disponible:', !!token);
      console.log('Token length:', token?.length || 0);
      
      // 7. Análisis de coincidencias ID
      console.log('7️⃣ Análisis de coincidencias de IDs...');
      const allDocs = documents || [];
      const allOrders = orders || [];
      
      console.log('IDs de órdenes disponibles:');
      allOrders.forEach((order, index) => {
        console.log(`  ${index + 1}. ${order.orderNumber}: ${order.id}`);
      });
      
      console.log('IDs de documentos y sus órdenes asociadas:');
      allDocs.forEach((doc, index) => {
        const associatedOrder = allOrders.find(o => o.id === doc.orderId || o.id === doc.order?.id);
        console.log(`  ${index + 1}. ${doc.title}: orderId=${doc.orderId || doc.order?.id} ${associatedOrder ? '✅' : '❌'}`);
      });
      
      console.log('🔍 === FIN DEL DIAGNÓSTICO ===');
    };

    // Función específica para debugging de IDs
    window.debugOrderDocumentIds = async function() {
      console.log('🔍 === DEBUGGING ESPECÍFICO DE IDs ===');
      
      // Recargar todos los datos frescos
      console.log('🔄 Recargando datos frescos...');
      await refreshData();
      
      console.log('📋 Órdenes disponibles:');
      orders.forEach((order, index) => {
        console.log(`${index + 1}. ID: "${order.id}" | Número: "${order.orderNumber}" | Título: "${order.title}"`);
      });
      
      console.log('📄 Documentos disponibles:');
      documents.forEach((doc, index) => {
        console.log(`${index + 1}. ID: "${doc.id}" | OrderID: "${doc.orderId}" | Título: "${doc.title}"`);
      });
      
      // Probar consulta directa a la API para cada orden
      console.log('🔍 Probando consultas directas por orden...');
      for (const order of orders) {
        console.log(`\n📋 Consultando orden: ${order.orderNumber} (ID: ${order.id})`);
        
        try {
          const response = await fetch(`http://localhost:3001/api/documents/by-order/${order.id}`, {
            method: 'GET',
            headers: window.documentsApi.getHeaders(),
            credentials: 'include'
          });
          
          if (response.ok) {
            const result = await response.json();
            console.log('  📊 Respuesta cruda del backend:', result);
            
            const docsCount = result.data?.documents?.length || 0;
            console.log(`  📄 Documentos encontrados: ${docsCount}`);
            
            if (docsCount > 0) {
              result.data.documents.forEach((doc, index) => {
                console.log(`    ${index + 1}. ${doc.title} (Status: ${doc.status}, Type: ${doc.documentType?.name})`);
              });
            }
          } else {
            console.log(`  ❌ Error HTTP: ${response.status}`);
          }
        } catch (error) {
          console.log('  ❌ Error en consulta:', error);
        }
      }
      
      console.log('🔍 === FIN DEL DEBUGGING DE IDs ===');
    };

    // Función de debugging para probar la creación de documentos
    window.testCreateDocument = async function() {
      try {
        console.log('🧪 Ejecutando prueba de creación de documento...');
        
        if (orders.length === 0) {
          console.error('❌ No hay órdenes disponibles para la prueba');
          return;
        }
        
        if (documentTypes.length === 0) {
          console.error('❌ No hay tipos de documentos disponibles para la prueba');
          return;
        }
        
        const testOrder = orders[0];
        const testDocumentType = documentTypes[0];
        
        console.log('📋 Usando orden de prueba:', testOrder);
        console.log('📄 Usando tipo de documento de prueba:', testDocumentType);
        
        const testDocumentData = {
          documentTypeId: testDocumentType.id,
          orderId: testOrder.id,
          title: `Documento de Prueba - ${new Date().toLocaleTimeString()}`,
          description: 'Este es un documento de prueba creado para verificar la funcionalidad',
          sharedData: {
            orderNumber: testOrder.orderNumber,
            clientName: testOrder.client?.companyName || 'Cliente de Prueba',
            orderTitle: testOrder.title,
            createdDate: new Date().toISOString()
          },
          specificData: {
            testField: 'Valor de prueba',
            createdBy: 'Sistema de testing'
          }
        };
        
        console.log('📝 Datos del documento de prueba:', testDocumentData);
        
        const newDocument = await window.documentsApi.createDocument(testDocumentData);
        console.log('✅ Documento de prueba creado:', newDocument);
        
        // Actualizar datos
        await refreshData();
        
        showSuccess('Documento de prueba creado exitosamente');
        
        return newDocument;
      } catch (error) {
        console.error('❌ Error en prueba de creación:', error);
        showError('Error creando documento de prueba: ' + error.message);
      }
    };
    
    // Función de debugging específica para ROI
    window.debugROIComponents = function() {
      console.log('🧮 === DEBUG ROI COMPONENTS ===');
      
      // Buscar campos ROI en el DOM
      const roiFields = document.querySelectorAll('.roi-calculator-field');
      console.log('🔍 Campos ROI encontrados en DOM:', roiFields.length);
      
      roiFields.forEach((field, index) => {
        const fieldName = field.getAttribute('data-field-name');
        console.log(`📋 Campo ROI ${index + 1}:`, {
          fieldName,
          id: field.id,
          innerHTML: field.innerHTML ? 'Tiene contenido' : 'Vacío'
        });
      });
      
      // Verificar tipos de documentos con ROI
      const roiDocTypes = documentTypes.filter(dt => 
        dt.formSchema && dt.formSchema.fields && 
        dt.formSchema.fields.some(f => f.type === 'roi_calculator')
      );
      
      console.log('📊 Tipos de documentos con ROI:', roiDocTypes.length);
      roiDocTypes.forEach(dt => {
        console.log(`📄 ${dt.name}:`, {
          slug: dt.slug,
          roiFields: dt.formSchema.fields.filter(f => f.type === 'roi_calculator')
        });
      });
      
      // Verificar variables globales ROI
      console.log('🔄 Variables ROI globales:', {
        roiEmployees: Object.keys(roiEmployees || {}).length,
        roiAgents: Object.keys(roiAgents || {}).length
      });
      
      console.log('🧮 === FIN DEBUG ROI COMPONENTS ===');
    };

    // 📎 FUNCIÓN ESPECÍFICA: Integrar anexos/attachments en el HTML
    function integrarAnexos(documento, htmlContent) {
      try {
        console.log(`📎 Integrando anexos para documento ${documento.id}`);
        
        const attachments = documento.attachments || [];
        console.log(`📎 Anexos encontrados: ${attachments.length}`);
        
        if (attachments.length === 0) {
          console.log(`📎 No hay anexos para integrar`);
          return htmlContent;
        }
        
        // Generar HTML para los anexos
        const anexosHTML = generarHTMLAnexos(attachments);
        
        // Buscar donde insertar los anexos (antes del footer)
        const footerPattern = /<!--\s*Footer\s*-->/i;
        if (footerPattern.test(htmlContent)) {
          htmlContent = htmlContent.replace(footerPattern, `${anexosHTML}\n\n          <!-- Footer -->`);
          console.log(`✅ Anexos integrados antes del footer`);
        } else {
          // Fallback: agregar al final del contenido
          const bodyClosePattern = /<\/body>/i;
          if (bodyClosePattern.test(htmlContent)) {
            htmlContent = htmlContent.replace(bodyClosePattern, `${anexosHTML}\n</body>`);
            console.log(`✅ Anexos integrados antes del cierre del body (fallback)`);
          } else {
            htmlContent += `\n${anexosHTML}`;
            console.log(`✅ Anexos agregados al final (fallback)`);
          }
        }
        
        return htmlContent;
        
      } catch (error) {
        console.error('❌ Error integrando anexos:', error);
        return htmlContent;
      }
    }

    // 📎 FUNCIÓN AUXILIAR: Generar HTML completo para anexos
    function generarHTMLAnexos(attachments) {
      console.log(`📎 Generando HTML para ${attachments.length} anexos`);
      
      // Agrupar attachments por categoría
      const attachmentsPorCategoria = agruparAnexosPorCategoria(attachments);
      
      let htmlAnexos = '';
      
      Object.entries(attachmentsPorCategoria).forEach(([categoria, anexos]) => {
        const tituloCategoria = formatearNombreCategoria(categoria);
        
        htmlAnexos += `
          <!-- Sección de Anexos: ${tituloCategoria} -->
          <div class="section">
            <div class="section-header">
              <div class="section-title">📎 ${tituloCategoria}</div>
            </div>
            <div class="section-content">
              <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px;">
                ${anexos.map(anexo => generarHTMLAnexoItem(anexo)).join('')}
              </div>
            </div>
          </div>
        `;
      });
      
      return htmlAnexos;
    }

    // 📎 FUNCIÓN AUXILIAR: Generar HTML para un anexo individual
    function generarHTMLAnexoItem(anexo) {
      const iconoArchivo = obtenerIconoArchivo(anexo.type || anexo.mimeType);
      const tamanoArchivo = formatearTamanoArchivo(anexo.size || 0);
      const fechaSubida = anexo.uploadedAt ? new Date(anexo.uploadedAt).toLocaleDateString('es-ES') : 'N/A';
      const usuario = anexo.uploadedBy?.name || 'Usuario';
      
      return `
        <div style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 8px; overflow: hidden; transition: all 0.3s ease;">
          <!-- Header del anexo -->
          <div style="background: linear-gradient(90deg, #14b8a6, #10b981); color: white; padding: 10px 15px; display: flex; align-items: center; justify-content: space-between;">
            <div style="display: flex; align-items: center; flex: 1;">
              <span style="font-size: 18px; margin-right: 8px;">${iconoArchivo}</span>
              <span style="font-weight: 600; font-size: 14px;">${anexo.originalName || anexo.filename}</span>
            </div>
            <span style="font-size: 11px; opacity: 0.9; background: rgba(255, 255, 255, 0.2); padding: 2px 8px; border-radius: 10px;">${tamanoArchivo}</span>
          </div>
          
          <!-- Vista previa del anexo -->
          <div style="padding: 15px; text-align: center;">
            ${generarVistaProviaAnexo(anexo)}
            
            <!-- Información del anexo -->
            <div style="background: white; padding: 10px; border-radius: 6px; border: 1px solid #e2e8f0; margin-top: 10px;">
              <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 11px; color: #64748b; margin-bottom: 8px;">
                <div style="display: flex; justify-content: space-between;">
                  <span>Tipo:</span>
                  <span>${obtenerNombreTipoArchivo(anexo.type || anexo.mimeType)}</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                  <span>Subido:</span>
                  <span>${fechaSubida}</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                  <span>Por:</span>
                  <span>${usuario}</span>
                </div>
                <div style="display: flex; justify-content: space-between;">
                  <span>Categoría:</span>
                  <span>${anexo.category || 'General'}</span>
                </div>
              </div>
              
              ${anexo.description ? `
                <div style="font-size: 12px; color: #475569; font-style: italic; margin-top: 8px; padding-top: 8px; border-top: 1px solid #f1f5f9;">
                  "${anexo.description}"
                </div>
              ` : ''}
            </div>
          </div>
        </div>
      `;
    }

    // 📎 FUNCIÓN AUXILIAR: Generar vista previa según tipo de archivo
    function generarVistaProviaAnexo(anexo) {
      const mimeType = anexo.mimeType || '';
      const type = anexo.type || obtenerTipoArchivoDesdeMime(mimeType);
      
      // Vista previa para imágenes
      if (type === 'image' || mimeType.startsWith('image/')) {
        return `
          <div>
            <img src="${anexo.url}" alt="${anexo.originalName}" 
                 style="max-width: 100%; max-height: 200px; width: auto; height: auto; border-radius: 6px; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); margin-bottom: 10px;"
                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
            <div style="display: none; width: 100%; height: 120px; background: linear-gradient(135deg, #f1f5f9, #e2e8f0); border-radius: 6px; align-items: center; justify-content: center; margin-bottom: 10px; border: 2px dashed #cbd5e1;">
              <div style="text-align: center;">
                <div style="font-size: 48px; color: #94a3b8; margin-bottom: 8px;">🖼️</div>
                <div style="font-size: 12px; color: #64748b;">Vista previa no disponible</div>
              </div>
            </div>
          </div>
        `;
      }
      
      // Vista previa para PDFs
      if (type === 'pdf' || mimeType === 'application/pdf') {
        return `
          <div style="width: 100%; height: 120px; background: linear-gradient(135deg, #f1f5f9, #e2e8f0); border-radius: 6px; display: flex; align-items: center; justify-content: center; margin-bottom: 10px; border: 2px dashed #cbd5e1;">
            <div style="text-align: center;">
              <div style="font-size: 48px; color: #94a3b8; margin-bottom: 8px;">📄</div>
              <div style="font-size: 12px; color: #64748b; font-weight: 600;">Documento PDF</div>
              <div style="font-size: 10px; color: #94a3b8; margin-top: 4px;">
                Haga clic para abrir
              </div>
            </div>
          </div>
        `;
      }
      
      // Vista previa para documentos de oficina
      if (type === 'document' || esDocumentoOficina(mimeType)) {
        const iconoDoc = obtenerIconoDocumento(mimeType);
        return `
          <div style="width: 100%; height: 120px; background: linear-gradient(135deg, #f1f5f9, #e2e8f0); border-radius: 6px; display: flex; align-items: center; justify-content: center; margin-bottom: 10px; border: 2px dashed #cbd5e1;">
            <div style="text-align: center;">
              <div style="font-size: 48px; color: #94a3b8; margin-bottom: 8px;">${iconoDoc}</div>
              <div style="font-size: 12px; color: #64748b; font-weight: 600;">
                ${obtenerNombreTipoDocumento(mimeType)}
              </div>
              <div style="font-size: 10px; color: #94a3b8; margin-top: 4px;">
                Archivo de documento
              </div>
            </div>
          </div>
        `;
      }
      
      // Vista previa para videos
      if (type === 'video' || mimeType.startsWith('video/')) {
        return `
          <div style="width: 100%; height: 120px; background: linear-gradient(135deg, #f1f5f9, #e2e8f0); border-radius: 6px; display: flex; align-items: center; justify-content: center; margin-bottom: 10px; border: 2px dashed #cbd5e1;">
            <div style="text-align: center;">
              <div style="font-size: 48px; color: #94a3b8; margin-bottom: 8px;">🎥</div>
              <div style="font-size: 12px; color: #64748b; font-weight: 600;">Archivo de Video</div>
              <div style="font-size: 10px; color: #94a3b8; margin-top: 4px;">
                ${obtenerNombreTipoVideo(mimeType)}
              </div>
            </div>
          </div>
        `;
      }
      
      // Vista previa para audio
      if (type === 'audio' || mimeType.startsWith('audio/')) {
        return `
          <div style="width: 100%; height: 120px; background: linear-gradient(135deg, #f1f5f9, #e2e8f0); border-radius: 6px; display: flex; align-items: center; justify-content: center; margin-bottom: 10px; border: 2px dashed #cbd5e1;">
            <div style="text-align: center;">
              <div style="font-size: 48px; color: #94a3b8; margin-bottom: 8px;">🎵</div>
              <div style="font-size: 12px; color: #64748b; font-weight: 600;">Archivo de Audio</div>
              <div style="font-size: 10px; color: #94a3b8; margin-top: 4px;">
                ${obtenerNombreTipoAudio(mimeType)}
              </div>
            </div>
          </div>
        `;
      }
      
      // Vista previa genérica
      return `
        <div style="width: 100%; height: 120px; background: linear-gradient(135deg, #f1f5f9, #e2e8f0); border-radius: 6px; display: flex; align-items: center; justify-content: center; margin-bottom: 10px; border: 2px dashed #cbd5e1;">
          <div style="text-align: center;">
            <div style="font-size: 48px; color: #94a3b8; margin-bottom: 8px;">📎</div>
            <div style="font-size: 12px; color: #64748b; font-weight: 600;">Archivo Adjunto</div>
            <div style="font-size: 10px; color: #94a3b8; margin-top: 4px;">
              ${mimeType || 'Tipo desconocido'}
            </div>
          </div>
        </div>
      `;
    }

    // 📎 FUNCIONES AUXILIARES para anexos
    function agruparAnexosPorCategoria(attachments) {
      const agrupados = {};
      
      attachments.forEach(attachment => {
        const categoria = attachment.category || 'Anexos Generales';
        if (!agrupados[categoria]) {
          agrupados[categoria] = [];
        }
        agrupados[categoria].push(attachment);
      });
      
      return agrupados;
    }

    function formatearNombreCategoria(categoria) {
      const traducciones = {
        'general': 'Anexos Generales',
        'technical': 'Documentación Técnica',
        'financial': 'Documentos Financieros',
        'legal': 'Documentos Legales',
        'images': 'Imágenes y Gráficos',
        'reports': 'Reportes y Análisis',
        'contracts': 'Contratos y Acuerdos',
        'specifications': 'Especificaciones',
        'manuals': 'Manuales y Guías',
        'certificates': 'Certificados',
        'presentations': 'Presentaciones',
        'other': 'Otros Documentos'
      };
      
      return traducciones[categoria.toLowerCase()] || categoria;
    }

    function obtenerIconoArchivo(type) {
      const iconos = {
        'pdf': '📄',
        'image': '🖼️',
        'document': '📝',
        'video': '🎥',
        'audio': '🎵',
        'spreadsheet': '📊',
        'presentation': '📊',
        'archive': '📦',
        'text': '📃',
        'other': '📎'
      };
      
      return iconos[type] || iconos['other'];
    }

    function obtenerNombreTipoArchivo(type) {
      const nombres = {
        'pdf': 'PDF',
        'image': 'Imagen',
        'document': 'Documento',
        'video': 'Video',
        'audio': 'Audio',
        'spreadsheet': 'Hoja de Cálculo',
        'presentation': 'Presentación',
        'archive': 'Archivo Comprimido',
        'text': 'Texto',
        'other': 'Archivo'
      };
      
      return nombres[type] || 'Archivo';
    }

    function obtenerTipoArchivoDesdeMime(mimeType) {
      if (mimeType.startsWith('image/')) return 'image';
      if (mimeType === 'application/pdf') return 'pdf';
      if (mimeType.startsWith('video/')) return 'video';
      if (mimeType.startsWith('audio/')) return 'audio';
      if (esDocumentoOficina(mimeType)) return 'document';
      if (esHojaCalculo(mimeType)) return 'spreadsheet';
      if (esPresentacion(mimeType)) return 'presentation';
      if (esArchivo(mimeType)) return 'archive';
      if (mimeType.startsWith('text/')) return 'text';
      
      return 'other';
    }

    function esDocumentoOficina(mimeType) {
      const tiposOficina = [
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/rtf',
        'text/plain'
      ];
      
      return tiposOficina.includes(mimeType);
    }

    function esHojaCalculo(mimeType) {
      const tiposHoja = [
        'application/vnd.ms-excel',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'text/csv'
      ];
      
      return tiposHoja.includes(mimeType);
    }

    function esPresentacion(mimeType) {
      const tiposPresentacion = [
        'application/vnd.ms-powerpoint',
        'application/vnd.openxmlformats-officedocument.presentationml.presentation'
      ];
      
      return tiposPresentacion.includes(mimeType);
    }

    function esArchivo(mimeType) {
      const tiposArchivo = [
        'application/zip',
        'application/x-rar-compressed',
        'application/x-7z-compressed',
        'application/gzip'
      ];
      
      return tiposArchivo.includes(mimeType);
    }

    function obtenerIconoDocumento(mimeType) {
      if (mimeType.includes('word')) return '📝';
      if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return '📊';
      if (mimeType.includes('powerpoint') || mimeType.includes('presentation')) return '📊';
      if (mimeType === 'text/plain') return '📃';
      if (mimeType === 'application/rtf') return '📄';
      
      return '📝';
    }

    function obtenerNombreTipoDocumento(mimeType) {
      if (mimeType.includes('word')) return 'Documento Word';
      if (mimeType.includes('excel') || mimeType.includes('spreadsheet')) return 'Hoja Excel';
      if (mimeType.includes('powerpoint') || mimeType.includes('presentation')) return 'Presentación PowerPoint';
      if (mimeType === 'text/plain') return 'Archivo de Texto';
      if (mimeType === 'application/rtf') return 'Documento RTF';
      
      return 'Documento';
    }

    function obtenerNombreTipoVideo(mimeType) {
      if (mimeType.includes('mp4')) return 'Video MP4';
      if (mimeType.includes('avi')) return 'Video AVI';
      if (mimeType.includes('mov')) return 'Video MOV';
      if (mimeType.includes('wmv')) return 'Video WMV';
      if (mimeType.includes('webm')) return 'Video WebM';
      
      return 'Archivo de Video';
    }

    function obtenerNombreTipoAudio(mimeType) {
      if (mimeType.includes('mp3')) return 'Audio MP3';
      if (mimeType.includes('wav')) return 'Audio WAV';
      if (mimeType.includes('ogg')) return 'Audio OGG';
      if (mimeType.includes('flac')) return 'Audio FLAC';
      if (mimeType.includes('aac')) return 'Audio AAC';
      
      return 'Archivo de Audio';
    }

    function formatearTamanoArchivo(bytes) {
      if (bytes === 0) return '0 Bytes';
      
      const k = 1024;
      const tamaños = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + tamaños[i];
    }

    // Hacer las funciones globales para que puedan ser llamadas desde el HTML
    window.mostrarSelectorOrden = mostrarSelectorOrden;
    window.seleccionarOrden = seleccionarOrden;
    window.mostrarTiposDocumentos = mostrarTiposDocumentos;
    window.seleccionarTipoDocumento = seleccionarTipoDocumento;
    window.mostrarFormularioDocumento = mostrarFormularioDocumento;
    window.handleDocumentFormSubmit = handleDocumentFormSubmit;
    window.mostrarCrearDocumentos = mostrarCrearDocumentos;
    window.mostrarDocumentosOrden = mostrarDocumentosOrden;
    window.mostrarVistaPrevia = mostrarVistaPrevia;
    window.descargarDocumento = descargarDocumento;
    window.descargarDocumentoHTML = descargarDocumentoHTML;
    window.finalizarDocumento = finalizarDocumento;
    window.refreshData = refreshData;
    window.togglePhaseSection = togglePhaseSection;
    window.toggleAllPhases = toggleAllPhases;
    window.toggleModalPhaseSection = toggleModalPhaseSection;
    window.toggleAllModalPhases = toggleAllModalPhases;
    window.testBackendConnection = testBackendConnection;
    window.debugDocumentSystem = window.debugDocumentSystem;
    window.debugOrderDocumentIds = window.debugOrderDocumentIds;
    window.testCreateDocument = window.testCreateDocument;
    window.debugROIComponents = window.debugROIComponents;
    
    // Funciones ROI
    window.showROITab = showROITab;
    window.addEmployee = addEmployee;
    window.removeEmployee = removeEmployee;
    window.updateEmployeesList = updateEmployeesList;
    window.updateROICalculation = updateROICalculation;

    // Funciones de utilidad para AIM Quote Calculator
    window.aimQuoteData = {};
    
    // ❌ FUNCIÓN CONFLICTIVA ELIMINADA - USAMOS LA FUNCIÓN MEJORADA ARRIBA
    // Esta función básica solo cambiaba estilos pero no el contenido visible
    // window.switchAIMTab = function(fieldName, tabIndex) { ... }
    console.log('🚀 Función switchAIMTab conflictiva eliminada - usando función mejorada');
    
    window.selectAIMAgent = function(fieldName, agentId) {
      console.log(`💰 Selecting AIM agent ${agentId} for field ${fieldName}`);
      
      if (!window.aimQuoteData[fieldName]) {
        window.aimQuoteData[fieldName] = {
          selectedAgents: [],
          selectedPlan: null,
          selectedServices: [],
          quoteConfig: {}
        };
      }
      
      // Toggle agent selection
      const currentAgents = window.aimQuoteData[fieldName].selectedAgents;
      const agentIndex = currentAgents.findIndex(agent => agent.id === agentId);
      
      if (agentIndex > -1) {
        currentAgents.splice(agentIndex, 1);
        console.log(`💰 Removed agent ${agentId}`);
      } else {
        // Agregar agente con datos completos
        const agentData = getAIMAgentData(agentId);
        currentAgents.push(agentData);
        console.log(`💰 Added agent ${agentId}`, agentData);
      }
      
      updateAIMQuoteCalculation(fieldName);
    };
    
    // ❌ FUNCIÓN CONFLICTIVA ELIMINADA #2 - USAMOS LA FUNCIÓN MEJORADA ARRIBA
    // Esta función simple está sobrescribiendo la función correcta con manejo de eventos y UI
    // window.selectAIMPlan = function(fieldName, planId) { ... }
    console.log('🚀 Segunda función selectAIMPlan conflictiva eliminada - usando función mejorada');
    
    window.selectAIMService = function(fieldName, serviceId) {
      console.log(`💰 Selecting AIM service ${serviceId} for field ${fieldName}`);
      
      if (!window.aimQuoteData[fieldName]) {
        window.aimQuoteData[fieldName] = {
          selectedAgents: [],
          selectedPlan: null,
          selectedServices: [],
          quoteConfig: {}
        };
      }
      
      const currentServices = window.aimQuoteData[fieldName].selectedServices;
      const serviceIndex = currentServices.findIndex(service => service.id === serviceId);
      
      if (serviceIndex > -1) {
        currentServices.splice(serviceIndex, 1);
      } else {
        const serviceData = getAIMServiceData(serviceId);
        currentServices.push(serviceData);
      }
      
      updateAIMQuoteCalculation(fieldName);
    };
    
    function updateAIMQuoteCalculation(fieldName) {
      const data = window.aimQuoteData[fieldName];
      if (!data) return;
      
      // Calcular totales
      let baseTotal = 0;
      let monthlyTotal = 0;
      
      // Sumar agentes
      data.selectedAgents.forEach(agent => {
        baseTotal += agent.basePrice;
        monthlyTotal += agent.monthlyPrice;
      });
      
      // Aplicar multiplicador del plan
      if (data.selectedPlan) {
        baseTotal *= data.selectedPlan.multiplier;
        monthlyTotal = data.selectedPlan.monthlyPrice;
      }
      
      // Sumar servicios adicionales
      data.selectedServices.forEach(service => {
        if (service.type === 'one-time') {
          baseTotal += service.price;
        } else if (service.type === 'monthly') {
          monthlyTotal += service.price;
        }
      });
      
      const calculationResult = {
        ...data,
        calculations: {
          baseTotal,
          monthlyTotal,
          firstYearTotal: baseTotal + (monthlyTotal * 12),
          roi: data.selectedAgents.reduce((acc, agent) => acc + (agent.roiMonthly || 0), 0),
          timestamp: new Date().toISOString()
        }
      };
      
      // Actualizar input oculto
      const hiddenInput = document.getElementById(fieldName);
      if (hiddenInput) {
        hiddenInput.value = JSON.stringify(calculationResult);
        console.log(`💰 AIM quote calculation updated for ${fieldName}:`, calculationResult);
      }
    }
    
    function getAIMAgentData(agentId) {
      const agents = {
        'ap-301': {
          id: 'ap-301',
          name: 'Agente Cuentas por Pagar (AP-301)',
          description: 'Automatiza recepción, validación e ingreso de facturas con OCR avanzado',
          basePrice: 45000,
          monthlyPrice: 8500,
          complexity: 'Medium',
          category: 'Finanzas',
          roiMonthly: 15000,
          features: ['OCR Avanzado', 'Validación Automática', 'Integración SAP/ERP']
        },
        'bank-reconciliation': {
          id: 'bank-reconciliation',
          name: 'Conciliación Bancaria Automática',
          description: 'Automatiza la conciliación entre estados de cuenta bancarios y registros contables',
          basePrice: 38000,
          monthlyPrice: 7200,
          complexity: 'Medium',
          category: 'Finanzas',
          roiMonthly: 12000,
          features: ['Conciliación Automática', 'Detección de Diferencias', 'Reportes Automáticos']
        },
        'logistics-tracking': {
          id: 'logistics-tracking',
          name: 'Seguimiento Logístico (TRK-100)',
          description: 'Monitoreo en tiempo real de envíos y optimización de rutas de entrega',
          basePrice: 35000,
          monthlyPrice: 6500,
          complexity: 'Low',
          category: 'Logística',
          roiMonthly: 10000,
          features: ['Tracking en Tiempo Real', 'Optimización de Rutas', 'Notificaciones Automáticas']
        },
        'customer-support': {
          id: 'customer-support',
          name: 'Soporte al Cliente con IA',
          description: 'Chatbot inteligente 24/7 con escalamiento automático a agentes humanos',
          basePrice: 32000,
          monthlyPrice: 5800,
          complexity: 'Low',
          category: 'Atención al Cliente',
          roiMonthly: 8500,
          features: ['Chatbot 24/7', 'Escalamiento Inteligente', 'Base de Conocimientos']
        },
        'inventory-sync': {
          id: 'inventory-sync',
          name: 'Sincronización de Inventarios',
          description: 'Sincronización en tiempo real entre múltiples sistemas de inventario y plataformas',
          basePrice: 48000,
          monthlyPrice: 9200,
          complexity: 'High',
          category: 'Inventarios',
          roiMonthly: 18000,
          features: ['Sincronización Tiempo Real', 'Multi-plataforma', 'Alertas de Stock']
        },
        'quality-control': {
          id: 'quality-control',
          name: 'Control de Calidad con IA',
          description: 'Inspección automatizada con visión artificial y machine learning',
          basePrice: 52000,
          monthlyPrice: 9800,
          complexity: 'High',
          category: 'Producción',
          roiMonthly: 20000,
          features: ['Visión Artificial', 'Machine Learning', 'Reportes de Calidad']
        }
      };
      
      return agents[agentId] || null;
    }
    
    function getAIMPlanData(planId) {
      const plans = {
        'aim-gestionado': {
          id: 'aim-gestionado',
          name: 'AIM-Gestionado',
          description: 'Solución completamente administrada en la nube',
          monthlyPrice: 8500,
          multiplier: 1.0,
          features: ['Instalación en la Nube', 'Mantenimiento Incluido', 'Soporte 24/7', 'Actualizaciones Automáticas']
        },
        'aim-local': {
          id: 'aim-local',
          name: 'AIM-Local',
          description: 'Instalación on-premise en infraestructura del cliente',
          monthlyPrice: 3500,
          multiplier: 1.2,
          features: ['Instalación On-Premise', 'Control Total', 'Personalización Avanzada', 'Soporte Técnico']
        },
        'aim-hibrido': {
          id: 'aim-hibrido',
          name: 'AIM-Híbrido',
          description: 'Hospedaje en plataforma de terceros con gestión compartida',
          monthlyPrice: 5500,
          multiplier: 0.9,
          features: ['Hospedaje Terceros', 'Gestión Compartida', 'Escalabilidad', 'Costos Optimizados']
        }
      };
      
      return plans[planId] || null;
    }
    
    function getAIMServiceData(serviceId) {
      const services = {
        'training-basic': {
          id: 'training-basic',
          name: 'Capacitación Básica',
          description: 'Entrenamiento fundamental para usuarios finales',
          price: 8500,
          type: 'one-time',
          category: 'training'
        },
        'training-advanced': {
          id: 'training-advanced',
          name: 'Capacitación Avanzada',
          description: 'Entrenamiento especializado para administradores',
          price: 15000,
          type: 'one-time',
          category: 'training'
        },
        'consulting': {
          id: 'consulting',
          name: 'Consultoría Especializada',
          description: 'Asesoría personalizada por hora',
          price: 1200,
          type: 'hourly',
          category: 'consulting'
        },
        'custom-dashboard': {
          id: 'custom-dashboard',
          name: 'Dashboard Personalizado',
          description: 'Desarrollo de dashboard específico para el cliente',
          price: 25000,
          type: 'one-time',
          category: 'development'
        },
        'priority-support': {
          id: 'priority-support',
          name: 'Soporte Prioritario',
          description: 'Soporte técnico con tiempo de respuesta garantizado',
          price: 3500,
          type: 'monthly',
          category: 'support'
        }
      };
      
      return services[serviceId] || null;
    }
    
    // Función para probar el flujo completo: crear y luego consultar
    window.testCreateAndQuery = async function() {
      console.log('🧪 === PRUEBA COMPLETA: CREAR Y CONSULTAR ===');
      
      try {
        // 1. Crear un documento de prueba
        console.log('1️⃣ Creando documento de prueba...');
        const newDoc = await window.testCreateDocument();
        
        if (!newDoc) {
          console.error('❌ No se pudo crear el documento de prueba');
          return;
        }
        
        console.log('✅ Documento creado:', {
          id: newDoc.id,
          title: newDoc.title,
          orderId: newDoc.orderId
        });
        
        // 2. Esperar un momento
        console.log('2️⃣ Esperando 2 segundos...');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // 3. Consultar documentos para esa orden
        console.log('3️⃣ Consultando documentos para la orden...');
        const orderDocs = await window.documentsApi.getDocumentsByOrder(newDoc.orderId);
        
        console.log('📊 Resultado de la consulta:', orderDocs);
        console.log(`📄 Documentos encontrados: ${orderDocs.documents?.length || 0}`);
        
        // 4. Verificar si el documento creado aparece en la consulta
        if (orderDocs.documents && orderDocs.documents.length > 0) {
          const foundDoc = orderDocs.documents.find(doc => doc.id === newDoc.id);
          if (foundDoc) {
            console.log('✅ ÉXITO: El documento creado SÍ aparece en la consulta');
            console.log('📄 Documento encontrado:', {
              id: foundDoc.id,
              title: foundDoc.title,
              status: foundDoc.status
            });
          } else {
            console.log('❌ PROBLEMA: El documento creado NO aparece en la consulta');
            console.log('🔍 Comparando IDs...');
            console.log('ID buscado:', newDoc.id);
            console.log('IDs encontrados:', orderDocs.documents.map(d => d.id));
          }
        } else {
          console.log('❌ PROBLEMA: No se encontraron documentos para la orden');
        }
        
        console.log('🧪 === FIN DE LA PRUEBA COMPLETA ===');
        
      } catch (error) {
        console.error('❌ Error en la prueba completa:', error);
      }
    };
  </script>
</PortalLayoutSidebar> 