---
import PortalClientLayoutSidebar from '../../layouts/PortalClientLayoutSidebar.astro';
import { Icon } from 'astro-icon/components';
---

<PortalClientLayoutSidebar title="Mis Agentes - Portal de Clientes AIM">
  <!-- Contenedor de autenticaci√≥n -->
  <div id="auth-container">
    <!-- Loading state -->
    <div id="auth-loading" class="min-h-screen bg-gray-50 flex items-center justify-center">
      <div class="text-center">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-teal-600 mx-auto mb-4"></div>
        <p class="text-gray-600">Verificando autenticaci√≥n...</p>
      </div>
    </div>

    <!-- Main content (hidden initially) -->
    <div id="main-content" class="hidden">
      <!-- Header con estad√≠sticas -->
      <div class="mb-8">
        <div class="bg-gradient-to-r from-emerald-600 to-teal-600 rounded-xl p-6 text-white">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-2xl font-bold mb-2">Mis Agentes de Automatizaci√≥n</h1>
              <p class="text-emerald-100">Supervisa el desarrollo y rendimiento de tus agentes personalizados</p>
            </div>
            <div class="text-right">
              <div class="text-emerald-100 text-sm">Agentes activos</div>
              <div class="text-3xl font-bold" id="headerActiveAgents">0</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Stats Grid -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm text-gray-500 mb-1">Total Agentes</p>
              <p class="text-2xl font-bold text-gray-900" id="stat-total">0</p>
              <p class="text-sm text-emerald-600 flex items-center mt-2">
                <Icon name="tabler:robot" class="w-4 h-4 mr-1" />
                Todos
              </p>
            </div>
            <div class="p-3 bg-emerald-50 rounded-lg">
              <Icon name="tabler:robot" class="w-6 h-6 text-emerald-600" />
            </div>
          </div>
        </div>

        <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm text-gray-500 mb-1">Activos</p>
              <p class="text-2xl font-bold text-gray-900" id="stat-active">0</p>
              <p class="text-sm text-green-600 flex items-center mt-2">
                <Icon name="tabler:circle-check" class="w-4 h-4 mr-1" />
                En producci√≥n
              </p>
            </div>
            <div class="p-3 bg-green-50 rounded-lg">
              <Icon name="tabler:activity" class="w-6 h-6 text-green-600" />
            </div>
          </div>
        </div>

        <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm text-gray-500 mb-1">En Desarrollo</p>
              <p class="text-2xl font-bold text-gray-900" id="stat-development">0</p>
              <p class="text-sm text-blue-600 flex items-center mt-2">
                <Icon name="tabler:settings" class="w-4 h-4 mr-1" />
                Configurando
              </p>
            </div>
            <div class="p-3 bg-blue-50 rounded-lg">
              <Icon name="tabler:tools" class="w-6 h-6 text-blue-600" />
            </div>
          </div>
        </div>

        <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm text-gray-500 mb-1">Ejecuciones</p>
              <p class="text-2xl font-bold text-gray-900" id="stat-executions">0</p>
              <p class="text-sm text-purple-600 flex items-center mt-2">
                <Icon name="tabler:bolt" class="w-4 h-4 mr-1" />
                Este mes
              </p>
            </div>
            <div class="p-3 bg-purple-50 rounded-lg">
              <Icon name="tabler:bolt" class="w-6 h-6 text-purple-600" />
            </div>
          </div>
        </div>
      </div>

      <!-- Filters and Search -->
      <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100 mb-8">
        <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div class="flex-1">
            <div class="relative">
              <Icon name="tabler:search" class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
              <input 
                type="text" 
                id="search-input"
                placeholder="Buscar por nombre, n√∫mero o descripci√≥n..."
                class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent"
              />
            </div>
          </div>
          
          <div class="flex gap-3">
            <select id="status-filter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent">
              <option value="">Todos los estados</option>
              <option value="DRAFT">Borrador</option>
              <option value="IN_DEVELOPMENT">En Desarrollo</option>
              <option value="TESTING">Testing</option>
              <option value="ACTIVE">Activo</option>
              <option value="INACTIVE">Inactivo</option>
              <option value="ERROR">Error</option>
            </select>
            
            <select id="connection-filter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent">
              <option value="">Todos los tipos</option>
              <option value="API">API</option>
              <option value="RPA">RPA</option>
              <option value="WEBSCRAPING">Web Scraping</option>
              <option value="FILE">Archivos</option>
              <option value="DATABASE">Base de Datos</option>
              <option value="IOT_SENSORS">IoT Sensors</option>
            </select>
            
            <button id="clear-filters" class="px-4 py-2 text-gray-600 hover:text-gray-800 border border-gray-300 rounded-lg hover:bg-gray-50">
              <Icon name="tabler:x" class="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      <!-- Agents Grid -->
      <div id="agents-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- Loading state -->
        <div id="loading-agents" class="col-span-full flex items-center justify-center py-12">
          <div class="text-center">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600 mx-auto mb-4"></div>
            <span class="text-gray-500">Cargando agentes...</span>
          </div>
        </div>
      </div>

      <!-- Pagination -->
      <div id="pagination" class="mt-8 bg-white rounded-xl p-6 shadow-sm border border-gray-100">
        <div class="flex items-center justify-between">
          <div class="text-sm text-gray-700">
            Mostrando <span id="pagination-from">0</span> a <span id="pagination-to">0</span> de <span id="pagination-total">0</span> agentes
          </div>
          <div class="flex space-x-2">
            <button id="prev-page" class="px-3 py-1 text-sm bg-white border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
              Anterior
            </button>
            <div id="page-numbers" class="flex space-x-1">
              <!-- Page numbers will be inserted here -->
            </div>
            <button id="next-page" class="px-3 py-1 text-sm bg-white border border-gray-300 rounded hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
              Siguiente
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Agent Detail Modal -->
  <div id="agent-detail-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-lg bg-white">
      <div class="flex items-center justify-between pb-4 border-b">
        <h3 class="text-xl font-semibold text-gray-900" id="modal-agent-title">Detalle del Agente</h3>
        <button onclick="closeAgentDetailModal()" class="text-gray-400 hover:text-gray-600">
          <Icon name="tabler:x" class="w-6 h-6" />
        </button>
      </div>
      
      <div id="modal-content" class="py-6">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600 mx-auto"></div>
      </div>
    </div>
  </div>
</PortalClientLayoutSidebar>

<script>
  import { userStore } from '../../lib/userStore.js';
  import { apiClient } from '../../lib/apiClient.js';

  // Variables globales
  let unsubscribe = null;
  let currentAgents = [];
  let currentPage = 1;
  let totalPages = 1;
  let totalAgents = 0;
  const agentsPerPage = 9;
  
  let currentFilters = {
    search: '',
    status: '',
    connectionType: '',
    sortBy: 'createdAt',
    sortOrder: 'desc'
  };

  // Inicializar cuando el DOM est√© listo
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('üîÑ Inicializando p√°gina de agentes del cliente...');
    await initializeAgentsPage();
  });

  // Inicializar p√°gina de agentes
  async function initializeAgentsPage() {
    try {
      // Suscribirse a cambios del store
      unsubscribe = userStore.subscribe(handleStoreUpdate);
      
      // Obtener el estado actual del store
      const currentState = userStore.getState();
      
      if (currentState.user && currentState.initialized) {
        console.log('‚úÖ Usando datos ya cargados del store');
        await onAuthSuccess(currentState.user);
      } else {
        console.log('üì° Cargando datos del usuario...');
        await userStore.loadUser();
      }
      
    } catch (error) {
      console.error('‚ùå Error inicializando p√°gina de agentes:', error);
      onAuthError(error);
    }
  }

  // Manejar actualizaciones del store
  function handleStoreUpdate(state) {
    if (state.user && !state.isLoading && !state.error) {
      onAuthSuccess(state.user);
    } else if (state.error) {
      console.error('‚ùå Error en el store:', state.error);
      onAuthError(state.error);
    }
  }

  // Callback cuando la autenticaci√≥n es exitosa
  async function onAuthSuccess(user) {
    try {
      console.log('‚úÖ Agentes - Usuario autenticado:', user);
      
      // Verificar que el usuario es un cliente
      if (user.role !== 'client') {
        console.log('‚ùå Usuario no es cliente, redirigiendo al portal principal...');
        window.location.href = '/portal';
        return;
      }
      
      // Mostrar contenido principal
      showMainContent();
      
      // Configurar event listeners
      setupEventListeners();
      
      // Cargar datos iniciales
      await loadAgents();
      
    } catch (error) {
      console.error('üí• Error cargando p√°gina de agentes:', error);
      onAuthError(error);
    }
  }

  // Callback cuando la autenticaci√≥n falla
  function onAuthError(error) {
    console.error('‚ùå Error de autenticaci√≥n:', error);
    apiClient.clearTokens();
    setTimeout(() => {
      window.location.href = '/login';
    }, 2000);
  }

  // Mostrar contenido principal
  function showMainContent() {
    const loadingElement = document.getElementById('auth-loading');
    const mainContent = document.getElementById('main-content');
    
    if (loadingElement) {
      loadingElement.classList.add('hidden');
    }
    
    if (mainContent) {
      mainContent.classList.remove('hidden');
      console.log('‚úÖ Contenido de agentes mostrado');
    }
  }

  // Configurar event listeners
  function setupEventListeners() {
    // B√∫squeda
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
      searchInput.addEventListener('input', debounce(handleSearch, 300));
    }

    // Filtros
    const statusFilter = document.getElementById('status-filter');
    const connectionFilter = document.getElementById('connection-filter');
    
    if (statusFilter) {
      statusFilter.addEventListener('change', handleFilterChange);
    }
    
    if (connectionFilter) {
      connectionFilter.addEventListener('change', handleFilterChange);
    }

    // Limpiar filtros
    const clearFilters = document.getElementById('clear-filters');
    if (clearFilters) {
      clearFilters.addEventListener('click', clearAllFilters);
    }

    // Paginaci√≥n
    const prevPage = document.getElementById('prev-page');
    const nextPage = document.getElementById('next-page');
    
    if (prevPage) {
      prevPage.addEventListener('click', () => {
        if (currentPage > 1) {
          currentPage--;
          loadAgents();
        }
      });
    }
    
    if (nextPage) {
      nextPage.addEventListener('click', () => {
        if (currentPage < totalPages) {
          currentPage++;
          loadAgents();
        }
      });
    }
  }

  // Cargar agentes desde la API
  async function loadAgents() {
    try {
      console.log('ü§ñ Cargando agentes del cliente...');
      
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: agentsPerPage.toString(),
        ...currentFilters
      });

      const data = await apiClient.request(`/portal-clients/agents?${params}`, {
        method: 'GET'
      });

      if (data.success) {
        currentAgents = data.data.agents;
        totalAgents = data.data.pagination.total;
        totalPages = data.data.pagination.totalPages;
        
        updateAgentsGrid();
        updatePagination(data.data.pagination);
        updateStats();
        
        console.log('‚úÖ Agentes cargados:', currentAgents.length);
      } else {
        throw new Error(data.message || 'Error obteniendo agentes');
      }

    } catch (error) {
      console.error('‚ùå Error cargando agentes:', error);
      showAgentsError();
    }
  }

  // Actualizar grid de agentes
  function updateAgentsGrid() {
    const grid = document.getElementById('agents-grid');
    const loadingAgents = document.getElementById('loading-agents');
    
    if (!grid) return;

    // Ocultar loading
    if (loadingAgents) {
      loadingAgents.classList.add('hidden');
    }

    if (currentAgents.length === 0) {
      grid.innerHTML = `
        <div class="col-span-full flex items-center justify-center py-12">
          <div class="text-center text-gray-500">
            <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
            </svg>
            <p class="text-lg font-medium">No se encontraron agentes</p>
            <p class="text-sm">No tienes agentes que coincidan con los filtros aplicados</p>
          </div>
        </div>
      `;
      return;
    }

    grid.innerHTML = currentAgents.map(agent => `
      <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100 hover:shadow-md transition-shadow cursor-pointer" onclick="openAgentDetail('${agent.id}')">
        <div class="flex items-start justify-between mb-4">
          <div class="flex-1">
            <h3 class="font-semibold text-gray-900 mb-1">${agent.name}</h3>
            <p class="text-sm text-gray-500">${agent.agentNumber}</p>
          </div>
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColors(agent.status)}">
            ${getStatusLabel(agent.status)}
          </span>
        </div>
        
        <p class="text-sm text-gray-600 mb-4 line-clamp-3">${agent.description}</p>
        
        <div class="space-y-3">
          <div class="flex justify-between text-sm">
            <span class="text-gray-500">Tipo:</span>
            <span class="font-medium text-gray-900">${getConnectionTypeLabel(agent.connectionType)}</span>
          </div>
          
          <div class="flex justify-between text-sm">
            <span class="text-gray-500">Complejidad:</span>
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getComplexityColors(agent.complexity)}">
              ${getComplexityLabel(agent.complexity)}
            </span>
          </div>
          
          <div class="flex justify-between text-sm">
            <span class="text-gray-500">Progreso:</span>
            <div class="flex items-center space-x-2">
              <div class="flex-1 bg-gray-200 rounded-full h-2">
                <div class="bg-emerald-600 h-2 rounded-full" style="width: ${agent.progress}%"></div>
              </div>
              <span class="text-xs text-gray-600">${agent.progress}%</span>
            </div>
          </div>
          
          ${agent.successRate !== null ? `
            <div class="flex justify-between text-sm">
              <span class="text-gray-500">√âxito:</span>
              <span class="font-medium text-green-600">${(agent.successRate * 100).toFixed(1)}%</span>
            </div>
          ` : ''}
          
          <div class="flex justify-between text-sm">
            <span class="text-gray-500">Ejecuciones:</span>
            <span class="font-medium text-gray-900">${agent.totalExecutions.toLocaleString()}</span>
          </div>
        </div>
        
        <div class="mt-4 pt-4 border-t border-gray-100">
          <div class="flex items-center justify-between text-xs text-gray-500">
            <span>Orden: ${agent.order.orderNumber}</span>
            <span>Creado: ${new Date(agent.createdAt).toLocaleDateString('es-ES')}</span>
          </div>
        </div>
      </div>
    `).join('');
  }

  // Actualizar estad√≠sticas
  function updateStats() {
    const stats = currentAgents.reduce((acc, agent) => {
      acc.total++;
      acc.executions += agent.totalExecutions;
      
      switch (agent.status) {
        case 'ACTIVE':
          acc.active++;
          break;
        case 'IN_DEVELOPMENT':
        case 'TESTING':
          acc.development++;
          break;
      }
      return acc;
    }, { total: 0, active: 0, development: 0, executions: 0 });

    // En realidad, deber√≠amos usar los totales reales de la API, no solo de la p√°gina actual
    document.getElementById('stat-total').textContent = totalAgents;
    document.getElementById('headerActiveAgents').textContent = stats.active;
    document.getElementById('stat-active').textContent = stats.active;
    document.getElementById('stat-development').textContent = stats.development;
    document.getElementById('stat-executions').textContent = stats.executions.toLocaleString();
  }

  // Actualizar paginaci√≥n
  function updatePagination(pagination) {
    const { page, limit, total, totalPages, hasNext, hasPrev } = pagination;
    
    const from = (page - 1) * limit + 1;
    const to = Math.min(page * limit, total);
    
    document.getElementById('pagination-from').textContent = from;
    document.getElementById('pagination-to').textContent = to;
    document.getElementById('pagination-total').textContent = total;
    
    const prevBtn = document.getElementById('prev-page');
    const nextBtn = document.getElementById('next-page');
    
    if (prevBtn) {
      prevBtn.disabled = !hasPrev;
    }
    
    if (nextBtn) {
      nextBtn.disabled = !hasNext;
    }
    
    // Actualizar n√∫meros de p√°gina
    const pageNumbers = document.getElementById('page-numbers');
    if (pageNumbers) {
      pageNumbers.innerHTML = generatePageNumbers(page, totalPages);
    }
  }

  // Generar n√∫meros de p√°gina
  function generatePageNumbers(currentPage, totalPages) {
    let pages = [];
    const maxVisible = 5;
    
    let start = Math.max(1, currentPage - Math.floor(maxVisible / 2));
    let end = Math.min(totalPages, start + maxVisible - 1);
    
    if (end - start + 1 < maxVisible && start > 1) {
      start = Math.max(1, end - maxVisible + 1);
    }
    
    for (let i = start; i <= end; i++) {
      pages.push(`
        <button 
          onclick="goToPage(${i})" 
          class="px-3 py-1 text-sm border rounded ${i === currentPage ? 'bg-emerald-600 text-white border-emerald-600' : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'}"
        >
          ${i}
        </button>
      `);
    }
    
    return pages.join('');
  }

  // Ir a p√°gina espec√≠fica
  window.goToPage = function(page) {
    if (page >= 1 && page <= totalPages && page !== currentPage) {
      currentPage = page;
      loadAgents();
    }
  };

  // Manejar b√∫squeda
  function handleSearch(event) {
    currentFilters.search = event.target.value;
    currentPage = 1;
    loadAgents();
  }

  // Manejar cambio de filtros
  function handleFilterChange() {
    const statusFilter = document.getElementById('status-filter');
    const connectionFilter = document.getElementById('connection-filter');
    
    currentFilters.status = statusFilter?.value || '';
    currentFilters.connectionType = connectionFilter?.value || '';
    
    currentPage = 1;
    loadAgents();
  }

  // Limpiar todos los filtros
  function clearAllFilters() {
    const searchInput = document.getElementById('search-input');
    const statusFilter = document.getElementById('status-filter');
    const connectionFilter = document.getElementById('connection-filter');
    
    if (searchInput) searchInput.value = '';
    if (statusFilter) statusFilter.value = '';
    if (connectionFilter) connectionFilter.value = '';
    
    currentFilters = {
      search: '',
      status: '',
      connectionType: '',
      sortBy: 'createdAt',
      sortOrder: 'desc'
    };
    
    currentPage = 1;
    loadAgents();
  }

  // Abrir detalle de agente
  window.openAgentDetail = async function(agentId) {
    try {
      const modal = document.getElementById('agent-detail-modal');
      const modalContent = document.getElementById('modal-content');
      const modalTitle = document.getElementById('modal-agent-title');
      
      if (!modal || !modalContent) return;
      
      // Mostrar modal con loading
      modalContent.innerHTML = '<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600 mx-auto"></div>';
      modal.classList.remove('hidden');
      
      // Encontrar el agente en los datos actuales
      const agent = currentAgents.find(a => a.id === agentId);
      
      if (agent) {
        modalTitle.textContent = `${agent.agentNumber}: ${agent.name}`;
        modalContent.innerHTML = generateAgentDetailHTML(agent);
      } else {
        throw new Error('Agente no encontrado');
      }
      
    } catch (error) {
      console.error('Error abriendo detalle:', error);
      const modalContent = document.getElementById('modal-content');
      if (modalContent) {
        modalContent.innerHTML = '<div class="text-red-600 text-center">Error cargando detalle del agente</div>';
      }
    }
  };

  // Cerrar modal de detalle
  window.closeAgentDetailModal = function() {
    const modal = document.getElementById('agent-detail-modal');
    if (modal) {
      modal.classList.add('hidden');
    }
  };

  // Generar HTML del detalle de agente
  function generateAgentDetailHTML(agent) {
    return `
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div>
          <h4 class="font-semibold text-gray-900 mb-3">Informaci√≥n General</h4>
          <dl class="space-y-2">
            <div class="flex justify-between">
              <dt class="text-sm text-gray-500">N√∫mero:</dt>
              <dd class="text-sm font-medium text-gray-900">${agent.agentNumber}</dd>
            </div>
            <div class="flex justify-between">
              <dt class="text-sm text-gray-500">Estado:</dt>
              <dd><span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColors(agent.status)}">${getStatusLabel(agent.status)}</span></dd>
            </div>
            <div class="flex justify-between">
              <dt class="text-sm text-gray-500">Tipo de conexi√≥n:</dt>
              <dd class="text-sm font-medium text-gray-900">${getConnectionTypeLabel(agent.connectionType)}</dd>
            </div>
            <div class="flex justify-between">
              <dt class="text-sm text-gray-500">Complejidad:</dt>
              <dd><span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getComplexityColors(agent.complexity)}">${getComplexityLabel(agent.complexity)}</span></dd>
            </div>
            <div class="flex justify-between">
              <dt class="text-sm text-gray-500">Versi√≥n:</dt>
              <dd class="text-sm font-medium text-gray-900">${agent.version}</dd>
            </div>
            <div class="flex justify-between">
              <dt class="text-sm text-gray-500">Asignado a:</dt>
              <dd class="text-sm font-medium text-gray-900">${agent.assignedTo?.name || 'Sin asignar'}</dd>
            </div>
          </dl>
        </div>
        
        <div>
          <h4 class="font-semibold text-gray-900 mb-3">Rendimiento</h4>
          <dl class="space-y-2">
            <div class="flex justify-between">
              <dt class="text-sm text-gray-500">Progreso:</dt>
              <dd class="text-sm font-medium text-gray-900">${agent.progress}%</dd>
            </div>
            <div class="flex justify-between">
              <dt class="text-sm text-gray-500">Ejecuciones totales:</dt>
              <dd class="text-sm font-medium text-gray-900">${agent.totalExecutions.toLocaleString()}</dd>
            </div>
            ${agent.successRate !== null ? `
              <div class="flex justify-between">
                <dt class="text-sm text-gray-500">Tasa de √©xito:</dt>
                <dd class="text-sm font-medium text-green-600">${(agent.successRate * 100).toFixed(1)}%</dd>
              </div>
            ` : ''}
            <div class="flex justify-between">
              <dt class="text-sm text-gray-500">Errores:</dt>
              <dd class="text-sm font-medium text-gray-900">${agent.errorCount}</dd>
            </div>
            ${agent.estimatedHours ? `
              <div class="flex justify-between">
                <dt class="text-sm text-gray-500">Horas estimadas:</dt>
                <dd class="text-sm font-medium text-gray-900">${agent.estimatedHours}h</dd>
              </div>
            ` : ''}
            ${agent.actualHours ? `
              <div class="flex justify-between">
                <dt class="text-sm text-gray-500">Horas reales:</dt>
                <dd class="text-sm font-medium text-gray-900">${agent.actualHours}h</dd>
              </div>
            ` : ''}
          </dl>
        </div>
      </div>
      
      <div class="mt-6">
        <h4 class="font-semibold text-gray-900 mb-3">Descripci√≥n</h4>
        <p class="text-sm text-gray-700">${agent.description}</p>
      </div>
      
      <div class="mt-6">
        <h4 class="font-semibold text-gray-900 mb-3">Prop√≥sito</h4>
        <p class="text-sm text-gray-700">${agent.purpose}</p>
      </div>
      
      <div class="mt-6">
        <h4 class="font-semibold text-gray-900 mb-3">Informaci√≥n de la Orden</h4>
        <div class="bg-gray-50 rounded-lg p-4">
          <div class="flex justify-between items-start">
            <div>
              <h5 class="font-medium text-gray-900">${agent.order.orderNumber}</h5>
              <p class="text-sm text-gray-600 mt-1">${agent.order.title}</p>
            </div>
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColors(agent.order.status)}">
              ${getStatusLabel(agent.order.status)}
            </span>
          </div>
        </div>
      </div>
      
      <div class="mt-6">
        <h4 class="font-semibold text-gray-900 mb-3">Fechas</h4>
        <div class="grid grid-cols-2 gap-4">
          <div>
            <p class="text-sm text-gray-500">Creado</p>
            <p class="text-sm font-medium text-gray-900">${new Date(agent.createdAt).toLocaleDateString('es-ES')}</p>
          </div>
          ${agent.startedAt ? `
            <div>
              <p class="text-sm text-gray-500">Iniciado</p>
              <p class="text-sm font-medium text-gray-900">${new Date(agent.startedAt).toLocaleDateString('es-ES')}</p>
            </div>
          ` : ''}
          ${agent.deployedAt ? `
            <div>
              <p class="text-sm text-gray-500">Desplegado</p>
              <p class="text-sm font-medium text-gray-900">${new Date(agent.deployedAt).toLocaleDateString('es-ES')}</p>
            </div>
          ` : ''}
          ${agent.finishedAt ? `
            <div>
              <p class="text-sm text-gray-500">Terminado</p>
              <p class="text-sm font-medium text-gray-900">${new Date(agent.finishedAt).toLocaleDateString('es-ES')}</p>
            </div>
          ` : ''}
        </div>
      </div>
    `;
  }

  // Funciones auxiliares para estilos
  function getStatusColors(status) {
    const colors = {
      'DRAFT': 'bg-gray-100 text-gray-800',
      'IN_DEVELOPMENT': 'bg-blue-100 text-blue-800',
      'TESTING': 'bg-yellow-100 text-yellow-800',
      'ACTIVE': 'bg-green-100 text-green-800',
      'INACTIVE': 'bg-orange-100 text-orange-800',
      'ARCHIVED': 'bg-gray-100 text-gray-800',
      'ERROR': 'bg-red-100 text-red-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  }

  function getStatusLabel(status) {
    const labels = {
      'DRAFT': 'Borrador',
      'IN_DEVELOPMENT': 'En Desarrollo',
      'TESTING': 'Testing',
      'ACTIVE': 'Activo',
      'INACTIVE': 'Inactivo',
      'ARCHIVED': 'Archivado',
      'ERROR': 'Error'
    };
    return labels[status] || status;
  }

  function getConnectionTypeLabel(type) {
    const labels = {
      'API': 'API',
      'RPA': 'RPA',
      'WEBSCRAPING': 'Web Scraping',
      'FILE': 'Archivos',
      'DATABASE': 'Base de Datos',
      'IOT_SENSORS': 'IoT Sensors'
    };
    return labels[type] || type;
  }

  function getComplexityColors(complexity) {
    const colors = {
      'basic': 'bg-green-100 text-green-800',
      'medium': 'bg-yellow-100 text-yellow-800',
      'advanced': 'bg-red-100 text-red-800'
    };
    return colors[complexity] || 'bg-gray-100 text-gray-800';
  }

  function getComplexityLabel(complexity) {
    const labels = {
      'basic': 'B√°sica',
      'medium': 'Media',
      'advanced': 'Avanzada'
    };
    return labels[complexity] || complexity;
  }

  // Mostrar error en el grid
  function showAgentsError() {
    const grid = document.getElementById('agents-grid');
    if (grid) {
      grid.innerHTML = `
        <div class="col-span-full flex items-center justify-center py-12">
          <div class="text-center text-red-500">
            <svg class="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <p class="text-lg font-medium">Error cargando agentes</p>
            <p class="text-sm">Hubo un problema al cargar tus agentes. Int√©ntalo de nuevo.</p>
            <button onclick="loadAgents()" class="mt-4 px-4 py-2 bg-emerald-600 text-white rounded hover:bg-emerald-700">
              Reintentar
            </button>
          </div>
        </div>
      `;
    }
  }

  // Funci√≥n debounce para b√∫squeda
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // Limpiar al cerrar la p√°gina
  window.addEventListener('beforeunload', () => {
    if (unsubscribe) {
      unsubscribe();
    }
  });
</script>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style> 