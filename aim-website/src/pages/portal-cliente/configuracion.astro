---
import PortalClientLayoutSidebar from '../../layouts/PortalClientLayoutSidebar.astro';
import { Icon } from 'astro-icon/components';
---

<PortalClientLayoutSidebar title="Configuración - Portal Cliente AIM">
  <!-- Contenedor principal -->
  <div class="min-h-screen bg-gray-50">
    
    <!-- Estado de carga -->
    <div id="loading-screen" class="flex items-center justify-center min-h-screen">
      <div class="text-center">
        <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-teal-600 mx-auto mb-4"></div>
        <p class="text-gray-600 text-lg">Cargando configuración...</p>
        <p class="text-gray-500 text-sm mt-2">Obteniendo datos del perfil</p>
      </div>
    </div>

    <!-- Estado de error -->
    <div id="error-screen" class="hidden flex items-center justify-center min-h-screen">
      <div class="text-center max-w-md mx-auto p-6">
        <div class="text-red-500 text-6xl mb-4">⚠️</div>
        <h2 class="text-2xl font-bold text-gray-900 mb-2">Error de Autenticación</h2>
        <p class="text-gray-600 mb-6">No se pudo cargar la información de tu cuenta.</p>
        <div class="space-y-3">
          <button id="retry-btn" class="w-full bg-teal-600 hover:bg-teal-700 text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200">
            Reintentar
          </button>
          <a href="/login" class="block w-full bg-gray-200 hover:bg-gray-300 text-gray-800 px-6 py-3 rounded-lg font-medium transition-colors duration-200">
            Iniciar Sesión
          </a>
        </div>
      </div>
    </div>

    <!-- Contenido principal -->
    <div id="main-screen" class="hidden">
      
      <!-- Header -->
      <div class="mb-8">
        <div class="bg-gradient-to-r from-teal-600 to-emerald-600 rounded-xl p-6 text-white">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-2xl font-bold mb-2">Configuración del Cliente</h1>
              <p class="text-teal-100">Administra tu perfil y la información de tu empresa</p>
            </div>
            <div class="text-right">
              <div class="text-teal-100 text-sm">Estado</div>
              <div class="text-3xl font-bold">✓</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Grid principal -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        
        <!-- Columna principal -->
        <div class="lg:col-span-2 space-y-6">
          
          <!-- Información del usuario -->
          <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
            <div class="flex items-center justify-between mb-6">
              <h3 class="text-lg font-semibold text-gray-900">Información Personal</h3>
              <span class="px-3 py-1 bg-gray-100 text-gray-600 rounded-full text-sm">Solo lectura</span>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Nombre Completo</label>
                <span id="config-user-name" class="block w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 font-medium">Cargando...</span>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Correo Electrónico</label>
                <span id="config-user-email" class="block w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 font-medium">Cargando...</span>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Teléfono</label>
                <span id="config-user-phone" class="block w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 font-medium">Cargando...</span>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Departamento</label>
                <span id="config-user-department" class="block w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 font-medium">Cargando...</span>
              </div>
              
              <div class="md:col-span-2">
                <label class="block text-sm font-medium text-gray-700 mb-2">Fecha de Registro</label>
                <span id="config-user-created" class="block w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 font-medium">Cargando...</span>
              </div>
            </div>
          </div>

          <!-- Información de la empresa -->
          <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
            <div class="flex items-center justify-between mb-6">
              <h3 class="text-lg font-semibold text-gray-900">Información de la Empresa</h3>
              <span class="px-3 py-1 bg-blue-100 text-blue-600 rounded-full text-sm">Cliente</span>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Nombre de la Empresa</label>
                <span id="config-company-name" class="block w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 font-medium">Cargando...</span>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">RFC</label>
                <span id="config-company-rfc" class="block w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 font-medium font-mono">Cargando...</span>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Industria</label>
                <span id="config-company-industry" class="block w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 font-medium">Cargando...</span>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Tamaño de Empresa</label>
                <span id="config-company-size" class="block w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 font-medium">Cargando...</span>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Estado</label>
                <span id="config-company-status" class="inline-block px-3 py-1 rounded-full text-sm font-medium">Cargando...</span>
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Cliente Desde</label>
                <span id="config-company-since" class="block w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-900 font-medium">Cargando...</span>
              </div>
              
              <div class="md:col-span-2">
                <label class="block text-sm font-medium text-gray-700 mb-2">Sitio Web</label>
                <span id="config-company-website" class="block w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-blue-600 font-medium">Cargando...</span>
              </div>
            </div>
          </div>

          <!-- Cambio de contraseña -->
          <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
            <h3 class="text-lg font-semibold text-gray-900 mb-6">Cambiar Contraseña</h3>
            
            <form id="password-form" class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Contraseña Actual</label>
                <input 
                  type="password" 
                  id="current-password"
                  name="currentPassword"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
                  placeholder="Ingresa tu contraseña actual"
                  required
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Nueva Contraseña</label>
                <input 
                  type="password" 
                  id="new-password"
                  name="newPassword"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
                  placeholder="Mínimo 8 caracteres"
                  required
                  minlength="8"
                />
              </div>
              
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Confirmar Nueva Contraseña</label>
                <input 
                  type="password" 
                  id="confirm-password"
                  name="confirmPassword"
                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent"
                  placeholder="Confirma tu nueva contraseña"
                  required
                />
              </div>
              
              <div class="pt-4">
                <button 
                  type="submit"
                  class="w-full bg-teal-600 hover:bg-teal-700 text-white px-4 py-2 rounded-lg font-medium transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                  id="password-submit-btn"
                >
                  <Icon name="tabler:lock" class="w-4 h-4 inline mr-2" />
                  Cambiar Contraseña
                </button>
              </div>
            </form>
          </div>
        </div>

        <!-- Sidebar -->
        <div class="space-y-6">
          
          <!-- Estadísticas del usuario -->
          <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Estadísticas</h3>
            <div id="user-stats" class="space-y-3">
              <div class="animate-pulse space-y-3">
                <div class="h-4 bg-gray-200 rounded"></div>
                <div class="h-4 bg-gray-200 rounded"></div>
                <div class="h-4 bg-gray-200 rounded"></div>
                <div class="h-4 bg-gray-200 rounded"></div>
              </div>
            </div>
          </div>

          <!-- Actividades recientes -->
          <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Actividad Reciente</h3>
            <div id="recent-activities" class="space-y-1">
              <div class="animate-pulse space-y-3">
                <div class="h-4 bg-gray-200 rounded w-3/4"></div>
                <div class="h-3 bg-gray-200 rounded w-1/2"></div>
                <div class="h-4 bg-gray-200 rounded w-2/3"></div>
                <div class="h-3 bg-gray-200 rounded w-1/3"></div>
              </div>
            </div>
          </div>

          <!-- Acciones rápidas -->
          <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Acciones</h3>
            <div class="space-y-3">
              <button 
                onclick="handleRefresh()"
                class="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-medium transition-colors duration-200"
              >
                <Icon name="tabler:refresh" class="w-4 h-4 inline mr-2" />
                Actualizar Datos
              </button>
              
              <button 
                onclick="handleLogout()"
                class="w-full bg-red-100 hover:bg-red-200 text-red-700 px-4 py-2 rounded-lg font-medium transition-colors duration-200"
              >
                <Icon name="tabler:logout" class="w-4 h-4 inline mr-2" />
                Cerrar Sesión
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</PortalClientLayoutSidebar>

<script>
  import { createAuthChecker } from '../../lib/auth.js';
const authChecker = createAuthChecker();
  import { apiClient } from '../../lib/apiClient.js';

  // Variables globales
  let currentUser = null;
  let clientData = null;

  // Inicializar la página
  document.addEventListener('DOMContentLoaded', async function() {
    try {
      console.log('🚀 Inicializando página de configuración del cliente...');
      showLoadingScreen();
      
      // Verificar autenticación y rol de cliente
      currentUser = await authChecker.getCurrentUser();
      if (!currentUser) {
        console.error('❌ Usuario no autenticado');
        window.location.href = '/login';
        return;
      }

      if (currentUser.role !== 'client') {
        console.error('❌ Usuario no es cliente, redirigiendo al portal normal');
        window.location.href = '/portal';
        return;
      }

      console.log('✅ Usuario cliente autenticado:', currentUser.email);

      // Cargar datos del perfil del cliente
      await loadClientProfile();
      setupEventListeners();
      
      // Cargar estadísticas y actividad (en paralelo)
      await loadClientStats();
      
      showMainScreen();
      
      console.log('✅ Página de configuración del cliente inicializada correctamente');
    } catch (error) {
      console.error('❌ Error inicializando página de configuración:', error);
      showErrorScreen();
    }
  });

  // Cargar perfil del cliente
  async function loadClientProfile() {
    try {
      console.log('👤 Cargando perfil del cliente...');
      
      const response = await apiClient.request('/portal-clients/profile', {
        method: 'GET'
      });

      currentUser = response.data?.user;
      clientData = response.data?.client;

      console.log('✅ Perfil del cliente cargado:', {
        user: currentUser.email,
        client: clientData.companyName
      });
      
      updateUserInfo();
      updateClientInfo();
      
    } catch (error) {
      console.error('❌ Error cargando perfil del cliente:', error);
      throw error;
    }
  }

  // Cargar estadísticas y actividad del cliente
  async function loadClientStats() {
    try {
      console.log('📊 Cargando estadísticas del cliente...');
      
      const response = await apiClient.request('/portal-clients/dashboard/stats?includeActivity=true&activityLimit=5', {
        method: 'GET'
      });

      const stats = response.data;
      console.log('✅ Estadísticas cargadas:', stats);
      
      updateUserStats(stats);
      updateRecentActivity(stats.recentActivity);
      
    } catch (error) {
      console.error('❌ Error cargando estadísticas:', error);
      // Si no se pueden cargar las estadísticas, mostrar mensaje alternativo
      updateUserStatsError();
      updateRecentActivityError();
    }
  }

  // Actualizar información del usuario
  function updateUserInfo() {
    if (!currentUser) return;

    document.getElementById('config-user-name').textContent = currentUser.name || 'Sin nombre';
    document.getElementById('config-user-email').textContent = currentUser.email || 'Sin email';
    document.getElementById('config-user-phone').textContent = currentUser.phoneNumber || 'Sin teléfono';
    document.getElementById('config-user-department').textContent = currentUser.department || 'Sin departamento';
    document.getElementById('config-user-created').textContent = formatDate(currentUser.createdAt);

    console.log('✅ Información del usuario actualizada');
  }

  // Actualizar información del cliente
  function updateClientInfo() {
    if (!clientData) return;

    document.getElementById('config-company-name').textContent = clientData.companyName || 'Sin nombre';
    document.getElementById('config-company-rfc').textContent = clientData.rfc || 'Sin RFC';
    document.getElementById('config-company-industry').textContent = getIndustryLabel(clientData.industry);
    document.getElementById('config-company-size').textContent = getCompanySizeLabel(clientData.companySize);
    document.getElementById('config-company-since').textContent = formatDate(clientData.clientSince);

    // Estado de la empresa
    const statusElement = document.getElementById('config-company-status');
    const statusColor = getStatusColor(clientData.status);
    statusElement.textContent = getStatusLabel(clientData.status);
    statusElement.className = `inline-block px-3 py-1 rounded-full text-sm font-medium ${statusColor}`;

    // Sitio web
    const websiteElement = document.getElementById('config-company-website');
    if (clientData.website) {
      websiteElement.innerHTML = `<a href="${clientData.website}" target="_blank" class="text-blue-600 hover:text-blue-800 underline">${clientData.website}</a>`;
    } else {
      websiteElement.textContent = 'Sin sitio web';
      websiteElement.className = 'block w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-500 font-medium';
    }

    console.log('✅ Información del cliente actualizada');
  }

  // Actualizar estadísticas del usuario
  function updateUserStats(stats) {
    const statsContainer = document.getElementById('user-stats');
    statsContainer.innerHTML = `
      <div class="space-y-3">
        <div class="flex justify-between items-center">
          <span class="text-sm text-gray-600">Órdenes Totales</span>
          <span class="font-semibold text-teal-600">${stats.totalOrders || 0}</span>
        </div>
        <div class="flex justify-between items-center">
          <span class="text-sm text-gray-600">Órdenes Activas</span>
          <span class="font-semibold text-blue-600">${stats.activeOrders || 0}</span>
        </div>
        <div class="flex justify-between items-center">
          <span class="text-sm text-gray-600">Órdenes Completadas</span>
          <span class="font-semibold text-green-600">${stats.completedOrders || 0}</span>
        </div>
        <div class="flex justify-between items-center">
          <span class="text-sm text-gray-600">Agentes Activos</span>
          <span class="font-semibold text-purple-600">${stats.activeAgents || 0}</span>
        </div>
        <div class="flex justify-between items-center">
          <span class="text-sm text-gray-600">Documentos Totales</span>
          <span class="font-semibold text-indigo-600">${stats.totalDocuments || 0}</span>
        </div>
      </div>
    `;
    console.log('✅ Estadísticas del usuario actualizadas');
  }

  // Actualizar actividad reciente
  function updateRecentActivity(activities) {
    const activitiesContainer = document.getElementById('recent-activities');
    
    if (!activities || activities.length === 0) {
      activitiesContainer.innerHTML = `
        <div class="text-center py-6">
          <div class="w-12 h-12 mx-auto mb-3 bg-gray-100 rounded-full flex items-center justify-center">
            <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
            </svg>
          </div>
          <p class="text-gray-500 text-sm">No hay actividad reciente</p>
        </div>
      `;
      return;
    }

    const activitiesHtml = activities.map(activity => {
      const activityIcon = getActivityIcon(activity.type);
      const activityColor = getActivityColor(activity.type);
      
      return `
        <div class="flex items-start space-x-3 py-3 border-b border-gray-100 last:border-b-0">
          <div class="flex-shrink-0 w-8 h-8 ${activityColor} rounded-lg flex items-center justify-center">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              ${getActivityIconSVG(activity.type)}
            </svg>
          </div>
          <div class="flex-1 min-w-0">
            <p class="text-sm text-gray-900 font-medium">${activity.description}</p>
            <p class="text-xs text-gray-500 mt-1">${formatRelativeTime(activity.date)}</p>
          </div>
        </div>
      `;
    }).join('');

    activitiesContainer.innerHTML = activitiesHtml;
    console.log('✅ Actividad reciente actualizada');
  }

  // Actualizar estadísticas con error
  function updateUserStatsError() {
    const statsContainer = document.getElementById('user-stats');
    statsContainer.innerHTML = `
      <div class="text-center py-4">
        <div class="text-gray-400 text-2xl mb-2">⚠️</div>
        <p class="text-gray-500 text-sm">Error cargando estadísticas</p>
      </div>
    `;
  }

  // Actualizar actividad con error
  function updateRecentActivityError() {
    const activitiesContainer = document.getElementById('recent-activities');
    activitiesContainer.innerHTML = `
      <div class="text-center py-4">
        <div class="text-gray-400 text-2xl mb-2">⚠️</div>
        <p class="text-gray-500 text-sm">Error cargando actividad</p>
      </div>
    `;
  }

  // Configurar event listeners
  function setupEventListeners() {
    // Formulario de cambio de contraseña
    document.getElementById('password-form').addEventListener('submit', handlePasswordChange);
    
    // Botón de reintentar
    document.getElementById('retry-btn').addEventListener('click', () => {
      window.location.reload();
    });

    // Validación en tiempo real de contraseñas
    document.getElementById('confirm-password').addEventListener('input', validatePasswordMatch);
    document.getElementById('new-password').addEventListener('input', validatePasswordMatch);
  }

  // Manejar cambio de contraseña
  async function handlePasswordChange(event) {
    event.preventDefault();
    
    const currentPassword = document.getElementById('current-password').value;
    const newPassword = document.getElementById('new-password').value;
    const confirmPassword = document.getElementById('confirm-password').value;
    
    // Validaciones
    if (newPassword !== confirmPassword) {
      showNotification('Las contraseñas no coinciden', 'error');
      return;
    }
    
    if (newPassword.length < 8) {
      showNotification('La nueva contraseña debe tener al menos 8 caracteres', 'error');
      return;
    }
    
    try {
      const submitBtn = document.getElementById('password-submit-btn');
      submitBtn.disabled = true;
      submitBtn.textContent = 'Cambiando...';
      
      showNotification('Cambiando contraseña...', 'loading');
      
      await apiClient.request('/users/change-password', {
        method: 'POST',
        body: {
          currentPassword,
          newPassword
        }
      });
      
      showNotification('Contraseña cambiada exitosamente', 'success');
      
      // Limpiar formulario
      document.getElementById('password-form').reset();
      
    } catch (error) {
      console.error('❌ Error cambiando contraseña:', error);
      showNotification(error.message || 'Error al cambiar la contraseña', 'error');
    } finally {
      const submitBtn = document.getElementById('password-submit-btn');
      submitBtn.disabled = false;
      submitBtn.innerHTML = '<svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V9a2 2 0 012-2h6a2 2 0 012 2v4.01"></path></svg>Cambiar Contraseña';
    }
  }

  // Validar coincidencia de contraseñas
  function validatePasswordMatch() {
    const newPassword = document.getElementById('new-password').value;
    const confirmPassword = document.getElementById('confirm-password').value;
    const confirmInput = document.getElementById('confirm-password');
    
    if (confirmPassword && newPassword !== confirmPassword) {
      confirmInput.classList.add('border-red-500');
      confirmInput.classList.remove('border-gray-300');
    } else {
      confirmInput.classList.remove('border-red-500');
      confirmInput.classList.add('border-gray-300');
    }
  }

  // Manejar refresh
  async function handleRefresh() {
    try {
      showNotification('Actualizando datos...', 'loading');
      await loadClientProfile();
      await loadClientStats();
      showNotification('Datos actualizados correctamente', 'success');
    } catch (error) {
      console.error('❌ Error refrescando:', error);
      showNotification('Error al actualizar datos', 'error');
    }
  }

  // Manejar logout
  async function handleLogout() {
    if (!confirm('¿Estás seguro de que quieres cerrar sesión?')) {
      return;
    }
    
    try {
      showNotification('Cerrando sesión...', 'loading');
      
      // Limpiar tokens y datos locales
      apiClient.clearTokens();
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
      
      window.location.href = '/login';
      
    } catch (error) {
      console.error('❌ Error en logout:', error);
      // Forzar redirección incluso si hay error
      window.location.href = '/login';
    }
  }

  // Funciones auxiliares
  function getIndustryLabel(industry) {
    const labels = {
      'tecnologia': 'Tecnología',
      'manufacturera': 'Manufacturera',
      'servicios': 'Servicios',
      'comercio': 'Comercio',
      'construccion': 'Construcción',
      'alimentaria': 'Alimentaria',
      'automotriz': 'Automotriz',
      'salud': 'Salud',
      'educacion': 'Educación',
      'otro': 'Otro'
    };
    return labels[industry] || industry || 'No especificada';
  }

  function getCompanySizeLabel(size) {
    const labels = {
      'micro': 'Micro (1-10 empleados)',
      'pequena': 'Pequeña (11-50 empleados)',
      'mediana': 'Mediana (51-250 empleados)',
      'grande': 'Grande (250+ empleados)'
    };
    return labels[size] || size || 'No especificado';
  }

  function getStatusLabel(status) {
    const labels = {
      'prospecto': 'Prospecto',
      'activo': 'Cliente Activo',
      'inactivo': 'Inactivo',
      'suspendido': 'Suspendido'
    };
    return labels[status] || status || 'Desconocido';
  }

  function getStatusColor(status) {
    const colors = {
      'prospecto': 'bg-yellow-100 text-yellow-800',
      'activo': 'bg-green-100 text-green-800',
      'inactivo': 'bg-gray-100 text-gray-800',
      'suspendido': 'bg-red-100 text-red-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  }

  function formatDate(dateString) {
    if (!dateString) return 'Sin fecha';
    
    try {
      return new Date(dateString).toLocaleDateString('es-ES', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch {
      return 'Fecha inválida';
    }
  }

  function formatRelativeTime(dateString) {
    if (!dateString) return 'Hace un momento';

    const date = new Date(dateString);
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);

    if (diffInSeconds < 60) {
      return `Hace ${diffInSeconds} segundos`;
    } else if (diffInSeconds < 3600) {
      const diffInMinutes = Math.floor(diffInSeconds / 60);
      return `Hace ${diffInMinutes} minutos`;
    } else if (diffInSeconds < 86400) {
      const diffInHours = Math.floor(diffInSeconds / 3600);
      return `Hace ${diffInHours} horas`;
    } else {
      return `Hace ${Math.floor(diffInSeconds / 86400)} días`;
    }
  }

  function getActivityIcon(type) {
    // Esta función ya no se usa, mantenida por compatibilidad
    return '';
  }

  function getActivityColor(type) {
    switch (type) {
      case 'order':
        return 'bg-teal-100 text-teal-700';
      case 'document':
        return 'bg-blue-100 text-blue-700';
      case 'agent':
        return 'bg-emerald-100 text-emerald-700';
      case 'status':
        return 'bg-amber-100 text-amber-700';
      case 'payment':
        return 'bg-green-100 text-green-700';
      default:
        return 'bg-gray-100 text-gray-700';
    }
  }

  function getActivityIconSVG(type) {
    switch (type) {
      case 'order':
        return '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4l1-12z"></path>';
      case 'document':
        return '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>';
      case 'agent':
        return '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>';
      case 'status':
        return '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>';
      case 'payment':
        return '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>';
      default:
        return '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>';
    }
  }

  // Control de pantallas
  function showLoadingScreen() {
    document.getElementById('loading-screen').classList.remove('hidden');
    document.getElementById('error-screen').classList.add('hidden');
    document.getElementById('main-screen').classList.add('hidden');
  }

  function showErrorScreen() {
    document.getElementById('loading-screen').classList.add('hidden');
    document.getElementById('error-screen').classList.remove('hidden');
    document.getElementById('main-screen').classList.add('hidden');
  }

  function showMainScreen() {
    document.getElementById('loading-screen').classList.add('hidden');
    document.getElementById('error-screen').classList.add('hidden');
    document.getElementById('main-screen').classList.remove('hidden');
  }

  // Sistema de notificaciones
  function showNotification(message, type) {
    // Remover notificaciones anteriores
    const existing = document.querySelectorAll('.notification');
    existing.forEach(notif => notif.remove());
    
    const colors = {
      loading: 'bg-blue-100 border-blue-400 text-blue-700',
      success: 'bg-green-100 border-green-400 text-green-700',
      error: 'bg-red-100 border-red-400 text-red-700',
      info: 'bg-yellow-100 border-yellow-400 text-yellow-700'
    };
    
    const icons = {
      loading: '⏳',
      success: '✅',
      error: '❌',
      info: 'ℹ️'
    };
    
    const notification = document.createElement('div');
    notification.className = `notification fixed top-4 right-4 ${colors[type]} px-4 py-3 rounded-lg shadow-lg z-50 max-w-sm border`;
    notification.innerHTML = `
      <div class="flex items-center">
        <span class="mr-2">${icons[type]}</span>
        <span>${message}</span>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    if (type !== 'loading') {
      setTimeout(() => {
        if (notification.parentNode) {
          notification.remove();
        }
      }, 4000);
    }
  }

  // Hacer funciones globales para uso en onclick
  window.handleRefresh = handleRefresh;
  window.handleLogout = handleLogout;
</script> 