---
import PortalClientLayoutSidebar from '../../layouts/PortalClientLayoutSidebar.astro';
import PortalAuthGuard from '../../components/PortalAuthGuard.jsx';
import { Icon } from 'astro-icon/components';
---

<PortalClientLayoutSidebar title="Documentos - Portal Cliente AIM">
  <!-- Contenedor de autenticación -->
  <div id="auth-container">
    <!-- Loading state -->
    <div id="auth-loading" class="min-h-screen bg-gray-50 flex items-center justify-center">
      <div class="text-center">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-teal-600 mx-auto mb-4"></div>
        <p class="text-gray-600">Verificando autenticación...</p>
      </div>
    </div>

    <!-- Main content (hidden initially) -->
    <div id="main-content" class="hidden">
      <!-- Header Principal -->
      <div class="mb-8">
      <div class="bg-gradient-to-r from-teal-600 to-emerald-600 rounded-xl p-6 text-white">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-2xl font-bold mb-2">Documentos de Mi Empresa</h1>
            <p class="text-teal-100">Documentos y archivos generados para nuestras órdenes</p>
          </div>
          <div class="text-right">
            <div class="text-teal-100 text-sm">Total de Documentos</div>
            <div class="text-xl font-bold" id="totalDocuments">0</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Estadísticas -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
      <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm text-gray-500 mb-1">Documentos Totales</p>
            <p class="text-2xl font-bold text-gray-900" id="statsTotalDocuments">0</p>
            <p class="text-sm text-teal-600 flex items-center mt-2">
              <Icon name="tabler:file-text" class="w-4 h-4 mr-1" />
              Generados
            </p>
          </div>
          <div class="p-3 bg-teal-50 rounded-lg">
            <Icon name="tabler:files" class="w-6 h-6 text-teal-600" />
          </div>
        </div>
      </div>

      <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm text-gray-500 mb-1">Este Mes</p>
            <p class="text-2xl font-bold text-gray-900" id="documentsThisMonth">0</p>
            <p class="text-sm text-orange-600 flex items-center mt-2">
              <Icon name="tabler:calendar" class="w-4 h-4 mr-1" />
              Nuevos
            </p>
          </div>
          <div class="p-3 bg-orange-50 rounded-lg">
            <Icon name="tabler:calendar" class="w-6 h-6 text-orange-600" />
          </div>
        </div>
      </div>

      <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm text-gray-500 mb-1">Pendientes</p>
            <p class="text-2xl font-bold text-gray-900" id="pendingDocuments">0</p>
            <p class="text-sm text-yellow-600 flex items-center mt-2">
              <Icon name="tabler:clock" class="w-4 h-4 mr-1" />
              En proceso
            </p>
          </div>
          <div class="p-3 bg-yellow-50 rounded-lg">
            <Icon name="tabler:clock" class="w-6 h-6 text-yellow-600" />
          </div>
        </div>
      </div>

      <div class="bg-white rounded-xl p-6 shadow-sm border border-gray-100">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm text-gray-500 mb-1">Completados</p>
            <p class="text-2xl font-bold text-gray-900" id="completedDocuments">0</p>
            <p class="text-sm text-emerald-600 flex items-center mt-2">
              <Icon name="tabler:check" class="w-4 h-4 mr-1" />
              Finalizados
            </p>
          </div>
          <div class="p-3 bg-emerald-50 rounded-lg">
            <Icon name="tabler:check" class="w-6 h-6 text-emerald-600" />
          </div>
        </div>
      </div>
    </div>

    <!-- Filtros y Búsqueda -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-100 mb-8">
      <div class="p-6">
        <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <h3 class="text-lg font-semibold text-gray-900">Documentos de la Empresa</h3>
          
          <div class="flex flex-col sm:flex-row gap-4">
            <!-- Búsqueda -->
            <div class="relative">
              <Icon name="tabler:search" class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              <input
                type="text"
                id="searchInput"
                placeholder="Buscar documentos..."
                class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent w-full sm:w-64"
              />
            </div>

            <!-- Filtro por Estado -->
            <select id="statusFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent">
              <option value="">Todos los estados</option>
              <option value="DRAFT">Borrador</option>
              <option value="FINALIZED">Finalizado</option>
              <option value="SENT">Enviado</option>
              <option value="REVIEWED">Revisado</option>
              <option value="APPROVED">Aprobado</option>
              <option value="REJECTED">Rechazado</option>
              <option value="ARCHIVED">Archivado</option>
            </select>

            <!-- Filtro por Tipo -->
            <select id="typeFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-teal-500 focus:border-transparent">
              <option value="">Todos los tipos</option>
              <!-- Los tipos se cargarán dinámicamente desde los datos -->
            </select>
          </div>
        </div>
      </div>
    </div>

    <!-- Lista de Documentos -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-100">
      <div class="p-6">
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead>
              <tr class="border-b border-gray-200">
                <th class="text-left py-3 px-4 font-semibold text-gray-700">Documento</th>
                <th class="text-left py-3 px-4 font-semibold text-gray-700">Orden</th>
                <th class="text-left py-3 px-4 font-semibold text-gray-700">Tipo</th>
                <th class="text-left py-3 px-4 font-semibold text-gray-700">Estado</th>
                <th class="text-left py-3 px-4 font-semibold text-gray-700">Fecha</th>
                <th class="text-left py-3 px-4 font-semibold text-gray-700">Acciones</th>
              </tr>
            </thead>
            <tbody id="documentsTableBody">
              <!-- Loading placeholders -->
              <tr class="animate-pulse">
                <td class="py-4 px-4 border-b border-gray-100">
                  <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-gray-200 rounded-lg"></div>
                    <div class="space-y-2">
                      <div class="h-4 bg-gray-200 rounded w-32"></div>
                      <div class="h-3 bg-gray-200 rounded w-24"></div>
                    </div>
                  </div>
                </td>
                <td class="py-4 px-4 border-b border-gray-100">
                  <div class="h-4 bg-gray-200 rounded w-24"></div>
                </td>
                <td class="py-4 px-4 border-b border-gray-100">
                  <div class="h-4 bg-gray-200 rounded w-20"></div>
                </td>
                <td class="py-4 px-4 border-b border-gray-100">
                  <div class="h-6 bg-gray-200 rounded-full w-16"></div>
                </td>
                <td class="py-4 px-4 border-b border-gray-100">
                  <div class="h-4 bg-gray-200 rounded w-20"></div>
                </td>
                <td class="py-4 px-4 border-b border-gray-100">
                  <div class="h-8 bg-gray-200 rounded w-16"></div>
                </td>
              </tr>
            </tbody>
          </table>
        </div>

        <!-- Paginación -->
        <div class="flex items-center justify-between mt-6 pt-6 border-t border-gray-200">
          <div class="text-sm text-gray-500">
            Mostrando <span id="currentRange">0-0</span> de <span id="totalDocumentsCount">0</span> documentos
          </div>
          
          <div class="flex items-center space-x-2">
            <button id="prevPage" class="px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
              <Icon name="tabler:chevron-left" class="w-4 h-4" />
            </button>
            
            <div id="pageNumbers" class="flex items-center space-x-1">
              <!-- Page numbers will be populated by JavaScript -->
            </div>
            
            <button id="nextPage" class="px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
              <Icon name="tabler:chevron-right" class="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal de Detalles del Documento -->
    <div id="documentModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
      <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <!-- Header del Modal -->
          <div class="flex items-center justify-between pb-4 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-gray-900" id="modalDocumentTitle">Detalles del Documento</h3>
            <button onclick="closeDocumentModal()" class="text-gray-400 hover:text-gray-600">
              <Icon name="tabler:x" class="w-6 h-6" />
            </button>
          </div>

          <!-- Contenido del Modal -->
          <div class="py-6 space-y-6" id="modalContent">
            <div class="animate-pulse">
              <div class="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
              <div class="h-4 bg-gray-200 rounded w-1/2 mb-4"></div>
              <div class="h-4 bg-gray-200 rounded w-5/6"></div>
            </div>
          </div>

          <!-- Footer del Modal -->
          <div class="flex items-center justify-end pt-4 border-t border-gray-200 space-x-3">
            <button 
              onclick="closeDocumentModal()" 
              class="px-4 py-2 text-gray-500 hover:text-gray-700 font-medium"
            >
              Cerrar
            </button>
            <button 
              id="downloadDocumentBtn"
              onclick="downloadDocument()"
              class="px-4 py-2 bg-teal-600 text-white rounded-lg hover:bg-teal-700 font-medium disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Icon name="tabler:download" class="w-4 h-4 inline mr-2" />
              Descargar
            </button>
          </div>
        </div>
      </div>
    </div>
    </div> <!-- /main-content -->
  </div> <!-- /auth-container -->
</PortalClientLayoutSidebar>

<!-- Incluir el API Client de documentos -->
<script is:inline src="/scripts/documentsApiClient.js"></script>

<script>
  import { createAuthChecker } from '../../lib/auth.js';
const authChecker = createAuthChecker();
  import { apiClient } from '../../lib/apiClient.js';

  // Inicializar documentsApi
  window.documentsApi = new DocumentsApiClient();

  // Variables globales
  let documentsData = [];
  let filteredDocuments = [];
  let currentPage = 1;
  let documentsPerPage = 10;
  let totalDocuments = 0;
  let selectedDocument = null;
  let currentUser = null;

  // Inicializar la página
  document.addEventListener('DOMContentLoaded', async function() {
    try {
      console.log('🚀 Inicializando página de documentos del cliente...');
      await initializePage();
    } catch (error) {
      console.error('❌ Error inicializando página de documentos:', error);
      onAuthError(error);
    }
  });

  // Inicializar página principal
  async function initializePage() {
    try {
      // Verificar autenticación y rol de cliente
      currentUser = await authChecker.getCurrentUser();
      if (!currentUser) {
        console.error('❌ Usuario no autenticado');
        window.location.href = '/login';
        return;
      }

      if (currentUser.role !== 'client') {
        console.error('❌ Usuario no es cliente, redirigiendo al portal normal');
        window.location.href = '/portal';
        return;
      }

      console.log('✅ Usuario cliente autenticado:', currentUser.email);

      // Mostrar contenido principal
      showMainContent();
      
      // Configurar event listeners
      setupEventListeners();
      
      // Cargar datos iniciales
      await loadDocuments();
      
      console.log('✅ Página de documentos del cliente inicializada correctamente');
    } catch (error) {
      console.error('❌ Error inicializando página de documentos:', error);
      onAuthError(error);
    }
  }

  // Callback cuando la autenticación falla
  function onAuthError(error) {
    console.error('❌ Error de autenticación:', error);
    // Limpiar tokens si existe el método
    if (typeof apiClient?.clearTokens === 'function') {
      apiClient.clearTokens();
    }
    setTimeout(() => {
      window.location.href = '/login';
    }, 2000);
  }

  // Mostrar contenido principal
  function showMainContent() {
    const loadingElement = document.getElementById('auth-loading');
    const mainContent = document.getElementById('main-content');
    
    if (loadingElement) {
      loadingElement.classList.add('hidden');
    }
    
    if (mainContent) {
      mainContent.classList.remove('hidden');
      console.log('✅ Contenido de documentos mostrado');
    }
  }

  // Cargar documentos del cliente
  async function loadDocuments() {
    try {
      console.log('📄 Cargando documentos del cliente...');
      
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: documentsPerPage.toString()
      });

      const response = await apiClient.request(`/portal-clients/documents?${params}`, {
        method: 'GET'
      });

      documentsData = response.data?.documents || [];
      totalDocuments = response.data?.pagination?.total || 0;
      filteredDocuments = [...documentsData];

      console.log(`✅ Documentos cargados: ${documentsData.length} de ${totalDocuments}`);
      
      updateStatistics();
      updateDocumentTypeFilter();
      renderDocuments();
      updatePagination();
      
    } catch (error) {
      console.error('❌ Error cargando documentos:', error);
      showErrorMessage('Error al cargar los documentos');
      documentsData = [];
      filteredDocuments = [];
      renderDocuments();
    }
  }

  // Actualizar estadísticas
  function updateStatistics() {
    const stats = {
      total: documentsData.length,
      thisMonth: documentsData.filter(doc => {
        const createdDate = new Date(doc.createdAt);
        const now = new Date();
        return createdDate.getMonth() === now.getMonth() && 
               createdDate.getFullYear() === now.getFullYear();
      }).length,
      pending: documentsData.filter(doc => ['DRAFT', 'REVIEWED'].includes(doc.status)).length,
      completed: documentsData.filter(doc => ['FINALIZED', 'APPROVED'].includes(doc.status)).length
    };

    // Actualizar elementos solo si existen
    const totalDocumentsEl = document.getElementById('totalDocuments');
    const statsTotalDocumentsEl = document.getElementById('statsTotalDocuments');
    const documentsThisMonthEl = document.getElementById('documentsThisMonth');
    const pendingDocumentsEl = document.getElementById('pendingDocuments');
    const completedDocumentsEl = document.getElementById('completedDocuments');

    if (totalDocumentsEl) totalDocumentsEl.textContent = stats.total;
    if (statsTotalDocumentsEl) statsTotalDocumentsEl.textContent = stats.total;
    if (documentsThisMonthEl) documentsThisMonthEl.textContent = stats.thisMonth;
    if (pendingDocumentsEl) pendingDocumentsEl.textContent = stats.pending;
    if (completedDocumentsEl) completedDocumentsEl.textContent = stats.completed;
    
    console.log('📊 Estadísticas actualizadas:', stats);
  }

  // Actualizar filtro de tipos de documento
  function updateDocumentTypeFilter() {
    const typeFilter = document.getElementById('typeFilter');
    if (!typeFilter) return;

    // Obtener tipos únicos de los documentos
    const uniqueTypes = [...new Set(documentsData
      .map(doc => doc.documentType?.name)
      .filter(type => type)
    )];

    // Limpiar opciones existentes (excepto la primera)
    const firstOption = typeFilter.querySelector('option[value=""]');
    typeFilter.innerHTML = '';
    if (firstOption) {
      typeFilter.appendChild(firstOption);
    }

    // Agregar tipos únicos
    uniqueTypes.forEach(typeName => {
      const option = document.createElement('option');
      option.value = typeName;
      option.textContent = typeName;
      typeFilter.appendChild(option);
    });

    console.log('🏷️ Tipos de documento cargados en filtro:', uniqueTypes);
  }

  // Renderizar tabla de documentos
  function renderDocuments() {
    const tableBody = document.getElementById('documentsTableBody');
    
    if (!tableBody) {
      console.error('❌ No se encontró el elemento documentsTableBody');
      return;
    }
    
    if (!filteredDocuments || filteredDocuments.length === 0) {
      tableBody.innerHTML = `
        <tr>
          <td colspan="6" class="py-8 text-center text-gray-500">
            <div class="flex flex-col items-center">
              <svg class="w-12 h-12 text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <p class="text-lg font-medium">No hay documentos disponibles</p>
              <p class="text-sm">Los documentos aparecerán aquí cuando se generen para sus órdenes.</p>
            </div>
          </td>
        </tr>
      `;
      return;
    }

    tableBody.innerHTML = filteredDocuments.map(document => `
      <tr class="hover:bg-gray-50 transition-colors cursor-pointer" onclick="showDocumentDetails('${document.id}')">
        <td class="py-4 px-4 border-b border-gray-100">
          <div class="flex items-center space-x-3">
            <div class="p-2 ${getDocumentTypeColor(document)} rounded-lg">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <div>
              <div class="font-medium text-gray-900">${document.title || 'Sin título'}</div>
              <div class="text-sm text-gray-500">${document.description || 'Sin descripción'}</div>
            </div>
          </div>
        </td>
        <td class="py-4 px-4 border-b border-gray-100">
          <div class="text-sm">
            <div class="font-medium text-gray-900">${document.order?.title || 'Sin orden'}</div>
            <div class="text-gray-500">#${document.order?.orderNumber || document.order?.id?.substring(0, 8) || 'N/A'}</div>
          </div>
        </td>
        <td class="py-4 px-4 border-b border-gray-100">
          <span class="px-2 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-800">
            ${getDocumentTypeLabel(document)}
          </span>
        </td>
        <td class="py-4 px-4 border-b border-gray-100">
          <span class="px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(document.status)}">
            ${getStatusLabel(document.status)}
          </span>
        </td>
        <td class="py-4 px-4 border-b border-gray-100 text-sm text-gray-500">
          ${formatDate(document.createdAt)}
        </td>
        <td class="py-4 px-4 border-b border-gray-100">
          <div class="flex items-center space-x-2">
            <button 
              onclick="event.stopPropagation(); showDocumentPreview('${document.id}')"
              class="text-teal-600 hover:text-teal-800 p-1 rounded hover:bg-teal-50"
              title="Vista previa"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
              </svg>
            </button>
            <button 
              onclick="event.stopPropagation(); downloadDocument('${document.id}')"
                              class="text-teal-600 hover:text-teal-800 p-1 rounded hover:bg-teal-50"
              title="Descargar PDF"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </button>
          </div>
        </td>
      </tr>
    `).join('');
    
    console.log(`📋 Documentos renderizados: ${filteredDocuments.length}`);
  }

  // Mostrar detalles del documento
  async function showDocumentDetails(documentId) {
    try {
      selectedDocument = documentsData.find(doc => doc.id === documentId);
      if (!selectedDocument) {
        showErrorMessage('Documento no encontrado');
        return;
      }

      const modalTitleEl = document.getElementById('modalDocumentTitle');
      const modalContent = document.getElementById('modalContent');
      
      if (modalTitleEl) {
        modalTitleEl.textContent = selectedDocument.title || 'Sin título';
      }
      
      if (!modalContent) {
        console.error('❌ No se encontró el elemento modalContent');
        return;
      }
      modalContent.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h4 class="font-semibold text-gray-900 mb-3">Información del Documento</h4>
            <div class="space-y-3">
              <div>
                <label class="text-sm font-medium text-gray-500">Título</label>
                <p class="text-gray-900">${selectedDocument.title || 'Sin título'}</p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500">Descripción</label>
                <p class="text-gray-900">${selectedDocument.description || 'Sin descripción'}</p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500">Tipo</label>
                <p class="text-gray-900">${getDocumentTypeLabel(selectedDocument)}</p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500">Estado</label>
                <span class="px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(selectedDocument.status)}">
                  ${getStatusLabel(selectedDocument.status)}
                </span>
              </div>
            </div>
          </div>
          
          <div>
            <h4 class="font-semibold text-gray-900 mb-3">Información de la Orden</h4>
            <div class="space-y-3">
              <div>
                <label class="text-sm font-medium text-gray-500">Orden</label>
                <p class="text-gray-900">${selectedDocument.order?.title || 'Sin orden asociada'}</p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500">ID de Orden</label>
                <p class="text-gray-900 font-mono text-sm">${selectedDocument.order?.id || 'N/A'}</p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500">Fecha de Creación</label>
                <p class="text-gray-900">${formatDate(selectedDocument.createdAt)}</p>
              </div>
              <div>
                <label class="text-sm font-medium text-gray-500">Última Actualización</label>
                <p class="text-gray-900">${formatDate(selectedDocument.updatedAt)}</p>
              </div>
            </div>
          </div>
        </div>
        
        ${selectedDocument.notes ? `
          <div class="mt-6">
            <h4 class="font-semibold text-gray-900 mb-3">Notas</h4>
            <div class="bg-gray-50 rounded-lg p-4">
              <p class="text-gray-700">${selectedDocument.notes}</p>
            </div>
          </div>
        ` : ''}
      `;

      document.getElementById('documentModal').classList.remove('hidden');
    } catch (error) {
      console.error('❌ Error mostrando detalles del documento:', error);
      showErrorMessage('Error al cargar los detalles del documento');
    }
  }

  // Cerrar modal
  function closeDocumentModal() {
    const modal = document.getElementById('documentModal');
    if (modal) {
      modal.classList.add('hidden');
    }
    selectedDocument = null;
  }

  // Mostrar vista previa del documento
  async function showDocumentPreview(documentId) {
    try {
      const documento = documentsData.find(doc => doc.id === documentId);
      if (!documento) {
        showErrorMessage('Documento no encontrado');
        return;
      }

      // Crear modal de vista previa
      const modal = document.createElement('div');
      modal.id = 'documentPreviewModal';
      modal.className = 'fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50';
      
      modal.innerHTML = `
        <div class="relative top-4 mx-auto p-5 border w-11/12 max-w-6xl shadow-lg rounded-md bg-white min-h-screen">
          <!-- Header del Modal -->
          <div class="flex items-center justify-between pb-4 border-b border-gray-200 sticky top-0 bg-white z-10">
            <h3 class="text-lg font-semibold text-gray-900">Vista Previa - ${documento.title}</h3>
            <button onclick="closeDocumentPreview()" class="text-gray-400 hover:text-gray-600">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>

          <!-- Contenido del Modal -->
          <div class="py-6" id="previewModalContent">
            <div class="animate-pulse">
              <div class="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
              <div class="h-4 bg-gray-200 rounded w-1/2 mb-4"></div>
              <div class="h-4 bg-gray-200 rounded w-5/6"></div>
            </div>
          </div>
        </div>
      `;

      document.body.appendChild(modal);
      
      // Cargar contenido del documento
      await loadDocumentPreviewContent(documento);
      
    } catch (error) {
      console.error('❌ Error mostrando vista previa:', error);
      showErrorMessage('Error al cargar la vista previa del documento');
    }
  }

  // Cargar contenido de vista previa - IDÉNTICO AL PORTAL DE USUARIOS
  async function loadDocumentPreviewContent(documento) {
    const contenido = document.getElementById('previewModalContent');
    if (!contenido) return;

    try {
      // Mostrar loading mientras se carga el contenido
      contenido.innerHTML = `
        <div class="space-y-6">
          <div class="flex items-center justify-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-teal-600"></div>
            <span class="ml-3 text-gray-600">Generando vista previa del documento...</span>
          </div>
        </div>
      `;

      // 🎯 MEJORA: Generar contenido HTML integrado con datos específicos del tipo de documento
      let htmlContentWithSpecific = '';
      
      try {
        // Intentar obtener el contenido desde el backend
        const generatedContent = await window.documentsApi.generateDocument(documento.id, { format: 'html' });
        
        if (generatedContent.content) {
          htmlContentWithSpecific = generatedContent.content;
        } else if (generatedContent.url) {
          const response = await fetch(generatedContent.url);
          if (response.ok) {
            htmlContentWithSpecific = await response.text();
          }
        }
      } catch (backendError) {
        console.warn('⚠️ Error obteniendo contenido del backend, usando fallback:', backendError);
      }
      
      // Si no hay contenido del backend, usar fallback
      if (!htmlContentWithSpecific) {
        htmlContentWithSpecific = renderFallbackContent(documento);
      }
      
      // 🎯 CRÍTICO: Integrar contenido específico según el tipo de documento
      console.log(`🎯 Integrando contenido específico en vista previa para documento ${documento.id}`);
      htmlContentWithSpecific = await integrarContenidoEspecifico(documento.id, htmlContentWithSpecific);

      // Mostrar el contenido completo
      contenido.innerHTML = `
        <div class="space-y-6">
          <!-- Header del documento -->
          <div class="bg-gradient-to-r from-teal-500 to-emerald-500 text-white p-6 rounded-lg">
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-xl font-bold">${documento.title}</h3>
                <p class="text-teal-100 mt-1">${getDocumentTypeLabel(documento)}</p>
                <div class="flex items-center space-x-4 mt-2 text-sm">
                  <span class="flex items-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    ${documento.documentNumber}
                  </span>
                  <span class="flex items-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    ${formatDate(documento.createdAt)}
                  </span>
                </div>
              </div>
              <div class="text-right">
                <span class="px-3 py-1 bg-white bg-opacity-20 rounded-full text-sm font-medium">
                  ${getStatusLabel(documento.status)}
                </span>
              </div>
            </div>
          </div>

          <!-- Contenido generado del documento -->
          <div class="bg-white border border-gray-200 rounded-lg overflow-hidden">
            <div class="document-content max-w-none prose prose-sm max-w-none" style="
              font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
              line-height: 1.6;
              color: #374151;
              width: 100%;
              min-height: 600px;
              padding: 20px;
            ">
              ${htmlContentWithSpecific}
            </div>
          </div>

          <!-- Mensaje para clientes -->
          <div class="bg-gradient-to-r from-teal-50 to-emerald-50 border border-teal-200 rounded-lg p-4">
            <div class="flex items-start">
              <div class="flex-shrink-0">
                <svg class="w-5 h-5 text-teal-600 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div class="ml-3">
                <h4 class="text-teal-900 font-medium">Vista previa para clientes</h4>
                <p class="text-teal-800 text-sm mt-1">Esta es la vista previa del documento generado. Puede descargarlo en formato PDF.</p>
              </div>
            </div>
          </div>

          <!-- Botones de acción -->
          <div class="flex justify-center space-x-4">
            <button 
              onclick="downloadDocumentPDF('${documento.id}')"
              class="flex items-center px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              Descargar PDF
            </button>
            
            <button 
              onclick="downloadDocumentHTML('${documento.id}')"
              class="flex items-center px-6 py-3 bg-teal-600 text-white rounded-lg hover:bg-teal-700 transition-colors"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
              </svg>
              Descargar HTML
            </button>
            
            <button 
              onclick="closeDocumentPreview()"
              class="flex items-center px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
            >
              Cerrar
            </button>
          </div>
        </div>
      `;
      
    } catch (error) {
      console.error('❌ Error cargando contenido de vista previa:', error);
      contenido.innerHTML = `
        <div class="text-center py-8">
          <div class="text-red-500 mb-2">Error cargando vista previa</div>
          <p class="text-gray-600">No se pudo cargar el contenido del documento: ${error.message}</p>
          <button onclick="closeDocumentPreview()" class="mt-4 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700">
            Cerrar
          </button>
        </div>
      `;
    }
  }



  // Cerrar vista previa
  function closeDocumentPreview() {
    const modal = document.getElementById('documentPreviewModal');
    if (modal) {
      document.body.removeChild(modal);
    }
  }

  // Obtener HTML del documento para vista previa - IDÉNTICO AL PORTAL DE USUARIOS
  async function obtenerHTMLVistaPrevia(documentId) {
    try {
      // Obtener el contenido HTML del documento
      const generatedContent = await window.documentsApi.generateDocument(documentId, { format: 'html' });
      
      let htmlContent = '';
      
      // Si hay contenido directo, usarlo
      if (generatedContent.content) {
        htmlContent = generatedContent.content;
      }
      // Si hay URL, intentar obtener el contenido
      else if (generatedContent.url) {
        const response = await fetch(generatedContent.url);
        if (response.ok) {
          htmlContent = await response.text();
        }
      }
      // Si no hay contenido, usar el fallback
      else {
        const documento = documentsData.find(doc => doc.id === documentId);
        if (documento) {
          htmlContent = renderFallbackContent(documento);
        } else {
          throw new Error('No se pudo obtener el contenido del documento');
        }
      }
      
      // 🎯 PARCHE: Integrar contenido específico dinámicamente
      htmlContent = await integrarContenidoEspecifico(documentId, htmlContent);
      
      return htmlContent;
    } catch (error) {
      console.error('Error obteniendo HTML del documento:', error);
      throw error;
    }
  }

  // Convertir HTML a PDF - IDÉNTICO AL PORTAL DE USUARIOS
  async function convertirHTMLaPDF(htmlContent) {
    try {
      // Crear un HTML completo con estilos CSS optimizado para PDF
      const fullHTML = `
        <!DOCTYPE html>
        <html lang="es">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Documento AIM</title>
          <style>
            @page {
              size: Letter;
              margin: 20mm;
            }
            
            * {
              box-sizing: border-box;
              margin: 0;
              padding: 0;
            }
            
            body {
              font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
              line-height: 1.6;
              color: #374151;
              background: white;
              width: 216mm;
              max-width: 216mm;
              margin: 0 auto;
              padding: 0;
            }
            
            .document-header {
              background: linear-gradient(135deg, #0d9488 0%, #059669 100%);
              color: white;
              padding: 30px;
              border-radius: 12px;
              margin-bottom: 30px;
              text-align: center;
              page-break-inside: avoid;
            }
            
            .document-header h1 {
              font-size: 28px;
              font-weight: bold;
              margin-bottom: 10px;
            }
            
            .document-header p {
              font-size: 16px;
              opacity: 0.9;
            }
            
            .document-content {
              background: white;
              padding: 30px;
              border: 1px solid #e5e7eb;
              border-radius: 8px;
              margin-bottom: 20px;
              page-break-inside: avoid;
            }
            
            .field-group {
              margin-bottom: 20px;
              padding: 15px;
              background: #f9fafb;
              border-radius: 8px;
              page-break-inside: avoid;
            }
            
            .field-label {
              font-weight: 600;
              color: #1f2937;
              margin-bottom: 5px;
              display: block;
            }
            
            .field-value {
              color: #374151;
              font-size: 14px;
            }
            
            .document-footer {
              text-align: center;
              padding: 20px;
              border-top: 1px solid #e5e7eb;
              margin-top: 30px;
              font-size: 12px;
              color: #6b7280;
            }
            
            .grid {
              display: grid;
              gap: 1rem;
            }
            
            .grid-cols-2 {
              grid-template-columns: repeat(2, 1fr);
            }
            
            .grid-cols-3 {
              grid-template-columns: repeat(3, 1fr);
            }
            
            .mb-8 {
              margin-bottom: 2rem;
            }
            
            .mb-4 {
              margin-bottom: 1rem;
            }
            
            .p-4 {
              padding: 1rem;
            }
            
            .p-6 {
              padding: 1.5rem;
            }
            
            .text-lg {
              font-size: 1.125rem;
            }
            
            .text-xl {
              font-size: 1.25rem;
            }
            
            .text-2xl {
              font-size: 1.5rem;
            }
            
            .font-semibold {
              font-weight: 600;
            }
            
            .font-bold {
              font-weight: 700;
            }
            
            .text-center {
              text-align: center;
            }
            
            .rounded-lg {
              border-radius: 0.5rem;
            }
            
            .bg-gray-50 {
              background-color: #f9fafb;
            }
            
            .bg-white {
              background-color: white;
            }
            
            .text-gray-900 {
              color: #111827;
            }
            
            .text-gray-700 {
              color: #374151;
            }
            
            .text-gray-500 {
              color: #6b7280;
            }
            
            .border-t {
              border-top: 1px solid #e5e7eb;
            }
            
            .pt-4 {
              padding-top: 1rem;
            }
            
            .mt-8 {
              margin-top: 2rem;
            }
            
            .text-xs {
              font-size: 0.75rem;
            }
            
            .flex {
              display: flex;
            }
            
            .items-center {
              align-items: center;
            }
            
            .justify-between {
              justify-content: space-between;
            }
            
            .space-x-4 > * + * {
              margin-left: 1rem;
            }
            
            .text-sm {
              font-size: 0.875rem;
            }
            
            .bg-gradient-to-r {
              background: linear-gradient(135deg, #0d9488 0%, #059669 100%);
            }
            
            .from-teal-500 {
              background: linear-gradient(135deg, #0d9488 0%, #059669 100%);
            }
            
            .text-white {
              color: white;
            }
            
            .text-teal-100 {
              color: #ccfbf1;
            }
            
            .px-3 {
              padding-left: 0.75rem;
              padding-right: 0.75rem;
            }
            
            .py-1 {
              padding-top: 0.25rem;
              padding-bottom: 0.25rem;
            }
            
            .bg-opacity-20 {
              background-color: rgba(255, 255, 255, 0.2);
            }
            
            .rounded-full {
              border-radius: 9999px;
            }
            
            /* Estilos específicos para documentos integrados */
            .section {
              margin-bottom: 30px;
              page-break-inside: avoid;
            }
            
            .section-header {
              background: linear-gradient(135deg, #0d9488 0%, #059669 100%);
              color: white;
              padding: 15px 20px;
              border-radius: 8px 8px 0 0;
              margin-bottom: 0;
            }
            
            .section-title {
              font-size: 18px;
              font-weight: 700;
              margin: 0;
            }
            
            .section-content {
              border: 1px solid #e5e7eb;
              border-top: none;
              border-radius: 0 0 8px 8px;
              padding: 20px;
              background: white;
            }
            
            .content-block {
              margin-bottom: 20px;
              padding: 15px;
              background: #f8fafc;
              border-radius: 6px;
              page-break-inside: avoid;
            }
            
            .specific-data {
              display: grid;
              gap: 10px;
            }
            
            .data-item {
              display: grid;
              grid-template-columns: 1fr 1fr;
              gap: 10px;
              padding: 12px;
              background: #f9fafb;
              border-radius: 6px;
              align-items: center;
            }
            
            .data-label {
              font-weight: 600;
              color: #374151;
              font-size: 14px;
            }
            
            .data-value {
              color: #1f2937;
              font-weight: 500;
              text-align: right;
              font-size: 14px;
            }
            
            @media print {
              body {
                padding: 0;
                max-width: none;
                width: 100%;
              }
              
              .document-container {
                box-shadow: none;
                border: none;
              }
              
              .bg-gradient-to-r,
              .from-teal-500,
              .section-header {
                background: #0d9488 !important;
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
              }
              
              .text-white {
                color: white !important;
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
              }
              
              .section {
                page-break-inside: avoid;
              }
              
              .content-block {
                page-break-inside: avoid;
              }
            }
          </style>
        </head>
        <body>
          ${htmlContent}
        </body>
        </html>
      `;

      // Crear una nueva ventana para el PDF
      const printWindow = window.open('', '_blank');
      
      if (!printWindow) {
        throw new Error('No se pudo abrir la ventana de impresión. Verifique que las ventanas emergentes estén permitidas.');
      }

      return new Promise((resolve, reject) => {
        try {
          printWindow.document.write(fullHTML);
          printWindow.document.close();

          printWindow.onload = function() {
            setTimeout(() => {
              printWindow.print();
              
              printWindow.onafterprint = function() {
                printWindow.close();
                resolve();
              };
              
              // Fallback: cerrar después de un tiempo si no se detecta el evento
              setTimeout(() => {
                if (!printWindow.closed) {
                  printWindow.close();
                }
                resolve();
              }, 5000);
            }, 500);
          };

        } catch (error) {
          reject(error);
        }
      });
    } catch (error) {
      console.error('Error al convertir HTML a PDF:', error);
      throw error;
    }
  }

  // Descargar documento PDF
  async function downloadDocumentPDF(documentId) {
    try {
      showSuccessMessage('Preparando documento para imprimir...');
      
      // Obtener el HTML del documento desde la vista previa
      const htmlContent = await obtenerHTMLVistaPrevia(documentId);
      
      // Crear PDF desde el HTML (abre el diálogo de impresión)
      await convertirHTMLaPDF(htmlContent);
      
      showSuccessMessage('Documento preparado para imprimir/guardar como PDF');
    } catch (error) {
      console.error('Error preparando documento:', error);
      showErrorMessage('Error al preparar el documento: ' + error.message);
    }
  }

  // Descargar documento HTML
  async function downloadDocumentHTML(documentId) {
    try {
      showSuccessMessage('Generando HTML...');
      
      // Obtener el HTML del documento desde la vista previa
      const htmlContent = await obtenerHTMLVistaPrevia(documentId);
      
      // Crear un HTML completo con estilos y metadatos
      const documento = documentsData.find(doc => doc.id === documentId);
      const fullHTML = `
        <!DOCTYPE html>
        <html lang="es">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>${documento?.title || 'Documento AIM'}</title>
          <style>
            @page {
              size: Letter;
              margin: 20mm;
            }
            
            * {
              box-sizing: border-box;
              margin: 0;
              padding: 0;
            }
            
            body {
              font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
              line-height: 1.6;
              color: #374151;
              background: white;
              width: 216mm;
              max-width: 216mm;
              margin: 0 auto;
              padding: 0;
            }
            
            .document-container {
              max-width: 216mm;
              width: 216mm;
              margin: 0 auto;
              padding: 20mm;
              background: white;
              min-height: 279mm;
              position: relative;
            }
            
            .bg-gradient-to-r {
              background: linear-gradient(135deg, #0d9488 0%, #059669 100%);
            }
            
            .text-white {
              color: white;
            }
            
            .p-6 {
              padding: 1.5rem;
            }
            
            .rounded-lg {
              border-radius: 0.5rem;
            }
            
            .text-xl {
              font-size: 1.25rem;
            }
            
            .font-bold {
              font-weight: 700;
            }
            
            .mb-2 {
              margin-bottom: 0.5rem;
            }
            
            .space-y-6 > * + * {
              margin-top: 1.5rem;
            }
            
            @media print {
              body {
                padding: 0;
                max-width: none;
                width: 100%;
              }
              
              .document-container {
                box-shadow: none;
                border: none;
              }
              
              .bg-gradient-to-r {
                background: #0d9488 !important;
              }
            }
          </style>
        </head>
        <body>
          ${htmlContent}
        </body>
        </html>
      `;
      
      // Crear un blob con el contenido HTML completo
      const blob = new Blob([fullHTML], { type: 'text/html;charset=utf-8' });
      
      // Crear un enlace temporal para descargar
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = `documento_${documentId}.html`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Limpiar el URL del objeto
      URL.revokeObjectURL(link.href);
      
      showSuccessMessage('Documento HTML descargado exitosamente');
    } catch (error) {
      console.error('Error descargando documento HTML:', error);
      showErrorMessage('Error al descargar el documento HTML: ' + error.message);
    }
  }

  // Descargar documento (función general)
  async function downloadDocument(documentId) {
    await downloadDocumentPDF(documentId);
  }

  // Configurar event listeners
  function setupEventListeners() {
    // Búsqueda
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
      searchInput.addEventListener('input', filterDocuments);
    }
    
    // Filtros
    const statusFilter = document.getElementById('statusFilter');
    const typeFilter = document.getElementById('typeFilter');
    
    if (statusFilter) {
      statusFilter.addEventListener('change', filterDocuments);
    }
    
    if (typeFilter) {
      typeFilter.addEventListener('change', filterDocuments);
    }
    
    // Paginación
    const prevPage = document.getElementById('prevPage');
    const nextPage = document.getElementById('nextPage');
    
    if (prevPage) {
      prevPage.addEventListener('click', () => changePage(currentPage - 1));
    }
    
    if (nextPage) {
      nextPage.addEventListener('click', () => changePage(currentPage + 1));
    }
    
    // Cerrar modal con Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeDocumentModal();
      }
    });
    
    // Cerrar modal clickeando fuera
    const documentModal = document.getElementById('documentModal');
    if (documentModal) {
      documentModal.addEventListener('click', (e) => {
        if (e.target.id === 'documentModal') {
          closeDocumentModal();
        }
      });
    }
    
    console.log('✅ Event listeners configurados para documentos');
  }

  // Filtrar documentos
  function filterDocuments() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const statusFilter = document.getElementById('statusFilter').value;
    const typeFilter = document.getElementById('typeFilter').value;
    
    filteredDocuments = documentsData.filter(document => {
      const matchesSearch = !searchTerm || 
        document.title?.toLowerCase().includes(searchTerm) ||
        document.description?.toLowerCase().includes(searchTerm) ||
        document.order?.title?.toLowerCase().includes(searchTerm) ||
        document.documentType?.name?.toLowerCase().includes(searchTerm);
      
      const matchesStatus = !statusFilter || document.status === statusFilter;
      const matchesType = !typeFilter || document.documentType?.name === typeFilter;
      
      return matchesSearch && matchesStatus && matchesType;
    });
    
    currentPage = 1;
    renderDocuments();
    updatePagination();
    
    console.log('🔍 Filtros aplicados:', { searchTerm, statusFilter, typeFilter, resultados: filteredDocuments.length });
  }

  // Cambiar página
  function changePage(page) {
    if (page < 1 || page > Math.ceil(filteredDocuments.length / documentsPerPage)) return;
    
    currentPage = page;
    renderDocuments();
    updatePagination();
  }

  // Actualizar paginación
  function updatePagination() {
    const totalPages = Math.ceil(filteredDocuments.length / documentsPerPage);
    const startIndex = (currentPage - 1) * documentsPerPage;
    const endIndex = Math.min(startIndex + documentsPerPage, filteredDocuments.length);
    
    // Actualizar rango actual
    const currentRangeEl = document.getElementById('currentRange');
    const totalDocumentsCountEl = document.getElementById('totalDocumentsCount');
    
    if (currentRangeEl) {
      currentRangeEl.textContent = filteredDocuments.length > 0 ? `${startIndex + 1}-${endIndex}` : '0-0';
    }
    
    if (totalDocumentsCountEl) {
      totalDocumentsCountEl.textContent = filteredDocuments.length;
    }
    
    // Actualizar botones de navegación
    const prevPageEl = document.getElementById('prevPage');
    const nextPageEl = document.getElementById('nextPage');
    
    if (prevPageEl) {
      prevPageEl.disabled = currentPage === 1;
    }
    
    if (nextPageEl) {
      nextPageEl.disabled = currentPage === totalPages || totalPages === 0;
    }
    
    // Renderizar números de página
    const pageNumbers = document.getElementById('pageNumbers');
    if (!pageNumbers) return;
    
    pageNumbers.innerHTML = '';
    
    for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
      const button = document.createElement('button');
      button.textContent = i;
      button.className = `px-3 py-2 rounded-lg ${
        i === currentPage 
          ? 'bg-teal-600 text-white' 
          : 'border border-gray-300 hover:bg-gray-50'
      }`;
      button.onclick = () => changePage(i);
      pageNumbers.appendChild(button);
    }
  }

  // Funciones auxiliares
  function getDocumentTypeColor(document) {
    // Usar el color del tipo de documento si está disponible
    if (document.documentType?.color) {
      return `bg-${document.documentType.color}-500`;
    }
    
    // Fallback basado en el nombre del tipo
    const typeName = document.documentType?.name?.toLowerCase() || '';
    if (typeName.includes('análisis') || typeName.includes('analisis')) return 'bg-teal-500';
    if (typeName.includes('especificaciones') || typeName.includes('técnico')) return 'bg-green-500';
    if (typeName.includes('cotizador') || typeName.includes('cotización')) return 'bg-yellow-500';
    if (typeName.includes('roi') || typeName.includes('retorno')) return 'bg-purple-500';
    if (typeName.includes('cálculo') || typeName.includes('calculo')) return 'bg-orange-500';
    
    return 'bg-gray-500';
  }

  function getDocumentTypeLabel(document) {
    // Usar el nombre del tipo de documento del backend
    if (document.documentType?.name) {
      return document.documentType.name;
    }
    
    return 'Tipo no definido';
  }

  function getStatusColor(status) {
    const colors = {
      'DRAFT': 'bg-gray-100 text-gray-800',
      'FINALIZED': 'bg-green-100 text-green-800',
      'SENT': 'bg-teal-100 text-teal-800',
      'REVIEWED': 'bg-yellow-100 text-yellow-800',
      'APPROVED': 'bg-emerald-100 text-emerald-800',
      'REJECTED': 'bg-red-100 text-red-800',
      'ARCHIVED': 'bg-purple-100 text-purple-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  }

  function getStatusLabel(status) {
    const labels = {
      'DRAFT': 'Borrador',
      'FINALIZED': 'Finalizado',
      'SENT': 'Enviado',
      'REVIEWED': 'Revisado',
      'APPROVED': 'Aprobado',
      'REJECTED': 'Rechazado',
      'ARCHIVED': 'Archivado'
    };
    return labels[status] || status || 'Sin estado';
  }

  function formatDate(dateString) {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  }

  function showErrorMessage(message) {
    console.error('Error:', message);
    
    // Crear notificación de error temporal
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 max-w-sm';
    notification.innerHTML = `
      <div class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <span>${message}</span>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // Remover después de 5 segundos
    setTimeout(() => {
      if (notification.parentNode) {
        document.body.removeChild(notification);
      }
    }, 5000);
  }

  function showSuccessMessage(message) {
    console.log('Success:', message);
    
    // Crear notificación de éxito temporal
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 max-w-sm';
    notification.innerHTML = `
      <div class="flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        <span>${message}</span>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // Remover después de 3 segundos
    setTimeout(() => {
      if (notification.parentNode) {
        document.body.removeChild(notification);
      }
    }, 3000);
  }

  // ===== FUNCIONES COPIADAS DEL PORTAL DE USUARIOS PARA VISTA PREVIA IDÉNTICA =====

  // 🔥 FUNCIÓN INTELIGENTE: Integrar contenido específico según el tipo de documento
  async function integrarContenidoEspecifico(documentId, htmlContent) {
    try {
      console.log(`🎯 INICIANDO integración de contenido específico para documento ${documentId}`);
      console.log(`📊 HTML contenido de entrada (primeros 500 chars):`, htmlContent?.substring(0, 500));
      
      // Obtener el documento completo con sus datos
      const documento = documentsData.find(doc => doc.id === documentId);
      console.log(`📄 Documento encontrado:`, {
        found: !!documento,
        id: documento?.id,
        title: documento?.title,
        documentType: documento?.documentType?.name,
        slug: documento?.documentType?.slug,
        hasRoiCalculation: !!documento?.roiCalculation,
        hasSpecificData: !!documento?.specificData,
        specificDataKeys: documento?.specificData ? Object.keys(documento.specificData) : [],
        roiCalculationKeys: documento?.roiCalculation ? Object.keys(documento.roiCalculation) : []
      });
      
      if (!documento) {
        console.log(`⚠️ No se encontró documento para ${documentId}`);
        console.log(`⚠️ Documentos disponibles:`, documentsData.map(d => ({ id: d.id, title: d.title })));
        return htmlContent;
      }
      
      // Determinar el tipo de documento
      const tipoDocumento = determinarTipoDocumento(documento);
      console.log(`📋 Tipo de documento detectado: ${tipoDocumento}`);
      
      // Integrar contenido específico según el tipo
      let htmlContenidoEspecifico = '';
      switch (tipoDocumento) {
        case 'cotizacion':
          console.log(`💰 Procesando como documento de cotización`);
          htmlContenidoEspecifico = await integrarDatosCotizador(documento, htmlContent);
          break;
        
        case 'roi':
          console.log(`📊 Procesando como documento de ROI`);
          htmlContenidoEspecifico = await integrarDatosROI(documento, htmlContent);
          break;
        
        default:
          console.log(`📄 Procesando como documento estándar`);
          // Para documentos normales, mostrar detalles estándar
          htmlContenidoEspecifico = integrarDetallesEstandar(documento, htmlContent);
          break;
      }
      
      console.log(`🎯 RESULTADO integración:`, {
        tipoDetectado: tipoDocumento,
        htmlOriginalLength: htmlContent?.length || 0,
        htmlFinalLength: htmlContenidoEspecifico?.length || 0,
        cambiosRealizados: htmlContenidoEspecifico !== htmlContent
      });
      
      return htmlContenidoEspecifico;
      
    } catch (error) {
      console.error('❌ Error CRÍTICO integrando contenido específico:', error);
      console.error('❌ Stack trace:', error.stack);
      return htmlContent;
    }
  }

  // Función para determinar el tipo de documento
  function determinarTipoDocumento(documento) {
    const tipoNombre = documento.documentType?.name?.toLowerCase() || '';
    const tipoSlug = documento.documentType?.slug?.toLowerCase() || '';
    const titulo = documento.title?.toLowerCase() || '';
    
    console.log(`🔍 Determinando tipo de documento:`, {
      tipoNombre,
      tipoSlug,
      titulo,
      tieneRoiCalculation: !!documento.roiCalculation,
      tieneSpecificData: !!documento.specificData,
      specificDataKeys: documento.specificData ? Object.keys(documento.specificData) : [],
      roiCalculationKeys: documento.roiCalculation ? Object.keys(documento.roiCalculation) : []
    });
    
    // 🎯 PRIORIDAD 1: Detectar por campo roiCalculation del backend
    if (documento.roiCalculation && (
        documento.roiCalculation.roiPercentage !== undefined ||
        documento.roiCalculation.employees ||
        documento.roiCalculation.calculations
      )) {
      console.log(`✅ Detectado como ROI por campo roiCalculation`);
      return 'roi';
    }
    
    // 🎯 PRIORIDAD 2: Detectar documentos de ROI por nombre/slug
    if (tipoNombre.includes('roi') || 
        tipoNombre.includes('retorno') || 
        tipoNombre.includes('inversion') ||
        tipoSlug.includes('roi') ||
        titulo.includes('roi') ||
        titulo.includes('retorno')) {
      console.log(`✅ Detectado como ROI por nombre/slug`);
      return 'roi';
    }
    
    // 🎯 PRIORIDAD 3: Detectar documentos de cotización por nombre/slug
    if (tipoNombre.includes('cotiz') || 
        tipoNombre.includes('quote') || 
        tipoNombre.includes('presupuesto') ||
        tipoSlug.includes('cotiz') ||
        tipoSlug.includes('quote') ||
        titulo.includes('cotiz') ||
        titulo.includes('presupuesto')) {
      console.log(`✅ Detectado como cotización por nombre/slug`);
      return 'cotizacion';
    }
    
    // 🎯 PRIORIDAD 4: Detectar por campos específicos en los datos
    if (documento.specificData) {
      const tieneDetosQuote = Object.keys(documento.specificData).some(key => {
        const data = documento.specificData[key];
        if (typeof data === 'string') {
          return data.includes('selectedAgents') || data.includes('selectedPlan') || data.includes('aimQuoteData');
        }
        return data && (data.selectedAgents || data.selectedPlan || data.selectedServices);
      });
      
      const tieneDatosROI = Object.keys(documento.specificData).some(key => {
        const data = documento.specificData[key];
        if (typeof data === 'string') {
          return data.includes('roiPercentage') || data.includes('paybackMonths') || data.includes('employees');
        }
        return data && (data.roiPercentage !== undefined || data.employees || data.calculations);
      });
      
      if (tieneDetosQuote) {
        console.log(`✅ Detectado como cotización por specificData`);
        return 'cotizacion';
      }
      if (tieneDatosROI) {
        console.log(`✅ Detectado como ROI por specificData`);
        return 'roi';
      }
    }
    
    console.log(`📄 Detectado como documento estándar`);
    return 'estandar';
  }

  // 💰 FUNCIÓN ESPECÍFICA: Integrar datos del cotizador (solo para cotizaciones)
  async function integrarDatosCotizador(documento, htmlContent) {
    try {
      console.log(`💰 Integrando datos de cotizador para documento de cotización`);
      console.log(`💰 Datos disponibles:`, {
        tieneSpecificData: !!documento.specificData,
        specificDataKeys: documento.specificData ? Object.keys(documento.specificData) : [],
        tieneAimQuoteData: !!window.aimQuoteData,
        specificData: documento.specificData
      });
      
      // Buscar datos de cotizador en diferentes lugares posibles
      let cotizadorHTML = '';
      let cotizadorEncontrado = false;
      
      // 🎯 PRIORIDAD 1: Buscar en document.specificData
      if (documento.specificData) {
        Object.keys(documento.specificData).forEach(fieldName => {
          const fieldData = documento.specificData[fieldName];
          console.log(`🔍 Analizando campo ${fieldName}:`, fieldData);
          
          // Verificar si es un campo de cotizador
          let quoteData = null;
          
          if (typeof fieldData === 'string' && (
              fieldData.includes('selectedAgents') || 
              fieldData.includes('selectedPlan') || 
              fieldData.includes('selectedServices') ||
              fieldData.includes('aimQuoteData') ||
              fieldData.includes('calculations') ||
              fieldData.includes('grandTotal')
            )) {
            try {
              quoteData = JSON.parse(fieldData);
              console.log(`✅ Datos parseados de string ${fieldName}:`, quoteData);
            } catch (parseError) {
              console.warn(`⚠️ Error parseando string ${fieldName}:`, parseError);
            }
          } else if (typeof fieldData === 'object' && fieldData !== null && (
              fieldData.selectedAgents || 
              fieldData.selectedPlan || 
              fieldData.selectedServices ||
              fieldData.calculations ||
              fieldData.grandTotal
            )) {
            quoteData = fieldData;
            console.log(`✅ Datos de objeto ${fieldName}:`, quoteData);
          }
          
          if (quoteData && (quoteData.selectedAgents || quoteData.selectedPlan || quoteData.selectedServices || quoteData.calculations)) {
            console.log(`✅ Datos de cotización válidos encontrados en ${fieldName}:`, quoteData);
            cotizadorEncontrado = true;
            
            // Generar HTML del cotizador
            const quoteHTML = generarHTMLCotizadorCompleto(quoteData, fieldName);
            cotizadorHTML += quoteHTML;
          }
        });
      }
      
      // 🎯 PRIORIDAD 2: Buscar en window.aimQuoteData como fallback
      if (!cotizadorEncontrado && window.aimQuoteData) {
        console.log(`🔍 Buscando en window.aimQuoteData:`, window.aimQuoteData);
        Object.keys(window.aimQuoteData).forEach(fieldName => {
          const quoteData = window.aimQuoteData[fieldName];
          if (quoteData && (quoteData.selectedAgents || quoteData.selectedPlan || quoteData.selectedServices)) {
            console.log(`💰 Datos de cotizador encontrados en window.aimQuoteData:`, quoteData);
            cotizadorEncontrado = true;
            
            const quoteHTML = generarHTMLCotizadorCompleto(quoteData, fieldName);
            cotizadorHTML += quoteHTML;
          }
        });
      }
      
      // 3. Si encontramos datos, integrarlos en el HTML
      if (cotizadorHTML) {
        console.log(`✅ INTEGRANDO HTML del cotizador`);
        return reemplazarSeccionDetalles(htmlContent, cotizadorHTML);
      } else {
        console.log(`⚠️ NO se encontraron datos de cotizador`);
        console.log(`⚠️ Estructura completa del documento:`, JSON.stringify(documento, null, 2));
        return htmlContent;
      }
      
    } catch (error) {
      console.error('❌ Error integrando cotizador:', error);
      return htmlContent;
    }
  }

  // 📊 FUNCIÓN ESPECÍFICA: Integrar datos de ROI (solo para documentos de ROI)
  async function integrarDatosROI(documento, htmlContent) {
    try {
      console.log(`📊 Integrando datos de ROI para documento de análisis ROI`);
      console.log(`📊 Datos disponibles:`, {
        tieneRoiCalculation: !!documento.roiCalculation,
        tieneSpecificData: !!documento.specificData,
        roiCalculation: documento.roiCalculation,
        specificData: documento.specificData
      });
      
      // Buscar datos de ROI en diferentes lugares posibles
      let roiHTML = '';
      let roiEncontrado = false;
      
      // 🎯 PRIORIDAD 1: Buscar en document.roiCalculation (campo principal del backend)
      if (documento.roiCalculation && (
          documento.roiCalculation.roiPercentage !== undefined || 
          documento.roiCalculation.employees || 
          documento.roiCalculation.calculations
        )) {
        console.log(`✅ Datos de ROI encontrados en roiCalculation:`, documento.roiCalculation);
        roiEncontrado = true;
        
        // Generar HTML del ROI usando los datos del campo principal
        const roiHTMLSection = generarHTMLROICompleto(documento.roiCalculation, 'roiCalculation');
        roiHTML += roiHTMLSection;
      }
      
      // 🎯 PRIORIDAD 2: Buscar en document.specificData como fallback
      if (!roiEncontrado && documento.specificData) {
        Object.keys(documento.specificData).forEach(fieldName => {
          const fieldData = documento.specificData[fieldName];
          
          // Verificar si es un campo de ROI
          let roiData = null;
          
          if (typeof fieldData === 'string' && (
              fieldData.includes('roiPercentage') || 
              fieldData.includes('paybackMonths') || 
              fieldData.includes('employees') ||
              fieldData.includes('calculations')
            )) {
            try {
              roiData = JSON.parse(fieldData);
            } catch (parseError) {
              console.warn(`⚠️ Error parseando string ROI ${fieldName}:`, parseError);
            }
          } else if (typeof fieldData === 'object' && fieldData !== null && (
              fieldData.roiPercentage !== undefined || 
              fieldData.employees || 
              fieldData.calculations ||
              fieldData.paybackMonths !== undefined
            )) {
            roiData = fieldData;
          }
          
          if (roiData && (roiData.roiPercentage !== undefined || roiData.employees || roiData.calculations)) {
            console.log(`✅ Datos de ROI válidos encontrados en specificData:`, roiData);
            roiEncontrado = true;
            
            // Generar HTML del ROI
            const roiHTMLSection = generarHTMLROICompleto(roiData, fieldName);
            roiHTML += roiHTMLSection;
          }
        });
      }
      
      // 3. Si encontramos datos, integrarlos en el HTML
      if (roiHTML) {
        console.log(`✅ INTEGRANDO HTML de ROI`);
        return reemplazarSeccionDetalles(htmlContent, roiHTML);
      } else {
        console.log(`⚠️ NO se encontraron datos de ROI válidos`);
        console.log(`⚠️ Estructura del documento completa:`, JSON.stringify(documento, null, 2));
        return htmlContent;
      }
      
    } catch (error) {
      console.error('❌ Error integrando ROI:', error);
      return htmlContent;
    }
  }

  // 📄 FUNCIÓN ESPECÍFICA: Integrar detalles estándar (para documentos normales)
  function integrarDetallesEstandar(documento, htmlContent) {
    try {
      console.log(`📄 Integrando detalles estándar para documento normal`);
      
      // Generar HTML de detalles estándar
      let detallesHTML = '';
      
      if (documento.specificData && Object.keys(documento.specificData).length > 0) {
        detallesHTML = generarHTMLDetallesEstandar(documento.specificData);
      } else {
        detallesHTML = '';
      }
      
      return reemplazarSeccionDetalles(htmlContent, detallesHTML);
      
    } catch (error) {
      console.error('❌ Error integrando detalles estándar:', error);
      return htmlContent;
    }
  }

  // 🔧 FUNCIÓN AUXILIAR: Reemplazar la sección de detalles en el HTML
  function reemplazarSeccionDetalles(htmlContent, nuevoContenido) {
    try {
      // REEMPLAZAR la sección "Información del Documento" con el nuevo contenido
      const detallesPattern = /<div class="section">\s*<div class="section-header">\s*<div class="section-title">Información del Documento<\/div>\s*<\/div>\s*<div class="section-content">[\s\S]*?<\/div>\s*<\/div>/;
      
      if (detallesPattern.test(htmlContent)) {
        // Reemplazar la sección completa de "Información del Documento"
        htmlContent = htmlContent.replace(detallesPattern, nuevoContenido.trim());
        console.log(`✅ Sección "Información del Documento" reemplazada exitosamente`);
      } else if (htmlContent.includes('<!-- Footer -->')) {
        // Fallback: insertar antes del footer si no se encuentra la sección
        htmlContent = htmlContent.replace('<!-- Footer -->', `${nuevoContenido}\n\n          <!-- Footer -->`);
        console.log(`✅ Contenido integrado antes del footer (fallback)`);
      } else if (htmlContent.includes('<div class="footer">')) {
        // Fallback: insertar antes del div del footer
        htmlContent = htmlContent.replace('<div class="footer">', `${nuevoContenido}\n\n          <div class="footer">`);
        console.log(`✅ Contenido integrado antes del div footer (fallback)`);
      } else {
        htmlContent += `\n${nuevoContenido}`;
        console.log(`✅ Contenido agregado al final (fallback)`);
      }
      
      return htmlContent;
    } catch (error) {
      console.error('❌ Error reemplazando sección de detalles:', error);
      return htmlContent;
    }
  }

  // 📊 FUNCIÓN AUXILIAR: Generar HTML completo de ROI con gráficas
  function generarHTMLROICompleto(roiData, fieldName) {
    console.log(`📊 Generando HTML completo para ROI ${fieldName}`);
    
    // Asegurar que tenemos todos los datos necesarios
    const {
      employees = [],
      roiPercentage = 0,
      paybackMonths = 0,
      netPresentValue = 0,
      fiveYearSavings = 0,
      calculations = {},
      charts = {},
      calculatedAt = new Date().toISOString()
    } = roiData;
    
    // Calcular métricas adicionales si no están presentes
    const currentAnnualCost = calculations.currentAnnualCost || 0;
    const projectedAnnualSavings = calculations.projectedAnnualSavings || 0;
    const totalImplementationCost = roiData.totalImplementationCost || 0;
    const monthlyMaintenanceCost = roiData.monthlyMaintenanceCost || 0;
    
    return `
      <!-- Sección de Análisis ROI -->
      <div class="section">
        <div class="section-header">
          <div class="section-title">Análisis de Retorno de Inversión (ROI)</div>
        </div>
        <div class="section-content">
          <!-- Resumen ejecutivo ROI -->
          <div class="content-block">
            <div style="text-align: center; margin-bottom: 20px;">
              <h3 style="color: #1e293b; font-size: 18px; font-weight: 700; margin-bottom: 8px;">
                 Análisis de Retorno de Inversión (ROI)
              </h3>
              <p style="color: #64748b; font-size: 14px; font-style: italic;">
                Análisis calculado el ${new Date(calculatedAt).toLocaleDateString('es-ES')}
              </p>
            </div>
            
            <!-- Métricas principales en grid -->
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 25px;">
              <div style="background: linear-gradient(135deg, #f0f9ff, #e0f2fe); border: 1px solid #0369a1; border-radius: 8px; padding: 15px; text-align: center;">
                <div style="font-size: 28px; font-weight: 700; color: #0369a1; margin-bottom: 5px;">${roiPercentage.toFixed(1)}%</div>
                <div style="font-size: 12px; color: #075985; font-weight: 600;">ROI Anual</div>
              </div>
              
              <div style="background: linear-gradient(135deg, #f0fdf4, #dcfce7); border: 1px solid #16a34a; border-radius: 8px; padding: 15px; text-align: center;">
                <div style="font-size: 28px; font-weight: 700; color: #16a34a; margin-bottom: 5px;">${paybackMonths}</div>
                <div style="font-size: 12px; color: #15803d; font-weight: 600;">Meses de Recuperación</div>
              </div>
              
              <div style="background: linear-gradient(135deg, #fefce8, #fef3c7); border: 1px solid #d97706; border-radius: 8px; padding: 15px; text-align: center;">
                <div style="font-size: 28px; font-weight: 700; color: #d97706; margin-bottom: 5px;">$${projectedAnnualSavings.toLocaleString()}</div>
                <div style="font-size: 12px; color: #a16207; font-weight: 600;">Ahorro Anual</div>
              </div>
              
              <div style="background: linear-gradient(135deg, #fdf2f8, #fce7f3); border: 1px solid #c026d3; border-radius: 8px; padding: 15px; text-align: center;">
                <div style="font-size: 28px; font-weight: 700; color: #c026d3; margin-bottom: 5px;">$${netPresentValue.toLocaleString()}</div>
                <div style="font-size: 12px; color: #a21caf; font-weight: 600;">Valor Presente Neto</div>
              </div>
            </div>
          </div>
          
          <!-- Desglose financiero -->
          <div class="specific-data">
            <div class="data-item">
              <div class="data-label">Costo operacional actual (anual):</div>
              <div class="data-value">$${currentAnnualCost.toLocaleString()} MXN</div>
            </div>
            
            <div class="data-item">
              <div class="data-label">Costo de implementación:</div>
              <div class="data-value">$${totalImplementationCost.toLocaleString()} MXN</div>
            </div>
            
            <div class="data-item">
              <div class="data-label">Ahorros proyectados (anuales):</div>
              <div class="data-value">$${projectedAnnualSavings.toLocaleString()} MXN</div>
            </div>
            
            <div class="data-item">
              <div class="data-label">Mantenimiento mensual:</div>
              <div class="data-value">$${monthlyMaintenanceCost.toLocaleString()} MXN/mes</div>
            </div>
            
            <div class="data-item" style="background: #f0f9ff; border-top: 2px solid #0369a1;">
              <div class="data-label" style="color: #075985; font-weight: 700;">Ahorros a 5 años:</div>
              <div class="data-value" style="color: #0369a1; font-weight: 700; font-size: 16px;">$${fiveYearSavings.toLocaleString()} MXN</div>
            </div>
          </div>
          
          <!-- Análisis de empleados (si hay datos) -->
          ${employees.length > 0 ? `
          <div class="content-block">
            <h4 style="font-weight: 600; color: #1e293b; font-size: 16px; margin-bottom: 15px;">Análisis por Empleado</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 12px;">
              ${employees.map(emp => `
                <div style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 6px; padding: 12px;">
                  <div style="font-weight: 600; color: #334155; font-size: 14px; margin-bottom: 4px;">${emp.name}</div>
                  <div style="font-size: 12px; color: #64748b; margin-bottom: 8px;">${emp.position}</div>
                  <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 8px; font-size: 11px;">
                    <div>
                      <span style="color: #64748b;">Salario:</span><br>
                      <span style="font-weight: 600; color: #1e293b;">$${emp.monthlySalary?.toLocaleString() || 0}/mes</span>
                    </div>
                    <div>
                      <span style="color: #64748b;">% Afectado:</span><br>
                      <span style="font-weight: 600; color: #059669;">${emp.affectedPercentage || 0}%</span>
                    </div>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
          ` : ''}
          
          <!-- Gráfica de ROI (representación textual) -->
          <div class="content-block">
            <h4 style="font-weight: 600; color: #1e293b; font-size: 16px; margin-bottom: 15px;">Proyección de Ahorros (12 meses)</h4>
            <div style="background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 8px; padding: 15px;">
              ${generarGraficaROITexto(charts.savingsOverTime || [])}
            </div>
          </div>
          
          <!-- Desglose de beneficios -->
          ${charts.benefitsBreakdown ? `
          <div class="content-block">
            <h4 style="font-weight: 600; color: #1e293b; font-size: 16px; margin-bottom: 15px;">Desglose de Beneficios</h4>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
              <div style="background: #ecfdf5; border-left: 4px solid #10b981; padding: 10px;">
                <div style="font-size: 12px; color: #065f46; font-weight: 600;">Ahorro de Tiempo</div>
                <div style="font-size: 18px; font-weight: 700; color: #059669;">$${charts.benefitsBreakdown.timeSavings?.toLocaleString() || 0}</div>
              </div>
              <div style="background: #eff6ff; border-left: 4px solid #3b82f6; padding: 10px;">
                <div style="font-size: 12px; color: #1e40af; font-weight: 600;">Reducción de Errores</div>
                <div style="font-size: 18px; font-weight: 700; color: #2563eb;">$${charts.benefitsBreakdown.errorReduction?.toLocaleString() || 0}</div>
              </div>
              <div style="background: #fef3c7; border-left: 4px solid #f59e0b; padding: 10px;">
                <div style="font-size: 12px; color: #92400e; font-weight: 600;">Aumento Productividad</div>
                <div style="font-size: 18px; font-weight: 700; color: #d97706;">$${charts.benefitsBreakdown.productivityIncrease?.toLocaleString() || 0}</div>
              </div>
              <div style="background: #f3e8ff; border-left: 4px solid #8b5cf6; padding: 10px;">
                <div style="font-size: 12px; color: #5b21b6; font-weight: 600;">Otros Beneficios</div>
                <div style="font-size: 18px; font-weight: 700; color: #7c3aed;">$${charts.benefitsBreakdown.otherBenefits?.toLocaleString() || 0}</div>
              </div>
            </div>
          </div>
          ` : ''}
          
          <!-- Conclusiones y recomendaciones -->
          <div class="content-block">
            <h4 style="font-weight: 600; color: #1e293b; font-size: 16px; margin-bottom: 15px;">Conclusiones del Análisis</h4>
            <div style="background: #f0f9ff; border: 1px solid #0369a1; border-radius: 8px; padding: 15px;">
              ${generarConclusionesROI(roiData)}
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // 🔥 FUNCIÓN AUXILIAR: Generar HTML completo del cotizador
  function generarHTMLCotizadorCompleto(quoteData, fieldName) {
    console.log(`🎨 Generando HTML completo para cotizador ${fieldName}`);
    
    // Completar datos si es necesario
    if (!quoteData.calculations || !quoteData.summary) {
      quoteData = completarDatosCotizacion(quoteData);
    }
    
    const { selectedAgents = [], selectedPlan = null, selectedServices = [], calculations, summary } = quoteData;
    
    return `
      <!-- Sección de Cotización AIM -->
      <div class="section">
        <div class="section-header">
          <div class="section-title">Cotización y Precios</div>
        </div>
        <div class="section-content">
          <!-- Información básica de la cotización -->
          <div class="content-block">
            <div style="text-align: center; color: #64748b; font-size: 13px; font-style: italic; margin-bottom: 15px;">Válida por ${summary.validityDays} días | Moneda: ${calculations.currency}</div>
            
            <!-- Grid principal con 3 columnas -->
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;">
              <!-- Agentes -->
              <div style="padding: 10px; background: #f8fafc; border-radius: 4px; border-left: 2px solid #14b8a6;">
                <div style="font-weight: 600; color: #475569; font-size: 12px; margin-bottom: 3px;">Agentes Seleccionados (${selectedAgents.length})</div>
                <div style="color: #1e293b; font-size: 13px;">
                  ${selectedAgents.length > 0 ? selectedAgents.map(agent => `
                    <div style="margin-bottom: 4px;">• ${agent.name || 'Agente'}</div>
                  `).join('') : 'Ningún agente seleccionado'}
                </div>
              </div>
              
              <!-- Plan -->
              <div style="padding: 10px; background: #f8fafc; border-radius: 4px; border-left: 2px solid #14b8a6;">
                <div style="font-weight: 600; color: #475569; font-size: 12px; margin-bottom: 3px;">Plan de Suscripción</div>
                <div style="color: #1e293b; font-size: 13px;">
                  ${selectedPlan ? `
                    <div><strong>${selectedPlan.name}</strong></div>
                    <div style="font-size: 12px; color: #64748b;">$${(selectedPlan.price || selectedPlan.monthlyPrice || 0).toLocaleString()}/mes</div>
                  ` : 'Ningún plan seleccionado'}
                </div>
              </div>
              
              <!-- Servicios -->
              <div style="padding: 10px; background: #f8fafc; border-radius: 4px; border-left: 2px solid #14b8a6;">
                <div style="font-weight: 600; color: #475569; font-size: 12px; margin-bottom: 3px;">Servicios Adicionales (${selectedServices.length})</div>
                <div style="color: #1e293b; font-size: 13px;">
                  ${selectedServices.length > 0 ? selectedServices.map(service => `
                    <div style="margin-bottom: 2px; font-size: 12px;">• ${service.name}</div>
                  `).join('') : 'Ningún servicio adicional'}
                </div>
              </div>
            </div>
          </div>
          
          <!-- Desglose de costos -->
          <div class="specific-data">
            <div class="data-item">
              <div class="data-label">Agentes (implementación):</div>
              <div class="data-value">$${calculations.baseTotal.toLocaleString()} ${calculations.currency}</div>
            </div>
            
            <div class="data-item">
              <div class="data-label">Configuración inicial:</div>
              <div class="data-value">$${calculations.setupTotal.toLocaleString()} ${calculations.currency}</div>
            </div>
            
            ${calculations.warrantyTotal > 0 ? `
            <div class="data-item">
              <div class="data-label">Garantía extendida:</div>
              <div class="data-value">$${calculations.warrantyTotal.toLocaleString()} ${calculations.currency}</div>
            </div>
            ` : ''}
            
            <div class="data-item">
              <div class="data-label">Costo mensual recurrente:</div>
              <div class="data-value">$${calculations.monthlyTotal.toLocaleString()} ${calculations.currency}/mes</div>
            </div>
            
            <div class="data-item" style="background: #ecfdf5; border-top: 2px solid #14b8a6;">
              <div class="data-label" style="color: #166534; font-weight: 700;">Total Inicial:</div>
              <div class="data-value" style="color: #15803d; font-weight: 700; font-size: 16px;">$${calculations.grandTotal.toLocaleString()} ${calculations.currency}</div>
            </div>
            
            <div class="data-item" style="background: #eff6ff;">
              <div class="data-label" style="color: #1e40af; font-weight: 700;">Total Primer Año:</div>
              <div class="data-value" style="color: #2563eb; font-weight: 700; font-size: 16px;">$${calculations.firstYearTotal.toLocaleString()} ${calculations.currency}</div>
            </div>
          </div>
          
          <!-- Términos de la cotización -->
          <div class="content-block">
            <div style="font-weight: 600; color: #1e293b; font-size: 14px; margin-bottom: 8px;">Términos de la Cotización</div>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
              <div>
                <span style="color: #64748b; font-size: 12px;">Términos de pago:</span><br>
                <span style="font-weight: 600; color: #1e293b; font-size: 13px;">${summary.paymentTerms}</span>
              </div>
              <div>
                <span style="color: #64748b; font-size: 12px;">Garantía:</span><br>
                <span style="font-weight: 600; color: #1e293b; font-size: 13px;">${summary.warranty}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Función para generar gráfica de ROI en formato texto
  function generarGraficaROITexto(savingsData) {
    if (!savingsData || savingsData.length === 0) {
      return '<p style="text-align: center; color: #64748b; font-style: italic;">No hay datos de proyección disponibles</p>';
    }
    
    let html = '<div style="font-family: monospace; font-size: 11px; line-height: 1.4;">';
    html += '<div style="display: grid; grid-template-columns: auto 1fr auto; gap: 8px; align-items: center; margin-bottom: 5px;">';
    html += '<span style="font-weight: 600; color: #374151;">Mes</span>';
    html += '<span style="font-weight: 600; color: #374151;">Progreso</span>';
    html += '<span style="font-weight: 600; color: #374151;">Ahorro</span>';
    html += '</div>';
    
    savingsData.slice(0, 12).forEach((data, index) => {
      const mes = index + 1;
      const ahorro = data.cumulativeSavings || data.savings || 0;
      const barWidth = Math.min(100, Math.max(5, (ahorro / Math.max(...savingsData.map(d => d.cumulativeSavings || d.savings || 0))) * 100));
      
      html += '<div style="display: grid; grid-template-columns: auto 1fr auto; gap: 8px; align-items: center; margin-bottom: 3px;">';
      html += `<span style="color: #64748b; width: 30px;">${mes}</span>`;
      html += `<div style="background: #e5e7eb; height: 8px; border-radius: 4px; overflow: hidden; min-width: 100px;">`;
      html += `<div style="background: linear-gradient(90deg, #14b8a6, #059669); height: 100%; width: ${barWidth}%; border-radius: 4px;"></div>`;
      html += `</div>`;
      html += `<span style="color: #059669; font-weight: 600; width: 80px; text-align: right;">$${ahorro.toLocaleString()}</span>`;
      html += '</div>';
    });
    
    html += '</div>';
    return html;
  }

  // Función para generar conclusiones de ROI
  function generarConclusionesROI(roiData) {
    const roi = roiData.roiPercentage || 0;
    const payback = roiData.paybackMonths || 0;
    
    let conclusion = '';
    
    if (roi >= 100) {
      conclusion = '🎯 <strong>Inversión Altamente Recomendada:</strong> El ROI supera el 100% anual, indicando una rentabilidad excepcional.';
    } else if (roi >= 50) {
      conclusion = '✅ <strong>Inversión Recomendada:</strong> El ROI está por encima del 50%, mostrando una buena rentabilidad.';
    } else if (roi >= 25) {
      conclusion = '⚠️ <strong>Inversión Moderada:</strong> El ROI es positivo pero modesto. Evalúe otros factores.';
    } else if (roi > 0) {
      conclusion = '🔄 <strong>Inversión Marginal:</strong> El ROI es bajo. Considere optimizaciones antes de implementar.';
    } else {
      conclusion = '❌ <strong>Inversión No Recomendada:</strong> El análisis actual no muestra beneficios financieros positivos.';
    }
    
    if (payback <= 12) {
      conclusion += ` La recuperación en ${payback} meses es excelente.`;
    } else if (payback <= 24) {
      conclusion += ` La recuperación en ${payback} meses es aceptable.`;
    } else {
      conclusion += ` La recuperación en ${payback} meses requiere evaluación cuidadosa.`;
    }
    
    return `<p style="color: #1e293b; line-height: 1.6;">${conclusion}</p>`;
  }

  // Función para completar datos de cotización
  function completarDatosCotizacion(quoteData) {
    // Si ya tiene calculations y summary, retornar como está
    if (quoteData.calculations && quoteData.summary) {
      return quoteData;
    }
    
    const { selectedAgents = [], selectedPlan = null, selectedServices = [] } = quoteData;
    
    // Calcular totales
    const baseTotal = selectedAgents.reduce((sum, agent) => sum + (agent.implementationPrice || 0), 0);
    const setupTotal = selectedAgents.reduce((sum, agent) => sum + (agent.setupPrice || 0), 0);
    const monthlyTotal = (selectedPlan?.price || selectedPlan?.monthlyPrice || 0) + 
                       selectedServices.reduce((sum, service) => sum + (service.monthlyPrice || 0), 0);
    const servicesTotal = selectedServices.reduce((sum, service) => sum + (service.price || 0), 0);
    
    const grandTotal = baseTotal + setupTotal + servicesTotal;
    const firstYearTotal = grandTotal + (monthlyTotal * 12);
    
    // Completar objeto con datos calculados
    const completedData = {
      ...quoteData,
      calculations: {
        baseTotal,
        setupTotal,
        monthlyTotal,
        servicesTotal,
        warrantyTotal: 0,
        grandTotal,
        firstYearTotal,
        currency: 'MXN'
      },
      summary: {
        validityDays: 30,
        paymentTerms: '50% inicial, 50% contra entrega',
        warranty: '12 meses garantía completa'
      }
    };
    
    return completedData;
  }

  // Función para generar HTML de detalles estándar
  function generarHTMLDetallesEstandar(specificData) {
    let html = '<div class="section"><div class="section-header"><div class="section-title">Detalles del Documento</div></div><div class="section-content"><div class="specific-data">';
    
    Object.entries(specificData).forEach(([key, value]) => {
      if (typeof value === 'string' && value.trim()) {
        html += `
          <div class="data-item">
            <div class="data-label">${key}:</div>
            <div class="data-value">${value}</div>
          </div>
        `;
      }
    });
    
    html += '</div></div></div>';
    return html;
  }

  // Función renderFallbackContent copiada del portal de usuarios
  function renderFallbackContent(documento) {
    return `
      <div class="document-container" style="max-width: 216mm; width: 216mm; margin: 0 auto; padding: 20mm; background: white; min-height: 279mm; position: relative;">
        <!-- Header del documento -->
        <div class="bg-gradient-to-r from-teal-500 to-emerald-500 text-white p-6 rounded-lg mb-8">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-2xl font-bold mb-2">${documento.title}</h1>
              <p class="text-teal-100">${documento.documentType?.name || 'Documento'}</p>
              <div class="flex items-center space-x-4 mt-2 text-sm">
                <span class="flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                  ${documento.documentNumber}
                </span>
                <span class="flex items-center">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  ${formatDate(documento.createdAt)}
                </span>
              </div>
            </div>
            <div class="text-right">
              <span class="px-3 py-1 bg-white bg-opacity-20 rounded-full text-sm font-medium">
                ${getStatusLabel(documento.status)}
              </span>
            </div>
          </div>
        </div>

        <!-- Información de la orden -->
        <div class="mb-8">
          <h4 class="text-lg font-semibold text-gray-900 mb-4">Información de la Orden</h4>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div class="bg-gray-50 p-4 rounded-lg">
              <span class="font-semibold text-gray-800 block mb-1">Número de Orden:</span>
              <span class="text-gray-700">${documento.order?.orderNumber || 'N/A'}</span>
            </div>
            <div class="bg-gray-50 p-4 rounded-lg">
              <span class="font-semibold text-gray-800 block mb-1">Cliente:</span>
              <span class="text-gray-700">${documento.order?.client?.companyName || 'N/A'}</span>
            </div>
            <div class="bg-gray-50 p-4 rounded-lg">
              <span class="font-semibold text-gray-800 block mb-1">Proyecto:</span>
              <span class="text-gray-700">${documento.order?.title || 'N/A'}</span>
            </div>
            <div class="bg-gray-50 p-4 rounded-lg">
              <span class="font-semibold text-gray-800 block mb-1">Fecha de Creación:</span>
              <span class="text-gray-700">${formatDate(documento.createdAt)}</span>
            </div>
            <div class="bg-gray-50 p-4 rounded-lg">
              <span class="font-semibold text-gray-800 block mb-1">Creado por:</span>
              <span class="text-gray-700">${documento.createdBy?.name || 'Sistema'}</span>
            </div>
            <div class="bg-gray-50 p-4 rounded-lg">
              <span class="font-semibold text-gray-800 block mb-1">Versión:</span>
              <span class="text-gray-700">${documento.version}</span>
            </div>
          </div>
        </div>

        <!-- Descripción -->
        ${documento.description ? `
          <div class="mb-8">
            <h4 class="text-lg font-semibold text-gray-900 mb-4">Descripción</h4>
            <div class="bg-gray-50 p-4 rounded-lg">
              <p class="text-gray-700">${documento.description}</p>
            </div>
          </div>
        ` : ''}

        <!-- Información adicional -->
        <div class="text-xs text-gray-500 border-t pt-4 mt-8">
          <div class="flex items-center justify-between">
            <span>Documento generado por AIM System</span>
            <span>${formatDate(new Date())}</span>
          </div>
        </div>
      </div>
    `;
  }

  // ===== FIN FUNCIONES COPIADAS DEL PORTAL DE USUARIOS =====

  // Hacer funciones globales para uso en onclick
  window.showDocumentDetails = showDocumentDetails;
  window.closeDocumentModal = closeDocumentModal;
  window.downloadDocument = downloadDocument;
  window.showDocumentPreview = showDocumentPreview;
  window.closeDocumentPreview = closeDocumentPreview;
  window.downloadDocumentPDF = downloadDocumentPDF;
  window.downloadDocumentHTML = downloadDocumentHTML;
  window.obtenerHTMLVistaPrevia = obtenerHTMLVistaPrevia;
  window.convertirHTMLaPDF = convertirHTMLaPDF;
</script> 