---
// src/layouts/PortalClientLayoutSidebar.astro
import BaseLayout from './BaseLayout.astro';
import { Icon } from 'astro-icon/components';

const { title, description } = Astro.props;
const currentPath = Astro.url.pathname;

const sidebarSections = [
  {
    name: 'Principal',
    links: [
      { name: 'Dashboard', href: '/portal-cliente', icon: 'tabler:home' }
    ]
  },
  {
    name: 'Mis Proyectos',
    links: [
      { name: 'Mis Órdenes', href: '/portal-cliente/ordenes', icon: 'tabler:shopping-cart' },
      { name: 'Mis Agentes', href: '/portal-cliente/agentes', icon: 'tabler:robot' }
    ]
  },
  {
    name: 'Recursos y Facturación',
    links: [
      { name: 'Mis Documentos', href: '/portal-cliente/documentos', icon: 'tabler:files' },
      { name: 'Mi Facturación', href: '/portal-cliente/facturacion', icon: 'tabler:receipt' }
    ]
  },
  {
    name: 'Mi Cuenta',
    links: [
      { name: 'Configuración', href: '/portal-cliente/configuracion', icon: 'tabler:settings' }
    ]
  }
];
---

<BaseLayout title={title} description={description} hideHeader={true}>
    <div class="flex min-h-screen bg-gray-50">
        <!-- Sidebar -->
        <aside id="sidebar" class="w-64 bg-white shadow-sm border-r border-gray-200 flex-shrink-0 flex flex-col transition-all duration-300">
            <!-- Logo Section -->
            <div class="p-6 border-b border-gray-100">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <img src="/img/AIMblanco.png" alt="AIM Logo" class="h-8 w-auto"/>
                        <span class="sidebar-text text-xl font-bold text-gray-900">Portal Cliente</span>
                    </div>
                    <!-- Botón de colapso - solo desktop -->
                    <button 
                        id="collapse-btn" 
                        class="hidden lg:block p-1.5 rounded-lg hover:bg-gray-100 transition-colors"
                        onclick="toggleSidebar()"
                    >
                        <Icon name="tabler:chevron-left" class="w-4 h-4 text-gray-600" />
                    </button>
                </div>
            </div>
            
            <!-- Navigation -->
            <nav class="mt-6 px-3 flex-1 overflow-y-auto">
                {sidebarSections.map((section) => (
                    <div class="mb-8">
                        <!-- Section Header -->
                        <h3 class="sidebar-text px-3 text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3">
                            {section.name}
                        </h3>
                        
                        <!-- Section Links -->
                        <div class="space-y-1">
                            {section.links.map((link) => {
                                const isActive = currentPath === link.href;
                                return (
                                    <a 
                                        href={link.href}
                                        class={`
                                            flex items-center px-3 py-3 rounded-lg text-sm font-medium transition-all duration-200
                                            ${isActive 
                                                ? 'bg-gradient-to-r from-teal-50 to-emerald-50 text-teal-700 border-r-4 border-teal-500 shadow-sm' 
                                                : 'text-gray-600 hover:bg-gray-50 hover:text-gray-900'
                                            }
                                        `}
                                        title={link.name}
                                    >
                                        <Icon name={link.icon} class={`w-5 h-5 mr-3 ${isActive ? 'text-teal-600' : ''}`} />
                                        <span class="sidebar-text">{link.name}</span>
                                        {isActive && (
                                            <div class="sidebar-text ml-auto w-2 h-2 bg-teal-500 rounded-full"></div>
                                        )}
                                    </a>
                                );
                            })}
                        </div>
                    </div>
                ))}
            </nav>
            
            <!-- User Section -->
            <div class="p-4 border-t border-gray-100 bg-white mt-auto">
                <!-- Loading state -->
                <div id="user-loading" class="flex items-center space-x-3 mb-3">
                    <div class="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center animate-pulse">
                        <Icon name="tabler:user" class="w-4 h-4 text-gray-400" />
                    </div>
                    <div class="sidebar-text flex-1 min-w-0">
                        <div class="h-4 bg-gray-200 rounded animate-pulse mb-1"></div>
                        <div class="h-3 bg-gray-200 rounded animate-pulse w-3/4"></div>
                    </div>
                </div>
                
                <!-- User info (hidden initially) -->
                <div id="user-info" class="hidden">
                    <div class="flex items-center space-x-3 mb-3">
                        <div class="w-8 h-8 bg-gradient-to-r from-teal-100 to-emerald-100 rounded-full flex items-center justify-center">
                            <Icon name="tabler:user" class="w-4 h-4 text-teal-600" />
                        </div>
                        <div class="sidebar-text flex-1 min-w-0">
                            <p id="user-name" class="text-sm font-medium text-gray-900 truncate">Cargando...</p>
                            <p id="user-email" class="text-xs text-gray-500 truncate">Cargando...</p>
                        </div>
                        <div id="user-role-badge" class="sidebar-text">
                            <span class="text-xs px-2 py-1 bg-teal-100 text-teal-700 rounded-full font-medium">Cliente</span>
                        </div>
                    </div>
                </div>
                
                <!-- Error state -->
                <div id="user-error" class="hidden mb-3">
                    <div class="flex items-center space-x-3">
                        <div class="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                            <Icon name="tabler:alert-circle" class="w-4 h-4 text-red-600" />
                        </div>
                        <div class="sidebar-text flex-1 min-w-0">
                            <p class="text-sm font-medium text-red-900 truncate">Error de sesión</p>
                            <p class="text-xs text-red-600 truncate">Por favor, inicia sesión</p>
                        </div>
                    </div>
                </div>
                
                <!-- Logout button -->
                <button 
                    id="logout-btn"
                    type="button"
                    class="w-full flex items-center justify-center px-3 py-2 text-sm text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors duration-200"
                >
                    <Icon name="tabler:logout" class="w-4 h-4 mr-2" />
                    <span class="sidebar-text">Cerrar Sesión</span>
                </button>
            </div>
        </aside>
        
        <!-- Main Content -->
        <main class="flex-1 min-w-0">
            <!-- Header with breadcrumbs -->
            <header class="bg-white border-b border-gray-200 px-6 py-4">
                <div class="flex items-center justify-between">
                    <div>
                        <h1 class="text-2xl font-semibold text-gray-900">{title.replace(' - Portal Cliente AIM', '').replace(' - Portal de Clientes AIM', '')}</h1>
                        <p class="text-sm text-gray-500 mt-1">Gestiona tus proyectos de automatización</p>
                    </div>
                    <div class="flex items-center space-x-4">
                        <button class="p-2 text-gray-400 hover:text-gray-500 hover:bg-gray-100 rounded-lg transition-colors duration-200">
                            <Icon name="tabler:bell" class="w-5 h-5" />
                        </button>
                        <button class="p-2 text-gray-400 hover:text-gray-500 hover:bg-gray-100 rounded-lg transition-colors duration-200">
                            <Icon name="tabler:help" class="w-5 h-5" />
                        </button>
                        <a 
                            href="/" 
                            class="p-2 text-gray-400 hover:text-gray-500 hover:bg-gray-100 rounded-lg transition-colors duration-200"
                        >
                            <Icon name="tabler:home" class="w-5 h-5" />
                        </a>
                    </div>
                </div>
            </header>
            
            <!-- Page Content -->
            <div class="p-6">
                <slot />
            </div>
        </main>
    </div>

    <style>
        /* Estilos básicos para sidebar colapsable */
        .sidebar-collapsed {
            width: 4rem !important;
        }
        
        .sidebar-collapsed .sidebar-text {
            display: none;
        }
        
        .sidebar-collapsed .space-y-1 > a {
            justify-content: center;
        }
    </style>

    <script>
        import { userStore } from '../lib/userStore.js';
        import { apiClient } from '../lib/apiClient.js';

        // Exponer globalmente para componentes React
        window.userStore = userStore;
        window.apiClient = apiClient;
        
        // Variables globales
        let unsubscribe = null;

        // Función simple para colapsar sidebar
        window.toggleSidebar = function() {
            const sidebar = document.getElementById('sidebar');
            if (sidebar) {
                sidebar.classList.toggle('sidebar-collapsed');
            }
        };

        // Inicializar cuando el DOM esté listo
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('🔄 Inicializando barra lateral del portal de clientes...');
            await initializeSidebar();
            setupLogoutButton();
        });

        // Inicializar sidebar
        async function initializeSidebar() {
            try {
                // Suscribirse a cambios en el store
                unsubscribe = userStore.subscribe((state) => {
                    if (state.user && !state.isLoading) {
                        showUserInfo(state.user);
                    } else if (state.error) {
                        showUserError();
                    }
                });

                // Cargar usuario
                await userStore.loadUser();
                
            } catch (error) {
                console.error('❌ Error inicializando sidebar del portal de clientes:', error);
                showUserError();
                
                // Redirigir a login después de un delay si no está autenticado
                setTimeout(() => {
                    if (window.location.pathname.startsWith('/portal-cliente')) {
                        window.location.href = '/login';
                    }
                }, 2000);
            }
        }

        // Mostrar información del usuario
        function showUserInfo(user) {
            if (!user) return;

            const loadingEl = document.getElementById('user-loading');
            const errorEl = document.getElementById('user-error');
            const infoEl = document.getElementById('user-info');
            
            if (loadingEl) loadingEl.style.display = 'none';
            if (errorEl) errorEl.classList.add('hidden');
            if (infoEl) infoEl.classList.remove('hidden');
            
            const nameElement = document.getElementById('user-name');
            const emailElement = document.getElementById('user-email');
            const roleBadge = document.getElementById('user-role-badge');
            
            if (nameElement) {
                nameElement.textContent = user.name || user.username || 'Cliente';
            }
            
            if (emailElement) {
                emailElement.textContent = user.email || 'Sin email';
            }
            
            // Para clientes, siempre mostrar el badge de "Cliente"
            if (roleBadge) {
                roleBadge.classList.remove('hidden');
                const badge = roleBadge.querySelector('span');
                if (badge) {
                    badge.textContent = 'Cliente';
                    badge.className = 'text-xs px-2 py-1 bg-teal-100 text-teal-700 rounded-full font-medium';
                }
            }
        }

        // Mostrar error del usuario
        function showUserError() {
            const loadingEl = document.getElementById('user-loading');
            const infoEl = document.getElementById('user-info');
            const errorEl = document.getElementById('user-error');
            
            if (loadingEl) loadingEl.style.display = 'none';
            if (infoEl) infoEl.classList.add('hidden');
            if (errorEl) errorEl.classList.remove('hidden');
        }

        // Configurar botón de logout
        function setupLogoutButton() {
            const logoutBtn = document.getElementById('logout-btn');
            
            if (logoutBtn) {
                logoutBtn.addEventListener('click', handleLogout);
            }
        }

        // Manejar logout
        async function handleLogout() {
            if (!confirm('¿Estás seguro de que quieres cerrar sesión?')) {
                return;
            }

            try {
                await userStore.logout();
            } catch (error) {
                console.error('❌ Error en logout:', error);
                userStore.clear();
            } finally {
                apiClient.clearTokens();
                window.location.href = '/login';
            }
        }

        // Limpiar suscripción al cerrar la página
        window.addEventListener('beforeunload', () => {
            if (unsubscribe) {
                unsubscribe();
            }
        });
    </script>
</BaseLayout> 